ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_GetSecond,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	RTC_GetSecond, %function
  24              	RTC_GetSecond:
  25              	.LFB3:
  26              		.file 1 "Generated_Source\\PSoC4/RTC.h"
   1:Generated_Source\PSoC4/RTC.h **** /***************************************************************************//**
   2:Generated_Source\PSoC4/RTC.h **** * \file Name: RTC.h
   3:Generated_Source\PSoC4/RTC.h **** * \version 1.30
   4:Generated_Source\PSoC4/RTC.h **** *
   5:Generated_Source\PSoC4/RTC.h **** *  This file provides constants and parameter values for the RTC_P4 Component.
   6:Generated_Source\PSoC4/RTC.h **** *
   7:Generated_Source\PSoC4/RTC.h **** ********************************************************************************
   8:Generated_Source\PSoC4/RTC.h **** * Copyright 2015-2017, Cypress Semiconductor Corporation.  All rights reserved.
   9:Generated_Source\PSoC4/RTC.h **** * You may use this file only in accordance with the license, terms, conditions,
  10:Generated_Source\PSoC4/RTC.h **** * disclaimers, and limitations in the end user license agreement accompanying
  11:Generated_Source\PSoC4/RTC.h **** * the software package with which this file was provided.
  12:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
  13:Generated_Source\PSoC4/RTC.h **** 
  14:Generated_Source\PSoC4/RTC.h **** #if !defined(CY_RTC_P4_RTC_H)
  15:Generated_Source\PSoC4/RTC.h **** #define CY_RTC_P4_RTC_H
  16:Generated_Source\PSoC4/RTC.h **** 
  17:Generated_Source\PSoC4/RTC.h **** #include <cytypes.h>
  18:Generated_Source\PSoC4/RTC.h **** #include <CyLib.h>
  19:Generated_Source\PSoC4/RTC.h **** 
  20:Generated_Source\PSoC4/RTC.h **** 
  21:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
  22:Generated_Source\PSoC4/RTC.h **** *    Data types definition
  23:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
  24:Generated_Source\PSoC4/RTC.h **** /**
  25:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_enums
  26:Generated_Source\PSoC4/RTC.h **** * \{
  27:Generated_Source\PSoC4/RTC.h **** */
  28:Generated_Source\PSoC4/RTC.h **** /** Daylight saving Time format enumeration */
  29:Generated_Source\PSoC4/RTC.h **** typedef enum
  30:Generated_Source\PSoC4/RTC.h **** {
  31:Generated_Source\PSoC4/RTC.h ****     RTC_DST_DATE_RELATIVE = 0u,  /**< Relative DST format */
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 2


  32:Generated_Source\PSoC4/RTC.h ****     RTC_DST_DATE_FIXED = 1u      /**< Fixed DST format */
  33:Generated_Source\PSoC4/RTC.h **** }RTC_DST_DATETYPE_ENUM;
  34:Generated_Source\PSoC4/RTC.h **** /** \} group_enums */
  35:Generated_Source\PSoC4/RTC.h **** 
  36:Generated_Source\PSoC4/RTC.h **** /**
  37:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_structures
  38:Generated_Source\PSoC4/RTC.h **** * \{
  39:Generated_Source\PSoC4/RTC.h **** */
  40:Generated_Source\PSoC4/RTC.h **** 
  41:Generated_Source\PSoC4/RTC.h **** /** RTC_DATE_TIME structure is the data structure that is used to 
  42:Generated_Source\PSoC4/RTC.h **** * save the current time and date (RTC_currentTimeDate), and Alarm time and date 
  43:Generated_Source\PSoC4/RTC.h **** *(RTC_alarmCfgTimeDate)
  44:Generated_Source\PSoC4/RTC.h **** *
  45:Generated_Source\PSoC4/RTC.h **** */
  46:Generated_Source\PSoC4/RTC.h **** typedef struct
  47:Generated_Source\PSoC4/RTC.h **** {
  48:Generated_Source\PSoC4/RTC.h ****     uint32 time;        /**< Time in the format used in API*/
  49:Generated_Source\PSoC4/RTC.h ****     uint32 date;        /**< Date in the format used in API*/
  50:Generated_Source\PSoC4/RTC.h ****     uint32 dayOfWeek;   /**< Day of the week, see \ref group_rtc_day_of_the_week */
  51:Generated_Source\PSoC4/RTC.h ****     uint32 status;      /**< RTC status, see \ref group_rtc_status */
  52:Generated_Source\PSoC4/RTC.h **** }RTC_DATE_TIME;
  53:Generated_Source\PSoC4/RTC.h **** 
  54:Generated_Source\PSoC4/RTC.h **** /*
  55:Generated_Source\PSoC4/RTC.h **** * RTC_DST_TIME structure is the data structure that is used to 
  56:Generated_Source\PSoC4/RTC.h **** * save time and date values for Daylight Savings Time Start and Stop 
  57:Generated_Source\PSoC4/RTC.h **** * (RTC_dstTimeDateStart and RTC_dstTimeDateStop)
  58:Generated_Source\PSoC4/RTC.h **** */
  59:Generated_Source\PSoC4/RTC.h **** typedef struct
  60:Generated_Source\PSoC4/RTC.h **** {
  61:Generated_Source\PSoC4/RTC.h ****     uint32 hour;          /**< Hour value */
  62:Generated_Source\PSoC4/RTC.h ****     uint32 dayOfWeek;     /**< Day of the week, see \ref group_rtc_day_of_the_week */
  63:Generated_Source\PSoC4/RTC.h ****     uint32 dayOfMonth;    /**< Day of the month */
  64:Generated_Source\PSoC4/RTC.h ****     uint32 weekOfMonth;   /**< Week of the month, see \ref group_rtc_dst_week_of_month */
  65:Generated_Source\PSoC4/RTC.h ****     uint32 month;         /**< Month value, see \ref group_rtc_month */
  66:Generated_Source\PSoC4/RTC.h ****     uint8  timeFormat;    /**< The DST operation mode, see \ref 
  67:Generated_Source\PSoC4/RTC.h ****                                RTC_DST_DATETYPE_ENUM */
  68:Generated_Source\PSoC4/RTC.h **** }RTC_DST_TIME;
  69:Generated_Source\PSoC4/RTC.h **** /** \} group_structures */
  70:Generated_Source\PSoC4/RTC.h **** 
  71:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
  72:Generated_Source\PSoC4/RTC.h **** *    Enumerated Types and Parameters
  73:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
  74:Generated_Source\PSoC4/RTC.h **** /* Time Format setting constants */
  75:Generated_Source\PSoC4/RTC.h **** #define RTC__HOUR_12 1
  76:Generated_Source\PSoC4/RTC.h **** #define RTC__HOUR_24 0
  77:Generated_Source\PSoC4/RTC.h **** 
  78:Generated_Source\PSoC4/RTC.h **** /*  Date Format setting constants */
  79:Generated_Source\PSoC4/RTC.h **** #define RTC__MM_DD_YYYY 0
  80:Generated_Source\PSoC4/RTC.h **** #define RTC__DD_MM_YYYY 1
  81:Generated_Source\PSoC4/RTC.h **** #define RTC__YYYY_MM_DD 2
  82:Generated_Source\PSoC4/RTC.h **** 
  83:Generated_Source\PSoC4/RTC.h **** /* Date Type setting constants */
  84:Generated_Source\PSoC4/RTC.h **** #define RTC__RELATIVE 0
  85:Generated_Source\PSoC4/RTC.h **** #define RTC__FIXED 1
  86:Generated_Source\PSoC4/RTC.h **** 
  87:Generated_Source\PSoC4/RTC.h **** /* DST Hour setting constants */
  88:Generated_Source\PSoC4/RTC.h **** #define RTC__H0000 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 3


  89:Generated_Source\PSoC4/RTC.h **** #define RTC__H0100 1
  90:Generated_Source\PSoC4/RTC.h **** #define RTC__H0200 2
  91:Generated_Source\PSoC4/RTC.h **** #define RTC__H0300 3
  92:Generated_Source\PSoC4/RTC.h **** #define RTC__H0400 4
  93:Generated_Source\PSoC4/RTC.h **** #define RTC__H0500 5
  94:Generated_Source\PSoC4/RTC.h **** #define RTC__H0600 6
  95:Generated_Source\PSoC4/RTC.h **** #define RTC__H0700 7
  96:Generated_Source\PSoC4/RTC.h **** #define RTC__H0800 8
  97:Generated_Source\PSoC4/RTC.h **** #define RTC__H0900 9
  98:Generated_Source\PSoC4/RTC.h **** #define RTC__H1000 10
  99:Generated_Source\PSoC4/RTC.h **** #define RTC__H1100 11
 100:Generated_Source\PSoC4/RTC.h **** #define RTC__H1200 12
 101:Generated_Source\PSoC4/RTC.h **** #define RTC__H1300 13
 102:Generated_Source\PSoC4/RTC.h **** #define RTC__H1400 14
 103:Generated_Source\PSoC4/RTC.h **** #define RTC__H1500 15
 104:Generated_Source\PSoC4/RTC.h **** #define RTC__H1600 16
 105:Generated_Source\PSoC4/RTC.h **** #define RTC__H1700 17
 106:Generated_Source\PSoC4/RTC.h **** #define RTC__H1800 18
 107:Generated_Source\PSoC4/RTC.h **** #define RTC__H1900 19
 108:Generated_Source\PSoC4/RTC.h **** #define RTC__H2000 20
 109:Generated_Source\PSoC4/RTC.h **** #define RTC__H2100 21
 110:Generated_Source\PSoC4/RTC.h **** #define RTC__H2200 22
 111:Generated_Source\PSoC4/RTC.h **** #define RTC__H2300 23
 112:Generated_Source\PSoC4/RTC.h **** 
 113:Generated_Source\PSoC4/RTC.h **** /* DST DayOfWeek setting constants */
 114:Generated_Source\PSoC4/RTC.h **** #define RTC__SUNDAY 1
 115:Generated_Source\PSoC4/RTC.h **** #define RTC__MONDAY 2
 116:Generated_Source\PSoC4/RTC.h **** #define RTC__TUESDAY 3
 117:Generated_Source\PSoC4/RTC.h **** #define RTC__WEDNESDAY 4
 118:Generated_Source\PSoC4/RTC.h **** #define RTC__THURSDAY 5
 119:Generated_Source\PSoC4/RTC.h **** #define RTC__FRIDAY 6
 120:Generated_Source\PSoC4/RTC.h **** #define RTC__SATURDAY 7
 121:Generated_Source\PSoC4/RTC.h **** 
 122:Generated_Source\PSoC4/RTC.h **** /* DST Month setting constants */
 123:Generated_Source\PSoC4/RTC.h **** #define RTC__JAN 1
 124:Generated_Source\PSoC4/RTC.h **** #define RTC__FEB 2
 125:Generated_Source\PSoC4/RTC.h **** #define RTC__MAR 3
 126:Generated_Source\PSoC4/RTC.h **** #define RTC__APR 4
 127:Generated_Source\PSoC4/RTC.h **** #define RTC__MAY 5
 128:Generated_Source\PSoC4/RTC.h **** #define RTC__JUN 6
 129:Generated_Source\PSoC4/RTC.h **** #define RTC__JUL 7
 130:Generated_Source\PSoC4/RTC.h **** #define RTC__AUG 8
 131:Generated_Source\PSoC4/RTC.h **** #define RTC__SEP 9
 132:Generated_Source\PSoC4/RTC.h **** #define RTC__OCT 10
 133:Generated_Source\PSoC4/RTC.h **** #define RTC__NOV 11
 134:Generated_Source\PSoC4/RTC.h **** #define RTC__DEC 12
 135:Generated_Source\PSoC4/RTC.h **** 
 136:Generated_Source\PSoC4/RTC.h **** /* DST WeekOfMonth setting constants */
 137:Generated_Source\PSoC4/RTC.h **** #define RTC__FIRST 1
 138:Generated_Source\PSoC4/RTC.h **** #define RTC__SECOND 2
 139:Generated_Source\PSoC4/RTC.h **** #define RTC__THIRD 3
 140:Generated_Source\PSoC4/RTC.h **** #define RTC__FOURTH 4
 141:Generated_Source\PSoC4/RTC.h **** #define RTC__FIFTH 5
 142:Generated_Source\PSoC4/RTC.h **** #define RTC__LAST 6
 143:Generated_Source\PSoC4/RTC.h **** 
 144:Generated_Source\PSoC4/RTC.h **** 
 145:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DATA_FORMAT     (1u)
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 4


 146:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_TIME_FORMAT     (0u)
 147:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_UPDATE_MODE     (0u)
 148:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_SECOND          (0u)
 149:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_MINUTE          (0u)
 150:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_HOUR            (0u)
 151:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DAY             (1u)
 152:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_MONTH           (1u)
 153:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_YEAR            (1970u)
 154:Generated_Source\PSoC4/RTC.h **** 
 155:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_ALARM_STATUS    (0u)
 156:Generated_Source\PSoC4/RTC.h **** 
 157:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STATUS      (0u)
 158:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_DATE_TYPE   (0u)
 159:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_START_MONTH (3uL)
 160:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_START_WOM   (6uL)
 161:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_START_DOM   (22uL)
 162:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_START_DOW   (1uL)
 163:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_START_HRS   (0uL)
 164:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STOP_MONTH  (10uL)
 165:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STOP_DOM    (22uL)
 166:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STOP_DOW    (1uL)
 167:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STOP_WOM    (6uL)
 168:Generated_Source\PSoC4/RTC.h **** #define RTC_INITIAL_DST_STOP_HRS    (0uL)
 169:Generated_Source\PSoC4/RTC.h **** 
 170:Generated_Source\PSoC4/RTC.h **** /**
 171:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_constants
 172:Generated_Source\PSoC4/RTC.h **** * \{
 173:Generated_Source\PSoC4/RTC.h **** */
 174:Generated_Source\PSoC4/RTC.h **** 
 175:Generated_Source\PSoC4/RTC.h **** /**
 176:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_day_of_the_week Day of the week definitions
 177:Generated_Source\PSoC4/RTC.h **** * \{
 178:Generated_Source\PSoC4/RTC.h **** * Definitions of days in the week
 179:Generated_Source\PSoC4/RTC.h **** */
 180:Generated_Source\PSoC4/RTC.h **** #define RTC_SUNDAY     (RTC__SUNDAY)       /**< Sequential number of Sunday in the week */
 181:Generated_Source\PSoC4/RTC.h **** #define RTC_MONDAY     (RTC__MONDAY)       /**< Sequential number of Monday in the week */
 182:Generated_Source\PSoC4/RTC.h **** #define RTC_TUESDAY    (RTC__TUESDAY)      /**< Sequential number of Tuesday in the week */
 183:Generated_Source\PSoC4/RTC.h **** #define RTC_WEDNESDAY  (RTC__WEDNESDAY)    /**< Sequential number of Wednesday in the week */
 184:Generated_Source\PSoC4/RTC.h **** #define RTC_THURSDAY   (RTC__THURSDAY)     /**< Sequential number of Thursday in the week */
 185:Generated_Source\PSoC4/RTC.h **** #define RTC_FRIDAY     (RTC__FRIDAY)       /**< Sequential number of Friday in the week */
 186:Generated_Source\PSoC4/RTC.h **** #define RTC_SATURDAY   (RTC__SATURDAY)     /**< Sequential number of Saturday in the week */
 187:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_day_of_the_week */
 188:Generated_Source\PSoC4/RTC.h **** 
 189:Generated_Source\PSoC4/RTC.h **** /**
 190:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_dst_week_of_month DST Week of month setting constants definitions
 191:Generated_Source\PSoC4/RTC.h **** * \{
 192:Generated_Source\PSoC4/RTC.h **** * Week of month setting constants definitions for Daylight Saving Time feature
 193:Generated_Source\PSoC4/RTC.h **** */
 194:Generated_Source\PSoC4/RTC.h **** #define RTC_FIRST      (RTC__FIRST)   /**< First week in the month */
 195:Generated_Source\PSoC4/RTC.h **** #define RTC_SECOND     (RTC__SECOND)  /**< Second week in the month  */
 196:Generated_Source\PSoC4/RTC.h **** #define RTC_THIRD      (RTC__THIRD)   /**< Third week in the month  */
 197:Generated_Source\PSoC4/RTC.h **** #define RTC_FOURTH     (RTC__FOURTH)  /**< Fourth week in the month  */
 198:Generated_Source\PSoC4/RTC.h **** #define RTC_FIFTH      (RTC__FIFTH)   /**< Fifth week in the month  */
 199:Generated_Source\PSoC4/RTC.h **** #define RTC_LAST       (RTC__LAST)    /**< Last week in the month  */
 200:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_dst_week_of_month */
 201:Generated_Source\PSoC4/RTC.h **** 
 202:Generated_Source\PSoC4/RTC.h **** /**
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 5


 203:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_month Month definitions
 204:Generated_Source\PSoC4/RTC.h **** * \{
 205:Generated_Source\PSoC4/RTC.h **** * Constants definition for Months
 206:Generated_Source\PSoC4/RTC.h **** */
 207:Generated_Source\PSoC4/RTC.h **** #define RTC_JANUARY    (RTC__JAN)    /**< Sequential number of January in the year */
 208:Generated_Source\PSoC4/RTC.h **** #define RTC_FEBRUARY   (RTC__FEB)    /**< Sequential number of February in the year */
 209:Generated_Source\PSoC4/RTC.h **** #define RTC_MARCH      (RTC__MAR)    /**< Sequential number of March in the year */
 210:Generated_Source\PSoC4/RTC.h **** #define RTC_APRIL      (RTC__APR)    /**< Sequential number of April in the year */
 211:Generated_Source\PSoC4/RTC.h **** #define RTC_MAY        (RTC__MAY)    /**< Sequential number of May in the year */
 212:Generated_Source\PSoC4/RTC.h **** #define RTC_JUNE       (RTC__JUN)    /**< Sequential number of June in the year */
 213:Generated_Source\PSoC4/RTC.h **** #define RTC_JULY       (RTC__JUL)    /**< Sequential number of July in the year */
 214:Generated_Source\PSoC4/RTC.h **** #define RTC_AUGUST     (RTC__AUG)    /**< Sequential number of August in the year */
 215:Generated_Source\PSoC4/RTC.h **** #define RTC_SEPTEMBER  (RTC__SEP)    /**< Sequential number of September in the year */
 216:Generated_Source\PSoC4/RTC.h **** #define RTC_OCTOBER    (RTC__OCT)    /**< Sequential number of October in the year */
 217:Generated_Source\PSoC4/RTC.h **** #define RTC_NOVEMBER   (RTC__NOV)    /**< Sequential number of November in the year */
 218:Generated_Source\PSoC4/RTC.h **** #define RTC_DECEMBER   (RTC__DEC)    /**< Sequential number of December in the year */
 219:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_month */
 220:Generated_Source\PSoC4/RTC.h **** 
 221:Generated_Source\PSoC4/RTC.h **** /**
 222:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_am_pm AM/PM status definitions
 223:Generated_Source\PSoC4/RTC.h **** * \{
 224:Generated_Source\PSoC4/RTC.h **** * Definitions for 12 hour format for indicating the AM/PM period of day
 225:Generated_Source\PSoC4/RTC.h **** */
 226:Generated_Source\PSoC4/RTC.h **** #define RTC_AM                 (0u)    /**< AM period of day */
 227:Generated_Source\PSoC4/RTC.h **** #define RTC_PM                 (1u)    /**< PM period of day */
 228:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_am_pm */
 229:Generated_Source\PSoC4/RTC.h **** 
 230:Generated_Source\PSoC4/RTC.h **** /**
 231:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_hour_format Hour format definitions
 232:Generated_Source\PSoC4/RTC.h **** * \{
 233:Generated_Source\PSoC4/RTC.h **** * Definitions for hour format
 234:Generated_Source\PSoC4/RTC.h **** */
 235:Generated_Source\PSoC4/RTC.h **** #define RTC_12_HOURS_FORMAT    (RTC__HOUR_12) /**< The 12 hour (AM/PM) format */
 236:Generated_Source\PSoC4/RTC.h **** #define RTC_24_HOURS_FORMAT    (RTC__HOUR_24) /**< The 24 hour format */
 237:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_hour_format */
 238:Generated_Source\PSoC4/RTC.h **** 
 239:Generated_Source\PSoC4/RTC.h **** /**
 240:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_days_in_month Number of days in month definitions
 241:Generated_Source\PSoC4/RTC.h **** * \{
 242:Generated_Source\PSoC4/RTC.h **** * Definition of days in current month
 243:Generated_Source\PSoC4/RTC.h **** */
 244:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_JANUARY     (31u)    /**< Number of days in January  */
 245:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_FEBRUARY    (28u)    /**< Number of days in February */
 246:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_MARCH       (31u)    /**< Number of days in March */
 247:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_APRIL       (30u)    /**< Number of days in April */
 248:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_MAY         (31u)    /**< Number of days in May */
 249:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_JUNE        (30u)    /**< Number of days in June */
 250:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_JULY        (31u)    /**< Number of days in July */
 251:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_AUGUST      (31u)    /**< Number of days in August */
 252:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_SEPTEMBER   (30u)    /**< Number of days in September */
 253:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_OCTOBER     (31u)    /**< Number of days in October */
 254:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_NOVEMBER    (30u)    /**< Number of days in November */
 255:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_IN_DECEMBER    (31u)    /**< Number of days in December */
 256:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_days_in_month */
 257:Generated_Source\PSoC4/RTC.h **** 
 258:Generated_Source\PSoC4/RTC.h **** /**
 259:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_status Definitions of the RTC status values
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 6


 260:Generated_Source\PSoC4/RTC.h **** * \{
 261:Generated_Source\PSoC4/RTC.h **** * Definitions for status software register, which has flags for DST (DST),
 262:Generated_Source\PSoC4/RTC.h **** * Leap Year (LY), AM/PM (AM_PM).
 263:Generated_Source\PSoC4/RTC.h **** */
 264:Generated_Source\PSoC4/RTC.h **** 
 265:Generated_Source\PSoC4/RTC.h **** /** Status of Daylight Saving Time. This bit
 266:Generated_Source\PSoC4/RTC.h **** * goes high when the current time and date match the DST time and date and the 
 267:Generated_Source\PSoC4/RTC.h **** * time is incremented. This bit goes low after the DST interval and the time is 
 268:Generated_Source\PSoC4/RTC.h **** * decremented.
 269:Generated_Source\PSoC4/RTC.h **** */
 270:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_DST     (1uL << RTC_STATUS_DST_OFFSET)
 271:Generated_Source\PSoC4/RTC.h **** 
 272:Generated_Source\PSoC4/RTC.h **** /** Status of Leap Year. This bit goes high when the current year is a leap year */
 273:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_LY      (1uL << RTC_STATUS_LY_OFFSET)
 274:Generated_Source\PSoC4/RTC.h **** 
 275:Generated_Source\PSoC4/RTC.h **** /** Status of Current Time. This bit is low from midnight to noon and high from 
 276:Generated_Source\PSoC4/RTC.h **** *  noon to midnight. */
 277:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_AM_PM   (1uL << RTC_STATUS_AM_PM_OFFSET)
 278:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_status */
 279:Generated_Source\PSoC4/RTC.h **** 
 280:Generated_Source\PSoC4/RTC.h **** /**
 281:Generated_Source\PSoC4/RTC.h **** * \defgroup group_rtc_alarm_mask Definitions for Alarm Mask software register
 282:Generated_Source\PSoC4/RTC.h **** * \{
 283:Generated_Source\PSoC4/RTC.h **** * Definitions for Alarm Mask software register. These masks allow 
 284:Generated_Source\PSoC4/RTC.h **** * matching the alarm value register with the current value register.
 285:Generated_Source\PSoC4/RTC.h **** */
 286:Generated_Source\PSoC4/RTC.h **** 
 287:Generated_Source\PSoC4/RTC.h **** /** The second alarm mask allows matching the alarm second register with the 
 288:Generated_Source\PSoC4/RTC.h **** *   current second register.
 289:Generated_Source\PSoC4/RTC.h **** */
 290:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_SEC_MASK         (0x00000001uL)
 291:Generated_Source\PSoC4/RTC.h **** 
 292:Generated_Source\PSoC4/RTC.h **** /** The minute alarm mask allows matching the alarm minute register with the 
 293:Generated_Source\PSoC4/RTC.h **** *   current minute register.
 294:Generated_Source\PSoC4/RTC.h **** */
 295:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_MIN_MASK         (0x00000002uL)
 296:Generated_Source\PSoC4/RTC.h **** 
 297:Generated_Source\PSoC4/RTC.h **** /** The hour alarm mask allows matching the alarm hour register with the 
 298:Generated_Source\PSoC4/RTC.h **** *   current hour register.
 299:Generated_Source\PSoC4/RTC.h **** */
 300:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_HOUR_MASK        (0x00000004uL)
 301:Generated_Source\PSoC4/RTC.h **** 
 302:Generated_Source\PSoC4/RTC.h **** /** The day of the week alarm mask allows matching the alarm hour register with 
 303:Generated_Source\PSoC4/RTC.h **** *   the current day of the week register.
 304:Generated_Source\PSoC4/RTC.h **** */
 305:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_DAYOFWEEK_MASK   (0x00000008uL)
 306:Generated_Source\PSoC4/RTC.h **** 
 307:Generated_Source\PSoC4/RTC.h **** /** The day of the Month alarm mask allows matching the alarm hour register with 
 308:Generated_Source\PSoC4/RTC.h **** *   the current day of the Month register.
 309:Generated_Source\PSoC4/RTC.h **** */
 310:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_DAYOFMONTH_MASK  (0x00000010uL)
 311:Generated_Source\PSoC4/RTC.h **** 
 312:Generated_Source\PSoC4/RTC.h **** /** The month alarm mask allows matching the alarm hour register with the
 313:Generated_Source\PSoC4/RTC.h **** *   current month register.
 314:Generated_Source\PSoC4/RTC.h **** */
 315:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_MONTH_MASK       (0x00000020uL)
 316:Generated_Source\PSoC4/RTC.h **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 7


 317:Generated_Source\PSoC4/RTC.h **** /** The year alarm mask allows matching the alarm hour register with the
 318:Generated_Source\PSoC4/RTC.h **** *   current year register.
 319:Generated_Source\PSoC4/RTC.h **** */
 320:Generated_Source\PSoC4/RTC.h **** #define RTC_ALARM_YEAR_MASK        (0x00000040uL)
 321:Generated_Source\PSoC4/RTC.h **** 
 322:Generated_Source\PSoC4/RTC.h **** /** \} group_rtc_alarm_mask */
 323:Generated_Source\PSoC4/RTC.h **** /** \} group_constants */
 324:Generated_Source\PSoC4/RTC.h **** 
 325:Generated_Source\PSoC4/RTC.h **** #define RTC_DAYS_PER_WEEK       (7u)
 326:Generated_Source\PSoC4/RTC.h **** 
 327:Generated_Source\PSoC4/RTC.h **** #define RTC_MONTHS_PER_YEAR     (12uL)
 328:Generated_Source\PSoC4/RTC.h **** 
 329:Generated_Source\PSoC4/RTC.h **** #define RTC_HOURS_PER_DAY       (24uL)
 330:Generated_Source\PSoC4/RTC.h **** #define RTC_HOURS_PER_HALF_DAY  (12uL)
 331:Generated_Source\PSoC4/RTC.h **** 
 332:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_PER_MINUTE  (60uL)
 333:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_PER_HOUR    (3600uL)
 334:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_PER_DAY     (24uL * 3600uL)
 335:Generated_Source\PSoC4/RTC.h **** 
 336:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_PER_LEAP_YEAR    (366uL * 24uL * 3600uL)
 337:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_PER_NONLEAP_YEAR (365uL * 24uL * 3600uL)
 338:Generated_Source\PSoC4/RTC.h **** 
 339:Generated_Source\PSoC4/RTC.h **** #define RTC_UNIX_TIME_PM        ((12uL * 3600uL) + 1uL)
 340:Generated_Source\PSoC4/RTC.h **** 
 341:Generated_Source\PSoC4/RTC.h **** /* Unix time begins in 1970 year */
 342:Generated_Source\PSoC4/RTC.h **** #define RTC_YEAR_0             (1970u)
 343:Generated_Source\PSoC4/RTC.h **** 
 344:Generated_Source\PSoC4/RTC.h **** /* Definition of date register fields */
 345:Generated_Source\PSoC4/RTC.h **** #if(RTC_INITIAL_DATA_FORMAT == RTC__MM_DD_YYYY)
 346:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_MONTH_OFFSET   (28u)
 347:Generated_Source\PSoC4/RTC.h ****     #define RTC_MONTH_OFFSET      (24u)
 348:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_DAY_OFFSET     (20u)
 349:Generated_Source\PSoC4/RTC.h ****     #define RTC_DAY_OFFSET        (16u)
 350:Generated_Source\PSoC4/RTC.h ****     #define RTC_1000_YEAR_OFFSET  (12u)
 351:Generated_Source\PSoC4/RTC.h ****     #define RTC_100_YEAR_OFFSET   (8u)
 352:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_YEAR_OFFSET    (4u)
 353:Generated_Source\PSoC4/RTC.h ****     #define RTC_YEAR_OFFSET       (0u)
 354:Generated_Source\PSoC4/RTC.h **** #elif(RTC_INITIAL_DATA_FORMAT == RTC__DD_MM_YYYY)
 355:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_MONTH_OFFSET   (20u)
 356:Generated_Source\PSoC4/RTC.h ****     #define RTC_MONTH_OFFSET      (16u)
 357:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_DAY_OFFSET     (28u)
 358:Generated_Source\PSoC4/RTC.h ****     #define RTC_DAY_OFFSET        (24u)
 359:Generated_Source\PSoC4/RTC.h ****     #define RTC_1000_YEAR_OFFSET  (12u)
 360:Generated_Source\PSoC4/RTC.h ****     #define RTC_100_YEAR_OFFSET   (8u)
 361:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_YEAR_OFFSET    (4u)
 362:Generated_Source\PSoC4/RTC.h ****     #define RTC_YEAR_OFFSET       (0u)
 363:Generated_Source\PSoC4/RTC.h **** #else
 364:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_MONTH_OFFSET   (12u)
 365:Generated_Source\PSoC4/RTC.h ****     #define RTC_MONTH_OFFSET      (8u)
 366:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_DAY_OFFSET     (4u)
 367:Generated_Source\PSoC4/RTC.h ****     #define RTC_DAY_OFFSET        (0u)
 368:Generated_Source\PSoC4/RTC.h ****     #define RTC_1000_YEAR_OFFSET  (28u)
 369:Generated_Source\PSoC4/RTC.h ****     #define RTC_100_YEAR_OFFSET   (24u)
 370:Generated_Source\PSoC4/RTC.h ****     #define RTC_10_YEAR_OFFSET    (20u)
 371:Generated_Source\PSoC4/RTC.h ****     #define RTC_YEAR_OFFSET       (16u)
 372:Generated_Source\PSoC4/RTC.h **** #endif /* (RTC_INITIAL_DATA_FORMAT == RTC__MM_DD_YYYY) */
 373:Generated_Source\PSoC4/RTC.h **** 
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 8


 374:Generated_Source\PSoC4/RTC.h **** #define RTC_10_MONTH_MASK          (0x00000001uL << RTC_10_MONTH_OFFSET)
 375:Generated_Source\PSoC4/RTC.h **** #define RTC_MONTH_MASK             (0x0000000FuL << RTC_MONTH_OFFSET)
 376:Generated_Source\PSoC4/RTC.h **** #define RTC_10_DAY_MASK            (0x00000003uL << RTC_10_DAY_OFFSET)
 377:Generated_Source\PSoC4/RTC.h **** #define RTC_DAY_MASK               (0x0000000FuL << RTC_DAY_OFFSET)
 378:Generated_Source\PSoC4/RTC.h **** #define RTC_1000_YEAR_MASK         (0x00000003uL << RTC_1000_YEAR_OFFSET)
 379:Generated_Source\PSoC4/RTC.h **** #define RTC_100_YEAR_MASK          (0x0000000FuL << RTC_100_YEAR_OFFSET)
 380:Generated_Source\PSoC4/RTC.h **** #define RTC_10_YEAR_MASK           (0x0000000FuL << RTC_10_YEAR_OFFSET)
 381:Generated_Source\PSoC4/RTC.h **** #define RTC_YEAR_MASK              (0x0000000FuL << RTC_YEAR_OFFSET)
 382:Generated_Source\PSoC4/RTC.h **** 
 383:Generated_Source\PSoC4/RTC.h **** #define  RTC_MONTH_FULL_MASK       (RTC_10_MONTH_MASK  | RTC_MONTH_MASK)
 384:Generated_Source\PSoC4/RTC.h **** #define  RTC_DAY_FULL_MASK         (RTC_10_DAY_MASK    | RTC_DAY_MASK)
 385:Generated_Source\PSoC4/RTC.h **** #define  RTC_YEAR_FULL_MASK        (RTC_1000_YEAR_MASK | RTC_100_YEAR_MASK |\
 386:Generated_Source\PSoC4/RTC.h ****                                                  RTC_10_YEAR_MASK   | RTC_YEAR_MASK)
 387:Generated_Source\PSoC4/RTC.h **** 
 388:Generated_Source\PSoC4/RTC.h **** /* Definition of time register fields */
 389:Generated_Source\PSoC4/RTC.h **** #define RTC_TIME_FORMAT_OFFSET     (23u)
 390:Generated_Source\PSoC4/RTC.h **** #define RTC_PERIOD_OF_DAY_OFFSET   (22u)
 391:Generated_Source\PSoC4/RTC.h **** #define RTC_10_HOURS_OFFSET        (20u)
 392:Generated_Source\PSoC4/RTC.h **** #define RTC_HOURS_OFFSET           (16u)
 393:Generated_Source\PSoC4/RTC.h **** #define RTC_10_MINUTES_OFFSET      (12u)
 394:Generated_Source\PSoC4/RTC.h **** #define RTC_MINUTES_OFFSET         (8u)
 395:Generated_Source\PSoC4/RTC.h **** #define RTC_10_SECONDS_OFFSET      (4u)
 396:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_OFFSET         (0u)
 397:Generated_Source\PSoC4/RTC.h **** 
 398:Generated_Source\PSoC4/RTC.h **** #define RTC_TIME_FORMAT_MASK       (0x00000001uL << RTC_TIME_FORMAT_OFFSET)
 399:Generated_Source\PSoC4/RTC.h **** #define RTC_PERIOD_OF_DAY_MASK     (0x00000001uL << RTC_PERIOD_OF_DAY_OFFSET)
 400:Generated_Source\PSoC4/RTC.h **** #define RTC_10_HOURS_MASK          (0x00000003uL << RTC_10_HOURS_OFFSET)
 401:Generated_Source\PSoC4/RTC.h **** #define RTC_HOURS_MASK             (0x0000000FuL << RTC_HOURS_OFFSET)
 402:Generated_Source\PSoC4/RTC.h **** #define RTC_10_MINUTES_MASK        (0x00000007uL << RTC_10_MINUTES_OFFSET)
 403:Generated_Source\PSoC4/RTC.h **** #define RTC_MINUTES_MASK           (0x0000000FuL << RTC_MINUTES_OFFSET)
 404:Generated_Source\PSoC4/RTC.h **** #define RTC_10_SECONDS_MASK        (0x00000007uL << RTC_10_SECONDS_OFFSET)
 405:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_MASK           (0x0000000FuL << RTC_SECONDS_OFFSET)
 406:Generated_Source\PSoC4/RTC.h **** 
 407:Generated_Source\PSoC4/RTC.h **** #define RTC_HOURS_FULL_MASK        (RTC_10_HOURS_MASK   | RTC_HOURS_MASK)
 408:Generated_Source\PSoC4/RTC.h **** #define RTC_MINUTES_FULL_MASK      (RTC_10_MINUTES_MASK | RTC_MINUTES_MASK)
 409:Generated_Source\PSoC4/RTC.h **** #define RTC_SECONDS_FULL_MASK      (RTC_10_SECONDS_MASK | RTC_SECONDS_MASK)
 410:Generated_Source\PSoC4/RTC.h **** 
 411:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_DST_OFFSET      (1u)
 412:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_ALARM_OFFSET    (2u)
 413:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_LY_OFFSET       (3u)
 414:Generated_Source\PSoC4/RTC.h **** #define RTC_STATUS_AM_PM_OFFSET    (4u)
 415:Generated_Source\PSoC4/RTC.h **** 
 416:Generated_Source\PSoC4/RTC.h **** /* Number of bits per one BCD digit */
 417:Generated_Source\PSoC4/RTC.h **** #define RTC_BCD_NUMBER_SIZE        (4u)
 418:Generated_Source\PSoC4/RTC.h **** #define RTC_BCD_ONE_DIGIT_MASK     (0x0000000FuL)
 419:Generated_Source\PSoC4/RTC.h **** 
 420:Generated_Source\PSoC4/RTC.h **** 
 421:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 422:Generated_Source\PSoC4/RTC.h **** *    External Variables
 423:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 424:Generated_Source\PSoC4/RTC.h **** /**
 425:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_globals
 426:Generated_Source\PSoC4/RTC.h **** * \{
 427:Generated_Source\PSoC4/RTC.h **** */
 428:Generated_Source\PSoC4/RTC.h **** 
 429:Generated_Source\PSoC4/RTC.h **** /**
 430:Generated_Source\PSoC4/RTC.h **** * Indicates whether the RTC has been initialized; The variable is initialized to
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 9


 431:Generated_Source\PSoC4/RTC.h **** * 0 and set to 1 the first time RTC_Start() is called. This allows the component
 432:Generated_Source\PSoC4/RTC.h **** * to restart without reinitialization after the first call to the RTC_Start() 
 433:Generated_Source\PSoC4/RTC.h **** * routine.
 434:Generated_Source\PSoC4/RTC.h **** */
 435:Generated_Source\PSoC4/RTC.h **** extern uint8  RTC_initVar;
 436:Generated_Source\PSoC4/RTC.h **** 
 437:Generated_Source\PSoC4/RTC.h **** /** The DST start/stop status */
 438:Generated_Source\PSoC4/RTC.h **** extern uint8  RTC_dstStatus;
 439:Generated_Source\PSoC4/RTC.h **** 
 440:Generated_Source\PSoC4/RTC.h **** /**
 441:Generated_Source\PSoC4/RTC.h **** * The uint64 variable represents the standard Unix time (number of seconds 
 442:Generated_Source\PSoC4/RTC.h **** * elapsed from January 1, 1970 00:00 hours UTC) in 64-bit 
 443:Generated_Source\PSoC4/RTC.h **** */
 444:Generated_Source\PSoC4/RTC.h **** extern volatile uint64 RTC_unixTime;
 445:Generated_Source\PSoC4/RTC.h **** 
 446:Generated_Source\PSoC4/RTC.h **** /** The values for the time and date of the DST start */
 447:Generated_Source\PSoC4/RTC.h **** extern RTC_DST_TIME RTC_dstStartTime;
 448:Generated_Source\PSoC4/RTC.h **** 
 449:Generated_Source\PSoC4/RTC.h **** /** The values for the time and date of the DST stop */
 450:Generated_Source\PSoC4/RTC.h **** extern RTC_DST_TIME RTC_dstStopTime;
 451:Generated_Source\PSoC4/RTC.h **** 
 452:Generated_Source\PSoC4/RTC.h **** /**
 453:Generated_Source\PSoC4/RTC.h **** * The last updated time and date values are stored in this structure (update 
 454:Generated_Source\PSoC4/RTC.h **** * happens in Get time/date APIs)
 455:Generated_Source\PSoC4/RTC.h **** */
 456:Generated_Source\PSoC4/RTC.h **** extern RTC_DATE_TIME RTC_currentTimeDate;
 457:Generated_Source\PSoC4/RTC.h **** 
 458:Generated_Source\PSoC4/RTC.h **** /** The alarm time and date values are stored in this variable */
 459:Generated_Source\PSoC4/RTC.h **** extern RTC_DATE_TIME RTC_alarmCfgTimeDate;
 460:Generated_Source\PSoC4/RTC.h **** 
 461:Generated_Source\PSoC4/RTC.h **** /**
 462:Generated_Source\PSoC4/RTC.h **** * This variable is used to mask alarm events; mask seconds alarm, mask minutes 
 463:Generated_Source\PSoC4/RTC.h **** * alarm, and so on. It will have bit masks for each time item masking that item 
 464:Generated_Source\PSoC4/RTC.h **** * for alarm generation
 465:Generated_Source\PSoC4/RTC.h **** */
 466:Generated_Source\PSoC4/RTC.h **** extern uint32  RTC_alarmCfgMask;
 467:Generated_Source\PSoC4/RTC.h **** 
 468:Generated_Source\PSoC4/RTC.h **** /**
 469:Generated_Source\PSoC4/RTC.h **** * This variable is used to indicate current active alarm status per time item 
 470:Generated_Source\PSoC4/RTC.h **** * used in the alarm; whether seconds alarm is active, minute's alarm is active, 
 471:Generated_Source\PSoC4/RTC.h **** * and so on. It will have bit masks for each time item (seconds, minutes, hours,
 472:Generated_Source\PSoC4/RTC.h **** * day, and so on) showing the status
 473:Generated_Source\PSoC4/RTC.h **** */
 474:Generated_Source\PSoC4/RTC.h **** extern uint32 RTC_alarmCurStatus;
 475:Generated_Source\PSoC4/RTC.h **** 
 476:Generated_Source\PSoC4/RTC.h **** /** \} group_globals */
 477:Generated_Source\PSoC4/RTC.h **** 
 478:Generated_Source\PSoC4/RTC.h **** extern void (*RTC_alarmCallbackPtr)(void);
 479:Generated_Source\PSoC4/RTC.h **** 
 480:Generated_Source\PSoC4/RTC.h **** extern const uint16 RTC_daysBeforeMonthTbl[RTC_MONTHS_PER_YEAR];
 481:Generated_Source\PSoC4/RTC.h **** extern const uint8  RTC_daysInMonthTbl[RTC_MONTHS_PER_YEAR];
 482:Generated_Source\PSoC4/RTC.h **** 
 483:Generated_Source\PSoC4/RTC.h **** 
 484:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 485:Generated_Source\PSoC4/RTC.h **** *    Function Prototypes
 486:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 487:Generated_Source\PSoC4/RTC.h **** /**
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 10


 488:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_general
 489:Generated_Source\PSoC4/RTC.h **** * \{
 490:Generated_Source\PSoC4/RTC.h **** */
 491:Generated_Source\PSoC4/RTC.h **** void   RTC_Start(void);
 492:Generated_Source\PSoC4/RTC.h **** void   RTC_Stop(void);
 493:Generated_Source\PSoC4/RTC.h **** void   RTC_Init(void);
 494:Generated_Source\PSoC4/RTC.h **** void   RTC_SetUnixTime(uint64 unixTime);
 495:Generated_Source\PSoC4/RTC.h **** uint64 RTC_GetUnixTime(void);
 496:Generated_Source\PSoC4/RTC.h **** void   RTC_SetPeriod(uint32 ticks, uint32 refOneSecTicks);
 497:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetPeriod(void);
 498:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetRefOneSec(void);
 499:Generated_Source\PSoC4/RTC.h **** void   RTC_SetDateAndTime(uint32 inputTime, uint32 inputDate);
 500:Generated_Source\PSoC4/RTC.h **** void   RTC_GetDateAndTime(RTC_DATE_TIME* dateTime);
 501:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetTime(void);
 502:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetDate(void);
 503:Generated_Source\PSoC4/RTC.h **** void   RTC_SetAlarmDateAndTime(const RTC_DATE_TIME* alarmTime);
 504:Generated_Source\PSoC4/RTC.h **** void   RTC_GetAlarmDateAndTime(RTC_DATE_TIME* alarmTimeDate);
 505:Generated_Source\PSoC4/RTC.h **** void   RTC_SetAlarmMask(uint32 mask);
 506:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetAlarmMask(void);
 507:Generated_Source\PSoC4/RTC.h **** uint32 RTC_ReadStatus(void);
 508:Generated_Source\PSoC4/RTC.h **** uint32 RTC_GetAlarmStatus(void);
 509:Generated_Source\PSoC4/RTC.h **** void   RTC_ClearAlarmStatus(void);
 510:Generated_Source\PSoC4/RTC.h **** void   RTC_SetDSTStartTime(const RTC_DST_TIME* dstStartTime,
 511:Generated_Source\PSoC4/RTC.h ****                                               RTC_DST_DATETYPE_ENUM type);
 512:Generated_Source\PSoC4/RTC.h **** void   RTC_SetDSTStopTime(const RTC_DST_TIME* dstStopTime,
 513:Generated_Source\PSoC4/RTC.h ****                                              RTC_DST_DATETYPE_ENUM type);
 514:Generated_Source\PSoC4/RTC.h **** uint32 RTC_ConvertBCDToDec(uint32 bcdNum);
 515:Generated_Source\PSoC4/RTC.h **** uint32 RTC_ConvertDecToBCD(uint32 decNum);
 516:Generated_Source\PSoC4/RTC.h **** void   RTC_Update(void);
 517:Generated_Source\PSoC4/RTC.h **** void*  RTC_SetAlarmHandler(void (*CallbackFunction)(void));
 518:Generated_Source\PSoC4/RTC.h **** 
 519:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_ConstructDate(uint32 month, uint32 day, uint32 year);
 520:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_ConstructTime(uint32 timeFormat, uint32 stateAmPm, uint32 hour, uint32 min, uint3
 521:Generated_Source\PSoC4/RTC.h **** /** \} group_general */
 522:Generated_Source\PSoC4/RTC.h **** 
 523:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetTimeFormat(uint32 inputTime);
 524:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetTimeFormat(uint32 inputTime, uint32 timeFormat);
 525:Generated_Source\PSoC4/RTC.h **** 
 526:Generated_Source\PSoC4/RTC.h **** /**
 527:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_general
 528:Generated_Source\PSoC4/RTC.h **** * \{
 529:Generated_Source\PSoC4/RTC.h **** */
 530:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_LeapYear(uint32 year);
 531:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_IsBitSet(uint32 var, uint32 mask);
 532:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetSecond(uint32 inputTime);
 533:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetMinutes(uint32 inputTime);
 534:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetHours(uint32 inputTime);
 535:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetAmPm(uint32 inputTime);
 536:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetDay(uint32 date);
 537:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetMonth(uint32 date);
 538:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetYear(uint32 date);
 539:Generated_Source\PSoC4/RTC.h **** /** \} group_general */
 540:Generated_Source\PSoC4/RTC.h **** 
 541:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetSecond(uint32 inputTime, uint32 inputSecond);
 542:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetMinutes(uint32 inputTime, uint32 inputMinute);
 543:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetHours(uint32 inputTime, uint32 inputHours);
 544:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetAmPm(uint32 inputTime, uint32 periodOfDay);
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 11


 545:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetDay(uint32 inputDate, uint32 inputDay);
 546:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetMonth(uint32 inputDate, uint32 inputMonth);
 547:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_SetYear(uint32 inputDate, uint32 inputYear);
 548:Generated_Source\PSoC4/RTC.h **** 
 549:Generated_Source\PSoC4/RTC.h **** uint64 RTC_ConstructUnixAlarmTime(const RTC_DATE_TIME* alarmTime, uint8 alarmCfgMask);
 550:Generated_Source\PSoC4/RTC.h **** uint64 RTC_GetDstUnixTime(const RTC_DST_TIME* dstTime);
 551:Generated_Source\PSoC4/RTC.h **** uint64 RTC_GetNexAlarmTime(uint64 curUnixTime, uint8 alarmCfgMask);
 552:Generated_Source\PSoC4/RTC.h **** 
 553:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetNextMinSec(uint32 curVal);
 554:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetNextHour(uint32 curVal);
 555:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetNextDay(uint32 curYear, uint32 curMonth, uint32 curDay, uint32 alarmCfgMask);
 556:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetNextMonth(uint32 curMonth);
 557:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetNextYear(uint32 curYear);
 558:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_GetDayOfWeek(uint32 day, uint32 month, uint32 year);
 559:Generated_Source\PSoC4/RTC.h **** static uint32 RTC_DaysBeforeMonth(uint32 month, uint32 year);
 560:Generated_Source\PSoC4/RTC.h **** 
 561:Generated_Source\PSoC4/RTC.h **** uint32 RTC_DaysInMonth(uint32 month, uint32 year);
 562:Generated_Source\PSoC4/RTC.h **** 
 563:Generated_Source\PSoC4/RTC.h **** /**
 564:Generated_Source\PSoC4/RTC.h **** * \addtogroup group_general
 565:Generated_Source\PSoC4/RTC.h **** * \{
 566:Generated_Source\PSoC4/RTC.h **** */
 567:Generated_Source\PSoC4/RTC.h **** void   RTC_UnixToDateTime(RTC_DATE_TIME* dateTime, uint64 unixTime, uint32 timeFormat);
 568:Generated_Source\PSoC4/RTC.h **** uint64 RTC_DateTimeToUnix(uint32 inputDate, uint32 inputTime);
 569:Generated_Source\PSoC4/RTC.h **** 
 570:Generated_Source\PSoC4/RTC.h **** #if defined(CYDEV_RTC_SOURCE_WDT)
 571:Generated_Source\PSoC4/RTC.h ****     #if((0u != CYDEV_WDT_GENERATE_ISR) && (0u == RTC_INITIAL_UPDATE_MODE))
 572:Generated_Source\PSoC4/RTC.h ****         static void RTC_CySysRtcSetCallback(uint32 wdtNumber);
 573:Generated_Source\PSoC4/RTC.h ****         static void RTC_CySysRtcResetCallback(uint32 wdtNumber);
 574:Generated_Source\PSoC4/RTC.h ****     #endif /* ((0u != CYDEV_WDT_GENERATE_ISR) && (0u == RTC_INITIAL_UPDATE_MODE)) */
 575:Generated_Source\PSoC4/RTC.h **** #endif /* (CYDEV_RTC_SOURCE_WDT) */
 576:Generated_Source\PSoC4/RTC.h **** 
 577:Generated_Source\PSoC4/RTC.h **** /** \} group_general */
 578:Generated_Source\PSoC4/RTC.h **** 
 579:Generated_Source\PSoC4/RTC.h **** uint32 RTC_RelativeToFixed(uint32 dayOfWeek, uint32 weekOfMonth, uint32 month, uint32 year);
 580:Generated_Source\PSoC4/RTC.h **** 
 581:Generated_Source\PSoC4/RTC.h **** 
 582:Generated_Source\PSoC4/RTC.h **** 
 583:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 584:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_IsBitSet
 585:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 586:Generated_Source\PSoC4/RTC.h **** *
 587:Generated_Source\PSoC4/RTC.h **** * Checks the state of a bit passed through parameter.
 588:Generated_Source\PSoC4/RTC.h **** *
 589:Generated_Source\PSoC4/RTC.h **** * \param var
 590:Generated_Source\PSoC4/RTC.h **** * The variable to be checked.
 591:Generated_Source\PSoC4/RTC.h **** *
 592:Generated_Source\PSoC4/RTC.h **** * \param mask
 593:Generated_Source\PSoC4/RTC.h **** * The mask for a bit to be checked.
 594:Generated_Source\PSoC4/RTC.h **** *
 595:Generated_Source\PSoC4/RTC.h **** * \return
 596:Generated_Source\PSoC4/RTC.h **** *  0u - Bit is not set. <br> 1u - Bit is set.
 597:Generated_Source\PSoC4/RTC.h **** *
 598:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 599:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_IsBitSet(uint32 var, uint32 mask)
 600:Generated_Source\PSoC4/RTC.h **** {
 601:Generated_Source\PSoC4/RTC.h ****     return ((mask == (var & mask)) ? 1Lu : 0Lu);
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 12


 602:Generated_Source\PSoC4/RTC.h **** }
 603:Generated_Source\PSoC4/RTC.h **** 
 604:Generated_Source\PSoC4/RTC.h **** 
 605:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 606:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_LeapYear
 607:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 608:Generated_Source\PSoC4/RTC.h **** *
 609:Generated_Source\PSoC4/RTC.h **** * Checks whether the year passed through the parameter is leap or no.
 610:Generated_Source\PSoC4/RTC.h **** *
 611:Generated_Source\PSoC4/RTC.h **** * \param year
 612:Generated_Source\PSoC4/RTC.h **** * The year to be checked.
 613:Generated_Source\PSoC4/RTC.h **** *
 614:Generated_Source\PSoC4/RTC.h **** * \return
 615:Generated_Source\PSoC4/RTC.h **** * 0u - The year is not leap <br> 1u - The year is leap.
 616:Generated_Source\PSoC4/RTC.h **** *
 617:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 618:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_LeapYear(uint32 year)
 619:Generated_Source\PSoC4/RTC.h **** {
 620:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 621:Generated_Source\PSoC4/RTC.h **** 
 622:Generated_Source\PSoC4/RTC.h ****     if(((0u == (year % 4Lu)) && (0u != (year % 100Lu))) || (0u == (year % 400Lu)))
 623:Generated_Source\PSoC4/RTC.h ****     {
 624:Generated_Source\PSoC4/RTC.h ****         retVal = 1uL;
 625:Generated_Source\PSoC4/RTC.h ****     }
 626:Generated_Source\PSoC4/RTC.h ****     else
 627:Generated_Source\PSoC4/RTC.h ****     {
 628:Generated_Source\PSoC4/RTC.h ****         retVal = 0uL;
 629:Generated_Source\PSoC4/RTC.h ****     }
 630:Generated_Source\PSoC4/RTC.h **** 
 631:Generated_Source\PSoC4/RTC.h ****     return(retVal);
 632:Generated_Source\PSoC4/RTC.h **** }
 633:Generated_Source\PSoC4/RTC.h **** 
 634:Generated_Source\PSoC4/RTC.h **** 
 635:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 636:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetSecond
 637:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 638:Generated_Source\PSoC4/RTC.h **** *
 639:Generated_Source\PSoC4/RTC.h **** * Returns the seconds value from the time value that is passed as a/the 
 640:Generated_Source\PSoC4/RTC.h **** * parameter.
 641:Generated_Source\PSoC4/RTC.h **** *
 642:Generated_Source\PSoC4/RTC.h **** * \param inputTime
 643:Generated_Source\PSoC4/RTC.h **** * The time value.
 644:Generated_Source\PSoC4/RTC.h **** *
 645:Generated_Source\PSoC4/RTC.h **** * \return
 646:Generated_Source\PSoC4/RTC.h **** * The seconds value.
 647:Generated_Source\PSoC4/RTC.h **** *
 648:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 649:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetSecond(uint32 inputTime)
 650:Generated_Source\PSoC4/RTC.h **** {
  27              		.loc 1 650 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 13


  35 0002 84B0     		sub	sp, sp, #16
  36              		.cfi_def_cfa_offset 24
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 651:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 652:Generated_Source\PSoC4/RTC.h **** 
 653:Generated_Source\PSoC4/RTC.h ****     retVal  = ((inputTime & RTC_10_SECONDS_MASK) >> RTC_10_SECONDS_OFFSET) * 10u;
  40              		.loc 1 653 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 1B09     		lsrs	r3, r3, #4
  43 000c 0722     		movs	r2, #7
  44 000e 1A40     		ands	r2, r3
  45 0010 1300     		movs	r3, r2
  46 0012 9B00     		lsls	r3, r3, #2
  47 0014 9B18     		adds	r3, r3, r2
  48 0016 5B00     		lsls	r3, r3, #1
  49 0018 FB60     		str	r3, [r7, #12]
 654:Generated_Source\PSoC4/RTC.h ****     retVal += (inputTime & RTC_SECONDS_MASK) >> RTC_SECONDS_OFFSET;
  50              		.loc 1 654 0
  51 001a 7B68     		ldr	r3, [r7, #4]
  52 001c 0F22     		movs	r2, #15
  53 001e 1340     		ands	r3, r2
  54 0020 FA68     		ldr	r2, [r7, #12]
  55 0022 D318     		adds	r3, r2, r3
  56 0024 FB60     		str	r3, [r7, #12]
 655:Generated_Source\PSoC4/RTC.h **** 
 656:Generated_Source\PSoC4/RTC.h ****     return (retVal);
  57              		.loc 1 656 0
  58 0026 FB68     		ldr	r3, [r7, #12]
 657:Generated_Source\PSoC4/RTC.h **** }
  59              		.loc 1 657 0
  60 0028 1800     		movs	r0, r3
  61 002a BD46     		mov	sp, r7
  62 002c 04B0     		add	sp, sp, #16
  63              		@ sp needed
  64 002e 80BD     		pop	{r7, pc}
  65              		.cfi_endproc
  66              	.LFE3:
  67              		.size	RTC_GetSecond, .-RTC_GetSecond
  68              		.section	.text.RTC_GetMinutes,"ax",%progbits
  69              		.align	2
  70              		.code	16
  71              		.thumb_func
  72              		.type	RTC_GetMinutes, %function
  73              	RTC_GetMinutes:
  74              	.LFB4:
 658:Generated_Source\PSoC4/RTC.h **** 
 659:Generated_Source\PSoC4/RTC.h **** 
 660:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 661:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetMinutes
 662:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 663:Generated_Source\PSoC4/RTC.h **** *
 664:Generated_Source\PSoC4/RTC.h **** * Returns the minutes value from the time value that is passed as a/the 
 665:Generated_Source\PSoC4/RTC.h **** * parameter.
 666:Generated_Source\PSoC4/RTC.h **** *
 667:Generated_Source\PSoC4/RTC.h **** * \param inputTime
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 14


 668:Generated_Source\PSoC4/RTC.h **** * The time value.
 669:Generated_Source\PSoC4/RTC.h **** *
 670:Generated_Source\PSoC4/RTC.h **** * \return
 671:Generated_Source\PSoC4/RTC.h **** * The minutes value.
 672:Generated_Source\PSoC4/RTC.h **** *
 673:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 674:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetMinutes(uint32 inputTime)
 675:Generated_Source\PSoC4/RTC.h **** {
  75              		.loc 1 675 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 16
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79 0000 80B5     		push	{r7, lr}
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 84B0     		sub	sp, sp, #16
  84              		.cfi_def_cfa_offset 24
  85 0004 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87 0006 7860     		str	r0, [r7, #4]
 676:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 677:Generated_Source\PSoC4/RTC.h **** 
 678:Generated_Source\PSoC4/RTC.h ****     retVal  = ((inputTime & RTC_10_MINUTES_MASK) >> RTC_10_MINUTES_OFFSET) * 10u;
  88              		.loc 1 678 0
  89 0008 7B68     		ldr	r3, [r7, #4]
  90 000a 1B0B     		lsrs	r3, r3, #12
  91 000c 0722     		movs	r2, #7
  92 000e 1A40     		ands	r2, r3
  93 0010 1300     		movs	r3, r2
  94 0012 9B00     		lsls	r3, r3, #2
  95 0014 9B18     		adds	r3, r3, r2
  96 0016 5B00     		lsls	r3, r3, #1
  97 0018 FB60     		str	r3, [r7, #12]
 679:Generated_Source\PSoC4/RTC.h ****     retVal += (inputTime & RTC_MINUTES_MASK) >> RTC_MINUTES_OFFSET;
  98              		.loc 1 679 0
  99 001a 7B68     		ldr	r3, [r7, #4]
 100 001c 1B0A     		lsrs	r3, r3, #8
 101 001e 0F22     		movs	r2, #15
 102 0020 1340     		ands	r3, r2
 103 0022 FA68     		ldr	r2, [r7, #12]
 104 0024 D318     		adds	r3, r2, r3
 105 0026 FB60     		str	r3, [r7, #12]
 680:Generated_Source\PSoC4/RTC.h **** 
 681:Generated_Source\PSoC4/RTC.h ****     return (retVal);
 106              		.loc 1 681 0
 107 0028 FB68     		ldr	r3, [r7, #12]
 682:Generated_Source\PSoC4/RTC.h **** }
 108              		.loc 1 682 0
 109 002a 1800     		movs	r0, r3
 110 002c BD46     		mov	sp, r7
 111 002e 04B0     		add	sp, sp, #16
 112              		@ sp needed
 113 0030 80BD     		pop	{r7, pc}
 114              		.cfi_endproc
 115              	.LFE4:
 116              		.size	RTC_GetMinutes, .-RTC_GetMinutes
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 15


 117 0032 C046     		.section	.text.RTC_GetHours,"ax",%progbits
 118              		.align	2
 119              		.code	16
 120              		.thumb_func
 121              		.type	RTC_GetHours, %function
 122              	RTC_GetHours:
 123              	.LFB5:
 683:Generated_Source\PSoC4/RTC.h **** 
 684:Generated_Source\PSoC4/RTC.h **** 
 685:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 686:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetHours
 687:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 688:Generated_Source\PSoC4/RTC.h **** *
 689:Generated_Source\PSoC4/RTC.h **** * Returns the hours value from the time value that is passed as a/the parameter.
 690:Generated_Source\PSoC4/RTC.h **** *
 691:Generated_Source\PSoC4/RTC.h **** * \param inputTime
 692:Generated_Source\PSoC4/RTC.h **** * The time value.
 693:Generated_Source\PSoC4/RTC.h **** *
 694:Generated_Source\PSoC4/RTC.h **** * \return
 695:Generated_Source\PSoC4/RTC.h **** * The hours value.
 696:Generated_Source\PSoC4/RTC.h **** *
 697:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 698:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetHours(uint32 inputTime)
 699:Generated_Source\PSoC4/RTC.h **** {
 124              		.loc 1 699 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 16
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 84B0     		sub	sp, sp, #16
 133              		.cfi_def_cfa_offset 24
 134 0004 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 700:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 701:Generated_Source\PSoC4/RTC.h **** 
 702:Generated_Source\PSoC4/RTC.h ****     retVal  = ((inputTime & RTC_10_HOURS_MASK) >> RTC_10_HOURS_OFFSET) * 10u;
 137              		.loc 1 702 0
 138 0008 7B68     		ldr	r3, [r7, #4]
 139 000a 1B0D     		lsrs	r3, r3, #20
 140 000c 0322     		movs	r2, #3
 141 000e 1A40     		ands	r2, r3
 142 0010 1300     		movs	r3, r2
 143 0012 9B00     		lsls	r3, r3, #2
 144 0014 9B18     		adds	r3, r3, r2
 145 0016 5B00     		lsls	r3, r3, #1
 146 0018 FB60     		str	r3, [r7, #12]
 703:Generated_Source\PSoC4/RTC.h ****     retVal += (inputTime & RTC_HOURS_MASK) >> RTC_HOURS_OFFSET;
 147              		.loc 1 703 0
 148 001a 7B68     		ldr	r3, [r7, #4]
 149 001c 1B0C     		lsrs	r3, r3, #16
 150 001e 0F22     		movs	r2, #15
 151 0020 1340     		ands	r3, r2
 152 0022 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 16


 153 0024 D318     		adds	r3, r2, r3
 154 0026 FB60     		str	r3, [r7, #12]
 704:Generated_Source\PSoC4/RTC.h **** 
 705:Generated_Source\PSoC4/RTC.h ****     return (retVal);
 155              		.loc 1 705 0
 156 0028 FB68     		ldr	r3, [r7, #12]
 706:Generated_Source\PSoC4/RTC.h **** }
 157              		.loc 1 706 0
 158 002a 1800     		movs	r0, r3
 159 002c BD46     		mov	sp, r7
 160 002e 04B0     		add	sp, sp, #16
 161              		@ sp needed
 162 0030 80BD     		pop	{r7, pc}
 163              		.cfi_endproc
 164              	.LFE5:
 165              		.size	RTC_GetHours, .-RTC_GetHours
 166 0032 C046     		.section	.text.RTC_GetDay,"ax",%progbits
 167              		.align	2
 168              		.code	16
 169              		.thumb_func
 170              		.type	RTC_GetDay, %function
 171              	RTC_GetDay:
 172              	.LFB7:
 707:Generated_Source\PSoC4/RTC.h **** 
 708:Generated_Source\PSoC4/RTC.h **** 
 709:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 710:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetAmPm
 711:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 712:Generated_Source\PSoC4/RTC.h **** *
 713:Generated_Source\PSoC4/RTC.h **** * Returns the AM/PM status from the time value that is passed as parameter.
 714:Generated_Source\PSoC4/RTC.h **** *
 715:Generated_Source\PSoC4/RTC.h **** * \param inputTime
 716:Generated_Source\PSoC4/RTC.h **** * The time value.
 717:Generated_Source\PSoC4/RTC.h **** *
 718:Generated_Source\PSoC4/RTC.h **** * \return
 719:Generated_Source\PSoC4/RTC.h **** * The am/pm period of day, see \ref group_rtc_am_pm.
 720:Generated_Source\PSoC4/RTC.h **** *
 721:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 722:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetAmPm(uint32 inputTime)
 723:Generated_Source\PSoC4/RTC.h **** {
 724:Generated_Source\PSoC4/RTC.h ****     return (RTC_IsBitSet(inputTime, RTC_PERIOD_OF_DAY_MASK));
 725:Generated_Source\PSoC4/RTC.h **** }
 726:Generated_Source\PSoC4/RTC.h **** 
 727:Generated_Source\PSoC4/RTC.h **** 
 728:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 729:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetDay
 730:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 731:Generated_Source\PSoC4/RTC.h **** *
 732:Generated_Source\PSoC4/RTC.h **** * Returns the day value from the date value that is passed as parameter.
 733:Generated_Source\PSoC4/RTC.h **** *
 734:Generated_Source\PSoC4/RTC.h **** * \param date
 735:Generated_Source\PSoC4/RTC.h **** * The date value.
 736:Generated_Source\PSoC4/RTC.h **** *
 737:Generated_Source\PSoC4/RTC.h **** * \return
 738:Generated_Source\PSoC4/RTC.h **** * The day value.
 739:Generated_Source\PSoC4/RTC.h **** *
 740:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 17


 741:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetDay(uint32 date)
 742:Generated_Source\PSoC4/RTC.h **** {
 173              		.loc 1 742 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 16
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 84B0     		sub	sp, sp, #16
 182              		.cfi_def_cfa_offset 24
 183 0004 00AF     		add	r7, sp, #0
 184              		.cfi_def_cfa_register 7
 185 0006 7860     		str	r0, [r7, #4]
 743:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 744:Generated_Source\PSoC4/RTC.h **** 
 745:Generated_Source\PSoC4/RTC.h ****     retVal  = ((date & RTC_10_DAY_MASK) >> RTC_10_DAY_OFFSET) * 10u;
 186              		.loc 1 745 0
 187 0008 7B68     		ldr	r3, [r7, #4]
 188 000a 1B0F     		lsrs	r3, r3, #28
 189 000c 0322     		movs	r2, #3
 190 000e 1A40     		ands	r2, r3
 191 0010 1300     		movs	r3, r2
 192 0012 9B00     		lsls	r3, r3, #2
 193 0014 9B18     		adds	r3, r3, r2
 194 0016 5B00     		lsls	r3, r3, #1
 195 0018 FB60     		str	r3, [r7, #12]
 746:Generated_Source\PSoC4/RTC.h ****     retVal += (date & RTC_DAY_MASK) >> RTC_DAY_OFFSET;
 196              		.loc 1 746 0
 197 001a 7B68     		ldr	r3, [r7, #4]
 198 001c 1B0E     		lsrs	r3, r3, #24
 199 001e 0F22     		movs	r2, #15
 200 0020 1340     		ands	r3, r2
 201 0022 FA68     		ldr	r2, [r7, #12]
 202 0024 D318     		adds	r3, r2, r3
 203 0026 FB60     		str	r3, [r7, #12]
 747:Generated_Source\PSoC4/RTC.h **** 
 748:Generated_Source\PSoC4/RTC.h ****     return (retVal);
 204              		.loc 1 748 0
 205 0028 FB68     		ldr	r3, [r7, #12]
 749:Generated_Source\PSoC4/RTC.h **** }
 206              		.loc 1 749 0
 207 002a 1800     		movs	r0, r3
 208 002c BD46     		mov	sp, r7
 209 002e 04B0     		add	sp, sp, #16
 210              		@ sp needed
 211 0030 80BD     		pop	{r7, pc}
 212              		.cfi_endproc
 213              	.LFE7:
 214              		.size	RTC_GetDay, .-RTC_GetDay
 215 0032 C046     		.section	.text.RTC_GetMonth,"ax",%progbits
 216              		.align	2
 217              		.code	16
 218              		.thumb_func
 219              		.type	RTC_GetMonth, %function
 220              	RTC_GetMonth:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 18


 221              	.LFB8:
 750:Generated_Source\PSoC4/RTC.h **** 
 751:Generated_Source\PSoC4/RTC.h **** 
 752:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 753:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetMonth
 754:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 755:Generated_Source\PSoC4/RTC.h **** *
 756:Generated_Source\PSoC4/RTC.h **** * Returns the month value from the date value that is passed as parameter.
 757:Generated_Source\PSoC4/RTC.h **** *
 758:Generated_Source\PSoC4/RTC.h **** * \param date
 759:Generated_Source\PSoC4/RTC.h **** * The date value.
 760:Generated_Source\PSoC4/RTC.h **** *
 761:Generated_Source\PSoC4/RTC.h **** * \return
 762:Generated_Source\PSoC4/RTC.h **** * The month value.
 763:Generated_Source\PSoC4/RTC.h **** *
 764:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 765:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetMonth(uint32 date)
 766:Generated_Source\PSoC4/RTC.h **** {
 222              		.loc 1 766 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 16
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 84B0     		sub	sp, sp, #16
 231              		.cfi_def_cfa_offset 24
 232 0004 00AF     		add	r7, sp, #0
 233              		.cfi_def_cfa_register 7
 234 0006 7860     		str	r0, [r7, #4]
 767:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 768:Generated_Source\PSoC4/RTC.h **** 
 769:Generated_Source\PSoC4/RTC.h ****     retVal  = ((date & RTC_10_MONTH_MASK) >> RTC_10_MONTH_OFFSET) * 10u;
 235              		.loc 1 769 0
 236 0008 7B68     		ldr	r3, [r7, #4]
 237 000a 1B0D     		lsrs	r3, r3, #20
 238 000c 0122     		movs	r2, #1
 239 000e 1A40     		ands	r2, r3
 240 0010 1300     		movs	r3, r2
 241 0012 9B00     		lsls	r3, r3, #2
 242 0014 9B18     		adds	r3, r3, r2
 243 0016 5B00     		lsls	r3, r3, #1
 244 0018 FB60     		str	r3, [r7, #12]
 770:Generated_Source\PSoC4/RTC.h ****     retVal += (date & RTC_MONTH_MASK) >> RTC_MONTH_OFFSET;
 245              		.loc 1 770 0
 246 001a 7B68     		ldr	r3, [r7, #4]
 247 001c 1B0C     		lsrs	r3, r3, #16
 248 001e 0F22     		movs	r2, #15
 249 0020 1340     		ands	r3, r2
 250 0022 FA68     		ldr	r2, [r7, #12]
 251 0024 D318     		adds	r3, r2, r3
 252 0026 FB60     		str	r3, [r7, #12]
 771:Generated_Source\PSoC4/RTC.h **** 
 772:Generated_Source\PSoC4/RTC.h ****     return (retVal);
 253              		.loc 1 772 0
 254 0028 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 19


 773:Generated_Source\PSoC4/RTC.h **** }
 255              		.loc 1 773 0
 256 002a 1800     		movs	r0, r3
 257 002c BD46     		mov	sp, r7
 258 002e 04B0     		add	sp, sp, #16
 259              		@ sp needed
 260 0030 80BD     		pop	{r7, pc}
 261              		.cfi_endproc
 262              	.LFE8:
 263              		.size	RTC_GetMonth, .-RTC_GetMonth
 264 0032 C046     		.section	.text.RTC_GetYear,"ax",%progbits
 265              		.align	2
 266              		.code	16
 267              		.thumb_func
 268              		.type	RTC_GetYear, %function
 269              	RTC_GetYear:
 270              	.LFB9:
 774:Generated_Source\PSoC4/RTC.h **** 
 775:Generated_Source\PSoC4/RTC.h **** 
 776:Generated_Source\PSoC4/RTC.h **** /*******************************************************************************
 777:Generated_Source\PSoC4/RTC.h **** * Function Name: RTC_GetYear
 778:Generated_Source\PSoC4/RTC.h **** ****************************************************************************//**
 779:Generated_Source\PSoC4/RTC.h **** *
 780:Generated_Source\PSoC4/RTC.h **** * Returns the year value from the date value that is passed as parameter.
 781:Generated_Source\PSoC4/RTC.h **** *
 782:Generated_Source\PSoC4/RTC.h **** * \param date
 783:Generated_Source\PSoC4/RTC.h **** * The date value.
 784:Generated_Source\PSoC4/RTC.h **** *
 785:Generated_Source\PSoC4/RTC.h **** * \return
 786:Generated_Source\PSoC4/RTC.h **** * The year value.
 787:Generated_Source\PSoC4/RTC.h **** *
 788:Generated_Source\PSoC4/RTC.h **** *******************************************************************************/
 789:Generated_Source\PSoC4/RTC.h **** static CY_INLINE uint32 RTC_GetYear(uint32 date)
 790:Generated_Source\PSoC4/RTC.h **** {
 271              		.loc 1 790 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 16
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 84B0     		sub	sp, sp, #16
 280              		.cfi_def_cfa_offset 24
 281 0004 00AF     		add	r7, sp, #0
 282              		.cfi_def_cfa_register 7
 283 0006 7860     		str	r0, [r7, #4]
 791:Generated_Source\PSoC4/RTC.h ****     uint32 retVal;
 792:Generated_Source\PSoC4/RTC.h **** 
 793:Generated_Source\PSoC4/RTC.h ****     retVal  = ((date & RTC_1000_YEAR_MASK) >> RTC_1000_YEAR_OFFSET) * 1000u;
 284              		.loc 1 793 0
 285 0008 7B68     		ldr	r3, [r7, #4]
 286 000a 1B0B     		lsrs	r3, r3, #12
 287 000c 0322     		movs	r2, #3
 288 000e 1340     		ands	r3, r2
 289 0010 FA22     		movs	r2, #250
 290 0012 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 20


 291 0014 5343     		muls	r3, r2
 292 0016 FB60     		str	r3, [r7, #12]
 794:Generated_Source\PSoC4/RTC.h ****     retVal += ((date & RTC_100_YEAR_MASK) >> RTC_100_YEAR_OFFSET) * 100u;
 293              		.loc 1 794 0
 294 0018 7B68     		ldr	r3, [r7, #4]
 295 001a 1B0A     		lsrs	r3, r3, #8
 296 001c 0F22     		movs	r2, #15
 297 001e 1340     		ands	r3, r2
 298 0020 6422     		movs	r2, #100
 299 0022 5343     		muls	r3, r2
 300 0024 FA68     		ldr	r2, [r7, #12]
 301 0026 D318     		adds	r3, r2, r3
 302 0028 FB60     		str	r3, [r7, #12]
 795:Generated_Source\PSoC4/RTC.h ****     retVal += ((date & RTC_10_YEAR_MASK) >> RTC_10_YEAR_OFFSET) * 10u;
 303              		.loc 1 795 0
 304 002a 7B68     		ldr	r3, [r7, #4]
 305 002c 1B09     		lsrs	r3, r3, #4
 306 002e 0F22     		movs	r2, #15
 307 0030 1A40     		ands	r2, r3
 308 0032 1300     		movs	r3, r2
 309 0034 9B00     		lsls	r3, r3, #2
 310 0036 9B18     		adds	r3, r3, r2
 311 0038 5B00     		lsls	r3, r3, #1
 312 003a 1A00     		movs	r2, r3
 313 003c FB68     		ldr	r3, [r7, #12]
 314 003e 9B18     		adds	r3, r3, r2
 315 0040 FB60     		str	r3, [r7, #12]
 796:Generated_Source\PSoC4/RTC.h ****     retVal += (date & RTC_YEAR_MASK) >> RTC_YEAR_OFFSET;
 316              		.loc 1 796 0
 317 0042 7B68     		ldr	r3, [r7, #4]
 318 0044 0F22     		movs	r2, #15
 319 0046 1340     		ands	r3, r2
 320 0048 FA68     		ldr	r2, [r7, #12]
 321 004a D318     		adds	r3, r2, r3
 322 004c FB60     		str	r3, [r7, #12]
 797:Generated_Source\PSoC4/RTC.h **** 
 798:Generated_Source\PSoC4/RTC.h ****     return (retVal);
 323              		.loc 1 798 0
 324 004e FB68     		ldr	r3, [r7, #12]
 799:Generated_Source\PSoC4/RTC.h **** }
 325              		.loc 1 799 0
 326 0050 1800     		movs	r0, r3
 327 0052 BD46     		mov	sp, r7
 328 0054 04B0     		add	sp, sp, #16
 329              		@ sp needed
 330 0056 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE9:
 333              		.size	RTC_GetYear, .-RTC_GetYear
 334              		.global	digits
 335              		.data
 336              		.align	2
 337              		.type	digits, %object
 338              		.size	digits, 160
 339              	digits:
 340 0000 00000000 		.word	0
 341 0004 00000000 		.word	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 21


 342 0008 00000000 		.word	0
 343 000c 00000000 		.word	0
 344 0010 00000000 		.word	0
 345 0014 00000000 		.word	0
 346 0018 00000000 		.word	0
 347 001c 01000000 		.word	1
 348 0020 00000000 		.word	0
 349 0024 00000000 		.word	0
 350 0028 01000000 		.word	1
 351 002c 00000000 		.word	0
 352 0030 00000000 		.word	0
 353 0034 00000000 		.word	0
 354 0038 01000000 		.word	1
 355 003c 01000000 		.word	1
 356 0040 00000000 		.word	0
 357 0044 01000000 		.word	1
 358 0048 00000000 		.word	0
 359 004c 00000000 		.word	0
 360 0050 00000000 		.word	0
 361 0054 01000000 		.word	1
 362 0058 00000000 		.word	0
 363 005c 01000000 		.word	1
 364 0060 00000000 		.word	0
 365 0064 01000000 		.word	1
 366 0068 01000000 		.word	1
 367 006c 00000000 		.word	0
 368 0070 00000000 		.word	0
 369 0074 01000000 		.word	1
 370 0078 01000000 		.word	1
 371 007c 01000000 		.word	1
 372 0080 01000000 		.word	1
 373 0084 00000000 		.word	0
 374 0088 00000000 		.word	0
 375 008c 00000000 		.word	0
 376 0090 01000000 		.word	1
 377 0094 00000000 		.word	0
 378 0098 00000000 		.word	0
 379 009c 01000000 		.word	1
 380              		.comm	time,4,4
 381              		.comm	hours,4,4
 382              		.comm	minutes,4,4
 383              		.comm	seconds,4,4
 384              		.comm	date,4,4
 385              		.comm	year,4,4
 386              		.comm	month,4,4
 387              		.comm	day,4,4
 388              		.global	display_mode
 389              		.bss
 390              		.align	2
 391              		.type	display_mode, %object
 392              		.size	display_mode, 4
 393              	display_mode:
 394 0000 00000000 		.space	4
 395              		.global	done
 396              		.align	2
 397              		.type	done, %object
 398              		.size	done, 4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 22


 399              	done:
 400 0004 00000000 		.space	4
 401              		.global	start
 402              		.align	2
 403              		.type	start, %object
 404              		.size	start, 4
 405              	start:
 406 0008 00000000 		.space	4
 407              		.global	end
 408              		.align	2
 409              		.type	end, %object
 410              		.size	end, 4
 411              	end:
 412 000c 00000000 		.space	4
 413              		.global	hours_locked
 414              		.align	2
 415              		.type	hours_locked, %object
 416              		.size	hours_locked, 4
 417              	hours_locked:
 418 0010 00000000 		.space	4
 419              		.global	minutes_locked
 420              		.align	2
 421              		.type	minutes_locked, %object
 422              		.size	minutes_locked, 4
 423              	minutes_locked:
 424 0014 00000000 		.space	4
 425              		.section	.text.nixie_write,"ax",%progbits
 426              		.align	2
 427              		.global	nixie_write
 428              		.code	16
 429              		.thumb_func
 430              		.type	nixie_write, %function
 431              	nixie_write:
 432              	.LFB63:
 433              		.file 2 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** *   Included Headers
   3:main.c        **** *******************************************************************************/
   4:main.c        **** #include <project.h>
   5:main.c        ****     
   6:main.c        **** int digits[10][4] = {
   7:main.c        ****     {0,0,0,0},
   8:main.c        ****     {0,0,0,1},
   9:main.c        ****     {0,0,1,0},
  10:main.c        ****     {0,0,1,1},
  11:main.c        ****     {0,1,0,0},
  12:main.c        ****     {0,1,0,1},
  13:main.c        ****     {0,1,1,0},
  14:main.c        ****     {0,1,1,1},
  15:main.c        ****     {1,0,0,0},
  16:main.c        ****     {1,0,0,1}
  17:main.c        **** };
  18:main.c        **** 
  19:main.c        **** uint32 time, hours, minutes, seconds;
  20:main.c        **** uint32 date, year, month, day;
  21:main.c        **** 
  22:main.c        **** int display_mode = 0; // 0 = display time, 1 = display date
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 23


  23:main.c        **** int done = 0;
  24:main.c        **** int start = 0, end = 0;
  25:main.c        **** int hours_locked = 0, minutes_locked = 0; // 1 means locked, 0 means not locked
  26:main.c        **** 
  27:main.c        **** 
  28:main.c        **** void nixie_write();
  29:main.c        **** void wdt_callback(void);
  30:main.c        **** void cathode_antidote();
  31:main.c        **** void set_time();
  32:main.c        **** void set_hours();
  33:main.c        **** void set_minutess();
  34:main.c        **** void set_seconds();
  35:main.c        **** void set_date();
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** void nixie_write(int tube, int i){
 434              		.loc 2 38 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 8
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438 0000 80B5     		push	{r7, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 82B0     		sub	sp, sp, #8
 443              		.cfi_def_cfa_offset 16
 444 0004 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 446 0006 7860     		str	r0, [r7, #4]
 447 0008 3960     		str	r1, [r7]
  39:main.c        ****     switch(tube){
 448              		.loc 2 39 0
 449 000a 7B68     		ldr	r3, [r7, #4]
 450 000c 052B     		cmp	r3, #5
 451 000e 00D9     		bls	.LCB286
 452 0010 EFE0     		b	.L22	@long jump
 453              	.LCB286:
 454 0012 7B68     		ldr	r3, [r7, #4]
 455 0014 9A00     		lsls	r2, r3, #2
 456 0016 794B     		ldr	r3, .L23
 457 0018 D318     		adds	r3, r2, r3
 458 001a 1B68     		ldr	r3, [r3]
 459 001c 9F46     		mov	pc, r3
 460              		.section	.rodata
 461              		.align	2
 462              	.L16:
 463 0000 1E000000 		.word	.L15
 464 0004 6C000000 		.word	.L17
 465 0008 BA000000 		.word	.L18
 466 000c 08010000 		.word	.L19
 467 0010 56010000 		.word	.L20
 468 0014 A4010000 		.word	.L21
 469              		.section	.text.nixie_write
 470              	.L15:
  40:main.c        ****         case 0:
  41:main.c        ****             A_Write(digits[i][3]);
 471              		.loc 2 41 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 24


 472 001e 784A     		ldr	r2, .L23+4
 473 0020 3B68     		ldr	r3, [r7]
 474 0022 1B01     		lsls	r3, r3, #4
 475 0024 D318     		adds	r3, r2, r3
 476 0026 0C33     		adds	r3, r3, #12
 477 0028 1B68     		ldr	r3, [r3]
 478 002a DBB2     		uxtb	r3, r3
 479 002c 1800     		movs	r0, r3
 480 002e FFF7FEFF 		bl	A_Write
  42:main.c        ****             B_Write(digits[i][2]);
 481              		.loc 2 42 0
 482 0032 734A     		ldr	r2, .L23+4
 483 0034 3B68     		ldr	r3, [r7]
 484 0036 1B01     		lsls	r3, r3, #4
 485 0038 D318     		adds	r3, r2, r3
 486 003a 0833     		adds	r3, r3, #8
 487 003c 1B68     		ldr	r3, [r3]
 488 003e DBB2     		uxtb	r3, r3
 489 0040 1800     		movs	r0, r3
 490 0042 FFF7FEFF 		bl	B_Write
  43:main.c        ****             C_Write(digits[i][1]);
 491              		.loc 2 43 0
 492 0046 6E4A     		ldr	r2, .L23+4
 493 0048 3B68     		ldr	r3, [r7]
 494 004a 1B01     		lsls	r3, r3, #4
 495 004c D318     		adds	r3, r2, r3
 496 004e 0433     		adds	r3, r3, #4
 497 0050 1B68     		ldr	r3, [r3]
 498 0052 DBB2     		uxtb	r3, r3
 499 0054 1800     		movs	r0, r3
 500 0056 FFF7FEFF 		bl	C_Write
  44:main.c        ****             D_Write(digits[i][0]);
 501              		.loc 2 44 0
 502 005a 694B     		ldr	r3, .L23+4
 503 005c 3A68     		ldr	r2, [r7]
 504 005e 1201     		lsls	r2, r2, #4
 505 0060 D358     		ldr	r3, [r2, r3]
 506 0062 DBB2     		uxtb	r3, r3
 507 0064 1800     		movs	r0, r3
 508 0066 FFF7FEFF 		bl	D_Write
  45:main.c        ****             break;
 509              		.loc 2 45 0
 510 006a C2E0     		b	.L14
 511              	.L17:
  46:main.c        ****         
  47:main.c        ****         case 1:
  48:main.c        ****             E_Write(digits[i][3]);
 512              		.loc 2 48 0
 513 006c 644A     		ldr	r2, .L23+4
 514 006e 3B68     		ldr	r3, [r7]
 515 0070 1B01     		lsls	r3, r3, #4
 516 0072 D318     		adds	r3, r2, r3
 517 0074 0C33     		adds	r3, r3, #12
 518 0076 1B68     		ldr	r3, [r3]
 519 0078 DBB2     		uxtb	r3, r3
 520 007a 1800     		movs	r0, r3
 521 007c FFF7FEFF 		bl	E_Write
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 25


  49:main.c        ****             F_Write(digits[i][2]);
 522              		.loc 2 49 0
 523 0080 5F4A     		ldr	r2, .L23+4
 524 0082 3B68     		ldr	r3, [r7]
 525 0084 1B01     		lsls	r3, r3, #4
 526 0086 D318     		adds	r3, r2, r3
 527 0088 0833     		adds	r3, r3, #8
 528 008a 1B68     		ldr	r3, [r3]
 529 008c DBB2     		uxtb	r3, r3
 530 008e 1800     		movs	r0, r3
 531 0090 FFF7FEFF 		bl	F_Write
  50:main.c        ****             G_Write(digits[i][1]);
 532              		.loc 2 50 0
 533 0094 5A4A     		ldr	r2, .L23+4
 534 0096 3B68     		ldr	r3, [r7]
 535 0098 1B01     		lsls	r3, r3, #4
 536 009a D318     		adds	r3, r2, r3
 537 009c 0433     		adds	r3, r3, #4
 538 009e 1B68     		ldr	r3, [r3]
 539 00a0 DBB2     		uxtb	r3, r3
 540 00a2 1800     		movs	r0, r3
 541 00a4 FFF7FEFF 		bl	G_Write
  51:main.c        ****             H_Write(digits[i][0]);
 542              		.loc 2 51 0
 543 00a8 554B     		ldr	r3, .L23+4
 544 00aa 3A68     		ldr	r2, [r7]
 545 00ac 1201     		lsls	r2, r2, #4
 546 00ae D358     		ldr	r3, [r2, r3]
 547 00b0 DBB2     		uxtb	r3, r3
 548 00b2 1800     		movs	r0, r3
 549 00b4 FFF7FEFF 		bl	H_Write
  52:main.c        ****             break;
 550              		.loc 2 52 0
 551 00b8 9BE0     		b	.L14
 552              	.L18:
  53:main.c        **** 
  54:main.c        ****         case 2:
  55:main.c        ****             I_Write(digits[i][3]);
 553              		.loc 2 55 0
 554 00ba 514A     		ldr	r2, .L23+4
 555 00bc 3B68     		ldr	r3, [r7]
 556 00be 1B01     		lsls	r3, r3, #4
 557 00c0 D318     		adds	r3, r2, r3
 558 00c2 0C33     		adds	r3, r3, #12
 559 00c4 1B68     		ldr	r3, [r3]
 560 00c6 DBB2     		uxtb	r3, r3
 561 00c8 1800     		movs	r0, r3
 562 00ca FFF7FEFF 		bl	I_Write
  56:main.c        ****             J_Write(digits[i][2]);
 563              		.loc 2 56 0
 564 00ce 4C4A     		ldr	r2, .L23+4
 565 00d0 3B68     		ldr	r3, [r7]
 566 00d2 1B01     		lsls	r3, r3, #4
 567 00d4 D318     		adds	r3, r2, r3
 568 00d6 0833     		adds	r3, r3, #8
 569 00d8 1B68     		ldr	r3, [r3]
 570 00da DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 26


 571 00dc 1800     		movs	r0, r3
 572 00de FFF7FEFF 		bl	J_Write
  57:main.c        ****             K_Write(digits[i][1]);
 573              		.loc 2 57 0
 574 00e2 474A     		ldr	r2, .L23+4
 575 00e4 3B68     		ldr	r3, [r7]
 576 00e6 1B01     		lsls	r3, r3, #4
 577 00e8 D318     		adds	r3, r2, r3
 578 00ea 0433     		adds	r3, r3, #4
 579 00ec 1B68     		ldr	r3, [r3]
 580 00ee DBB2     		uxtb	r3, r3
 581 00f0 1800     		movs	r0, r3
 582 00f2 FFF7FEFF 		bl	K_Write
  58:main.c        ****             L_Write(digits[i][0]);
 583              		.loc 2 58 0
 584 00f6 424B     		ldr	r3, .L23+4
 585 00f8 3A68     		ldr	r2, [r7]
 586 00fa 1201     		lsls	r2, r2, #4
 587 00fc D358     		ldr	r3, [r2, r3]
 588 00fe DBB2     		uxtb	r3, r3
 589 0100 1800     		movs	r0, r3
 590 0102 FFF7FEFF 		bl	L_Write
  59:main.c        ****             break;
 591              		.loc 2 59 0
 592 0106 74E0     		b	.L14
 593              	.L19:
  60:main.c        ****         
  61:main.c        ****         case 3:
  62:main.c        ****             M_Write(digits[i][3]);
 594              		.loc 2 62 0
 595 0108 3D4A     		ldr	r2, .L23+4
 596 010a 3B68     		ldr	r3, [r7]
 597 010c 1B01     		lsls	r3, r3, #4
 598 010e D318     		adds	r3, r2, r3
 599 0110 0C33     		adds	r3, r3, #12
 600 0112 1B68     		ldr	r3, [r3]
 601 0114 DBB2     		uxtb	r3, r3
 602 0116 1800     		movs	r0, r3
 603 0118 FFF7FEFF 		bl	M_Write
  63:main.c        ****             N_Write(digits[i][2]);
 604              		.loc 2 63 0
 605 011c 384A     		ldr	r2, .L23+4
 606 011e 3B68     		ldr	r3, [r7]
 607 0120 1B01     		lsls	r3, r3, #4
 608 0122 D318     		adds	r3, r2, r3
 609 0124 0833     		adds	r3, r3, #8
 610 0126 1B68     		ldr	r3, [r3]
 611 0128 DBB2     		uxtb	r3, r3
 612 012a 1800     		movs	r0, r3
 613 012c FFF7FEFF 		bl	N_Write
  64:main.c        ****             O_Write(digits[i][1]);
 614              		.loc 2 64 0
 615 0130 334A     		ldr	r2, .L23+4
 616 0132 3B68     		ldr	r3, [r7]
 617 0134 1B01     		lsls	r3, r3, #4
 618 0136 D318     		adds	r3, r2, r3
 619 0138 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 27


 620 013a 1B68     		ldr	r3, [r3]
 621 013c DBB2     		uxtb	r3, r3
 622 013e 1800     		movs	r0, r3
 623 0140 FFF7FEFF 		bl	O_Write
  65:main.c        ****             P_Write(digits[i][0]);
 624              		.loc 2 65 0
 625 0144 2E4B     		ldr	r3, .L23+4
 626 0146 3A68     		ldr	r2, [r7]
 627 0148 1201     		lsls	r2, r2, #4
 628 014a D358     		ldr	r3, [r2, r3]
 629 014c DBB2     		uxtb	r3, r3
 630 014e 1800     		movs	r0, r3
 631 0150 FFF7FEFF 		bl	P_Write
  66:main.c        ****             break;
 632              		.loc 2 66 0
 633 0154 4DE0     		b	.L14
 634              	.L20:
  67:main.c        ****         
  68:main.c        ****         case 4:
  69:main.c        ****             Q_Write(digits[i][3]);
 635              		.loc 2 69 0
 636 0156 2A4A     		ldr	r2, .L23+4
 637 0158 3B68     		ldr	r3, [r7]
 638 015a 1B01     		lsls	r3, r3, #4
 639 015c D318     		adds	r3, r2, r3
 640 015e 0C33     		adds	r3, r3, #12
 641 0160 1B68     		ldr	r3, [r3]
 642 0162 DBB2     		uxtb	r3, r3
 643 0164 1800     		movs	r0, r3
 644 0166 FFF7FEFF 		bl	Q_Write
  70:main.c        ****             R_Write(digits[i][2]);
 645              		.loc 2 70 0
 646 016a 254A     		ldr	r2, .L23+4
 647 016c 3B68     		ldr	r3, [r7]
 648 016e 1B01     		lsls	r3, r3, #4
 649 0170 D318     		adds	r3, r2, r3
 650 0172 0833     		adds	r3, r3, #8
 651 0174 1B68     		ldr	r3, [r3]
 652 0176 DBB2     		uxtb	r3, r3
 653 0178 1800     		movs	r0, r3
 654 017a FFF7FEFF 		bl	R_Write
  71:main.c        ****             S_Write(digits[i][1]);
 655              		.loc 2 71 0
 656 017e 204A     		ldr	r2, .L23+4
 657 0180 3B68     		ldr	r3, [r7]
 658 0182 1B01     		lsls	r3, r3, #4
 659 0184 D318     		adds	r3, r2, r3
 660 0186 0433     		adds	r3, r3, #4
 661 0188 1B68     		ldr	r3, [r3]
 662 018a DBB2     		uxtb	r3, r3
 663 018c 1800     		movs	r0, r3
 664 018e FFF7FEFF 		bl	S_Write
  72:main.c        ****             T_Write(digits[i][0]);
 665              		.loc 2 72 0
 666 0192 1B4B     		ldr	r3, .L23+4
 667 0194 3A68     		ldr	r2, [r7]
 668 0196 1201     		lsls	r2, r2, #4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 28


 669 0198 D358     		ldr	r3, [r2, r3]
 670 019a DBB2     		uxtb	r3, r3
 671 019c 1800     		movs	r0, r3
 672 019e FFF7FEFF 		bl	T_Write
  73:main.c        ****             break;
 673              		.loc 2 73 0
 674 01a2 26E0     		b	.L14
 675              	.L21:
  74:main.c        **** 
  75:main.c        ****         case 5:
  76:main.c        ****             U_Write(digits[i][3]);
 676              		.loc 2 76 0
 677 01a4 164A     		ldr	r2, .L23+4
 678 01a6 3B68     		ldr	r3, [r7]
 679 01a8 1B01     		lsls	r3, r3, #4
 680 01aa D318     		adds	r3, r2, r3
 681 01ac 0C33     		adds	r3, r3, #12
 682 01ae 1B68     		ldr	r3, [r3]
 683 01b0 DBB2     		uxtb	r3, r3
 684 01b2 1800     		movs	r0, r3
 685 01b4 FFF7FEFF 		bl	U_Write
  77:main.c        ****             V_Write(digits[i][2]);
 686              		.loc 2 77 0
 687 01b8 114A     		ldr	r2, .L23+4
 688 01ba 3B68     		ldr	r3, [r7]
 689 01bc 1B01     		lsls	r3, r3, #4
 690 01be D318     		adds	r3, r2, r3
 691 01c0 0833     		adds	r3, r3, #8
 692 01c2 1B68     		ldr	r3, [r3]
 693 01c4 DBB2     		uxtb	r3, r3
 694 01c6 1800     		movs	r0, r3
 695 01c8 FFF7FEFF 		bl	V_Write
  78:main.c        ****             W_Write(digits[i][1]);
 696              		.loc 2 78 0
 697 01cc 0C4A     		ldr	r2, .L23+4
 698 01ce 3B68     		ldr	r3, [r7]
 699 01d0 1B01     		lsls	r3, r3, #4
 700 01d2 D318     		adds	r3, r2, r3
 701 01d4 0433     		adds	r3, r3, #4
 702 01d6 1B68     		ldr	r3, [r3]
 703 01d8 DBB2     		uxtb	r3, r3
 704 01da 1800     		movs	r0, r3
 705 01dc FFF7FEFF 		bl	W_Write
  79:main.c        ****             X_Write(digits[i][0]);
 706              		.loc 2 79 0
 707 01e0 074B     		ldr	r3, .L23+4
 708 01e2 3A68     		ldr	r2, [r7]
 709 01e4 1201     		lsls	r2, r2, #4
 710 01e6 D358     		ldr	r3, [r2, r3]
 711 01e8 DBB2     		uxtb	r3, r3
 712 01ea 1800     		movs	r0, r3
 713 01ec FFF7FEFF 		bl	X_Write
  80:main.c        ****             break;
 714              		.loc 2 80 0
 715 01f0 C046     		nop
 716              	.L14:
 717              	.L22:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 29


  81:main.c        ****     }
  82:main.c        **** }
 718              		.loc 2 82 0
 719 01f2 C046     		nop
 720 01f4 BD46     		mov	sp, r7
 721 01f6 02B0     		add	sp, sp, #8
 722              		@ sp needed
 723 01f8 80BD     		pop	{r7, pc}
 724              	.L24:
 725 01fa C046     		.align	2
 726              	.L23:
 727 01fc 00000000 		.word	.L16
 728 0200 00000000 		.word	digits
 729              		.cfi_endproc
 730              	.LFE63:
 731              		.size	nixie_write, .-nixie_write
 732              		.global	__aeabi_uidiv
 733              		.global	__aeabi_uidivmod
 734              		.section	.text.wdt_callback,"ax",%progbits
 735              		.align	2
 736              		.global	wdt_callback
 737              		.code	16
 738              		.thumb_func
 739              		.type	wdt_callback, %function
 740              	wdt_callback:
 741              	.LFB64:
  83:main.c        **** 
  84:main.c        **** void wdt_callback(void){
 742              		.loc 2 84 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 1, uses_anonymous_args = 0
 746 0000 80B5     		push	{r7, lr}
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 7, -8
 749              		.cfi_offset 14, -4
 750 0002 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
  85:main.c        **** 
  86:main.c        ****     time = RTC_GetTime();
 752              		.loc 2 86 0
 753 0004 FFF7FEFF 		bl	RTC_GetTime
 754 0008 0200     		movs	r2, r0
 755 000a 3B4B     		ldr	r3, .L29
 756 000c 1A60     		str	r2, [r3]
  87:main.c        ****     
  88:main.c        ****     hours = RTC_GetHours(time);
 757              		.loc 2 88 0
 758 000e 3A4B     		ldr	r3, .L29
 759 0010 1B68     		ldr	r3, [r3]
 760 0012 1800     		movs	r0, r3
 761 0014 FFF7FEFF 		bl	RTC_GetHours
 762 0018 0200     		movs	r2, r0
 763 001a 384B     		ldr	r3, .L29+4
 764 001c 1A60     		str	r2, [r3]
  89:main.c        ****     minutes = RTC_GetMinutes(time);
 765              		.loc 2 89 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 30


 766 001e 364B     		ldr	r3, .L29
 767 0020 1B68     		ldr	r3, [r3]
 768 0022 1800     		movs	r0, r3
 769 0024 FFF7FEFF 		bl	RTC_GetMinutes
 770 0028 0200     		movs	r2, r0
 771 002a 354B     		ldr	r3, .L29+8
 772 002c 1A60     		str	r2, [r3]
  90:main.c        ****     seconds = RTC_GetSecond(time);
 773              		.loc 2 90 0
 774 002e 324B     		ldr	r3, .L29
 775 0030 1B68     		ldr	r3, [r3]
 776 0032 1800     		movs	r0, r3
 777 0034 FFF7FEFF 		bl	RTC_GetSecond
 778 0038 0200     		movs	r2, r0
 779 003a 324B     		ldr	r3, .L29+12
 780 003c 1A60     		str	r2, [r3]
  91:main.c        ****     
  92:main.c        ****     if (!display_mode){
 781              		.loc 2 92 0
 782 003e 324B     		ldr	r3, .L29+16
 783 0040 1B68     		ldr	r3, [r3]
 784 0042 002B     		cmp	r3, #0
 785 0044 41D1     		bne	.L26
  93:main.c        ****         nixie_write(0,hours/10);
 786              		.loc 2 93 0
 787 0046 2D4B     		ldr	r3, .L29+4
 788 0048 1B68     		ldr	r3, [r3]
 789 004a 0A21     		movs	r1, #10
 790 004c 1800     		movs	r0, r3
 791 004e FFF7FEFF 		bl	__aeabi_uidiv
 792 0052 0300     		movs	r3, r0
 793 0054 1900     		movs	r1, r3
 794 0056 0020     		movs	r0, #0
 795 0058 FFF7FEFF 		bl	nixie_write
  94:main.c        ****         nixie_write(1,hours%10);
 796              		.loc 2 94 0
 797 005c 274B     		ldr	r3, .L29+4
 798 005e 1B68     		ldr	r3, [r3]
 799 0060 0A21     		movs	r1, #10
 800 0062 1800     		movs	r0, r3
 801 0064 FFF7FEFF 		bl	__aeabi_uidivmod
 802 0068 0B00     		movs	r3, r1
 803 006a 1900     		movs	r1, r3
 804 006c 0120     		movs	r0, #1
 805 006e FFF7FEFF 		bl	nixie_write
  95:main.c        ****         
  96:main.c        ****         nixie_write(2,minutes/10);
 806              		.loc 2 96 0
 807 0072 234B     		ldr	r3, .L29+8
 808 0074 1B68     		ldr	r3, [r3]
 809 0076 0A21     		movs	r1, #10
 810 0078 1800     		movs	r0, r3
 811 007a FFF7FEFF 		bl	__aeabi_uidiv
 812 007e 0300     		movs	r3, r0
 813 0080 1900     		movs	r1, r3
 814 0082 0220     		movs	r0, #2
 815 0084 FFF7FEFF 		bl	nixie_write
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 31


  97:main.c        ****         nixie_write(3,minutes%10);
 816              		.loc 2 97 0
 817 0088 1D4B     		ldr	r3, .L29+8
 818 008a 1B68     		ldr	r3, [r3]
 819 008c 0A21     		movs	r1, #10
 820 008e 1800     		movs	r0, r3
 821 0090 FFF7FEFF 		bl	__aeabi_uidivmod
 822 0094 0B00     		movs	r3, r1
 823 0096 1900     		movs	r1, r3
 824 0098 0320     		movs	r0, #3
 825 009a FFF7FEFF 		bl	nixie_write
  98:main.c        ****         
  99:main.c        ****         nixie_write(4,seconds/10);
 826              		.loc 2 99 0
 827 009e 194B     		ldr	r3, .L29+12
 828 00a0 1B68     		ldr	r3, [r3]
 829 00a2 0A21     		movs	r1, #10
 830 00a4 1800     		movs	r0, r3
 831 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 832 00aa 0300     		movs	r3, r0
 833 00ac 1900     		movs	r1, r3
 834 00ae 0420     		movs	r0, #4
 835 00b0 FFF7FEFF 		bl	nixie_write
 100:main.c        ****         nixie_write(5,seconds%10);
 836              		.loc 2 100 0
 837 00b4 134B     		ldr	r3, .L29+12
 838 00b6 1B68     		ldr	r3, [r3]
 839 00b8 0A21     		movs	r1, #10
 840 00ba 1800     		movs	r0, r3
 841 00bc FFF7FEFF 		bl	__aeabi_uidivmod
 842 00c0 0B00     		movs	r3, r1
 843 00c2 1900     		movs	r1, r3
 844 00c4 0520     		movs	r0, #5
 845 00c6 FFF7FEFF 		bl	nixie_write
 846              	.L26:
 101:main.c        ****     }
 102:main.c        ****     
 103:main.c        ****     if(minutes == 0 && done == 0){
 847              		.loc 2 103 0
 848 00ca 0D4B     		ldr	r3, .L29+8
 849 00cc 1B68     		ldr	r3, [r3]
 850 00ce 002B     		cmp	r3, #0
 851 00d0 05D1     		bne	.L27
 852              		.loc 2 103 0 is_stmt 0 discriminator 1
 853 00d2 0E4B     		ldr	r3, .L29+20
 854 00d4 1B68     		ldr	r3, [r3]
 855 00d6 002B     		cmp	r3, #0
 856 00d8 01D1     		bne	.L27
 104:main.c        ****         cathode_antidote();     // every hour we call this function
 857              		.loc 2 104 0 is_stmt 1
 858 00da FFF7FEFF 		bl	cathode_antidote
 859              	.L27:
 105:main.c        ****     }
 106:main.c        ****     
 107:main.c        ****     if(minutes > 0){
 860              		.loc 2 107 0
 861 00de 084B     		ldr	r3, .L29+8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 32


 862 00e0 1B68     		ldr	r3, [r3]
 863 00e2 002B     		cmp	r3, #0
 864 00e4 02D0     		beq	.L28
 108:main.c        ****         done = 0;
 865              		.loc 2 108 0
 866 00e6 094B     		ldr	r3, .L29+20
 867 00e8 0022     		movs	r2, #0
 868 00ea 1A60     		str	r2, [r3]
 869              	.L28:
 109:main.c        ****     }
 110:main.c        ****     
 111:main.c        ****     RTC_Update();
 870              		.loc 2 111 0
 871 00ec FFF7FEFF 		bl	RTC_Update
 112:main.c        **** }
 872              		.loc 2 112 0
 873 00f0 C046     		nop
 874 00f2 BD46     		mov	sp, r7
 875              		@ sp needed
 876 00f4 80BD     		pop	{r7, pc}
 877              	.L30:
 878 00f6 C046     		.align	2
 879              	.L29:
 880 00f8 00000000 		.word	time
 881 00fc 00000000 		.word	hours
 882 0100 00000000 		.word	minutes
 883 0104 00000000 		.word	seconds
 884 0108 00000000 		.word	display_mode
 885 010c 00000000 		.word	done
 886              		.cfi_endproc
 887              	.LFE64:
 888              		.size	wdt_callback, .-wdt_callback
 889              		.section	.text.cathode_antidote,"ax",%progbits
 890              		.align	2
 891              		.global	cathode_antidote
 892              		.code	16
 893              		.thumb_func
 894              		.type	cathode_antidote, %function
 895              	cathode_antidote:
 896              	.LFB65:
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** void cathode_antidote(){    // "animation" that cycles through all digits
 897              		.loc 2 115 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 48
 900              		@ frame_needed = 1, uses_anonymous_args = 0
 901 0000 80B5     		push	{r7, lr}
 902              		.cfi_def_cfa_offset 8
 903              		.cfi_offset 7, -8
 904              		.cfi_offset 14, -4
 905 0002 8CB0     		sub	sp, sp, #48
 906              		.cfi_def_cfa_offset 56
 907 0004 00AF     		add	r7, sp, #0
 908              		.cfi_def_cfa_register 7
 909              	.LBB2:
 116:main.c        ****     
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 33


 117:main.c        ****     for(int n = 0; n < 10; n++){
 910              		.loc 2 117 0
 911 0006 0023     		movs	r3, #0
 912 0008 FB62     		str	r3, [r7, #44]
 913 000a 2BE0     		b	.L32
 914              	.L33:
 118:main.c        ****         U_Write(digits[n][3]);
 915              		.loc 2 118 0 discriminator 3
 916 000c D84A     		ldr	r2, .L56
 917 000e FB6A     		ldr	r3, [r7, #44]
 918 0010 1B01     		lsls	r3, r3, #4
 919 0012 D318     		adds	r3, r2, r3
 920 0014 0C33     		adds	r3, r3, #12
 921 0016 1B68     		ldr	r3, [r3]
 922 0018 DBB2     		uxtb	r3, r3
 923 001a 1800     		movs	r0, r3
 924 001c FFF7FEFF 		bl	U_Write
 119:main.c        ****         V_Write(digits[n][2]);
 925              		.loc 2 119 0 discriminator 3
 926 0020 D34A     		ldr	r2, .L56
 927 0022 FB6A     		ldr	r3, [r7, #44]
 928 0024 1B01     		lsls	r3, r3, #4
 929 0026 D318     		adds	r3, r2, r3
 930 0028 0833     		adds	r3, r3, #8
 931 002a 1B68     		ldr	r3, [r3]
 932 002c DBB2     		uxtb	r3, r3
 933 002e 1800     		movs	r0, r3
 934 0030 FFF7FEFF 		bl	V_Write
 120:main.c        ****         W_Write(digits[n][1]);
 935              		.loc 2 120 0 discriminator 3
 936 0034 CE4A     		ldr	r2, .L56
 937 0036 FB6A     		ldr	r3, [r7, #44]
 938 0038 1B01     		lsls	r3, r3, #4
 939 003a D318     		adds	r3, r2, r3
 940 003c 0433     		adds	r3, r3, #4
 941 003e 1B68     		ldr	r3, [r3]
 942 0040 DBB2     		uxtb	r3, r3
 943 0042 1800     		movs	r0, r3
 944 0044 FFF7FEFF 		bl	W_Write
 121:main.c        ****         X_Write(digits[n][0]);
 945              		.loc 2 121 0 discriminator 3
 946 0048 C94B     		ldr	r3, .L56
 947 004a FA6A     		ldr	r2, [r7, #44]
 948 004c 1201     		lsls	r2, r2, #4
 949 004e D358     		ldr	r3, [r2, r3]
 950 0050 DBB2     		uxtb	r3, r3
 951 0052 1800     		movs	r0, r3
 952 0054 FFF7FEFF 		bl	X_Write
 122:main.c        ****         CyDelay(80);
 953              		.loc 2 122 0 discriminator 3
 954 0058 5020     		movs	r0, #80
 955 005a FFF7FEFF 		bl	CyDelay
 117:main.c        ****         U_Write(digits[n][3]);
 956              		.loc 2 117 0 discriminator 3
 957 005e FB6A     		ldr	r3, [r7, #44]
 958 0060 0133     		adds	r3, r3, #1
 959 0062 FB62     		str	r3, [r7, #44]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 34


 960              	.L32:
 117:main.c        ****         U_Write(digits[n][3]);
 961              		.loc 2 117 0 is_stmt 0 discriminator 1
 962 0064 FB6A     		ldr	r3, [r7, #44]
 963 0066 092B     		cmp	r3, #9
 964 0068 D0DD     		ble	.L33
 965              	.LBE2:
 123:main.c        ****     }
 124:main.c        ****     U_Write(0);
 966              		.loc 2 124 0 is_stmt 1
 967 006a 0020     		movs	r0, #0
 968 006c FFF7FEFF 		bl	U_Write
 125:main.c        ****     V_Write(0);
 969              		.loc 2 125 0
 970 0070 0020     		movs	r0, #0
 971 0072 FFF7FEFF 		bl	V_Write
 126:main.c        ****     W_Write(0);
 972              		.loc 2 126 0
 973 0076 0020     		movs	r0, #0
 974 0078 FFF7FEFF 		bl	W_Write
 127:main.c        ****     X_Write(0);
 975              		.loc 2 127 0
 976 007c 0020     		movs	r0, #0
 977 007e FFF7FEFF 		bl	X_Write
 978              	.LBB3:
 128:main.c        ****         
 129:main.c        **** 
 130:main.c        ****     for(int m = 0; m < 10; m++){
 979              		.loc 2 130 0
 980 0082 0023     		movs	r3, #0
 981 0084 BB62     		str	r3, [r7, #40]
 982 0086 2BE0     		b	.L34
 983              	.L35:
 131:main.c        ****         Q_Write(digits[m][3]);
 984              		.loc 2 131 0 discriminator 3
 985 0088 B94A     		ldr	r2, .L56
 986 008a BB6A     		ldr	r3, [r7, #40]
 987 008c 1B01     		lsls	r3, r3, #4
 988 008e D318     		adds	r3, r2, r3
 989 0090 0C33     		adds	r3, r3, #12
 990 0092 1B68     		ldr	r3, [r3]
 991 0094 DBB2     		uxtb	r3, r3
 992 0096 1800     		movs	r0, r3
 993 0098 FFF7FEFF 		bl	Q_Write
 132:main.c        ****         R_Write(digits[m][2]);
 994              		.loc 2 132 0 discriminator 3
 995 009c B44A     		ldr	r2, .L56
 996 009e BB6A     		ldr	r3, [r7, #40]
 997 00a0 1B01     		lsls	r3, r3, #4
 998 00a2 D318     		adds	r3, r2, r3
 999 00a4 0833     		adds	r3, r3, #8
 1000 00a6 1B68     		ldr	r3, [r3]
 1001 00a8 DBB2     		uxtb	r3, r3
 1002 00aa 1800     		movs	r0, r3
 1003 00ac FFF7FEFF 		bl	R_Write
 133:main.c        ****         S_Write(digits[m][1]);
 1004              		.loc 2 133 0 discriminator 3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 35


 1005 00b0 AF4A     		ldr	r2, .L56
 1006 00b2 BB6A     		ldr	r3, [r7, #40]
 1007 00b4 1B01     		lsls	r3, r3, #4
 1008 00b6 D318     		adds	r3, r2, r3
 1009 00b8 0433     		adds	r3, r3, #4
 1010 00ba 1B68     		ldr	r3, [r3]
 1011 00bc DBB2     		uxtb	r3, r3
 1012 00be 1800     		movs	r0, r3
 1013 00c0 FFF7FEFF 		bl	S_Write
 134:main.c        ****         T_Write(digits[m][0]);
 1014              		.loc 2 134 0 discriminator 3
 1015 00c4 AA4B     		ldr	r3, .L56
 1016 00c6 BA6A     		ldr	r2, [r7, #40]
 1017 00c8 1201     		lsls	r2, r2, #4
 1018 00ca D358     		ldr	r3, [r2, r3]
 1019 00cc DBB2     		uxtb	r3, r3
 1020 00ce 1800     		movs	r0, r3
 1021 00d0 FFF7FEFF 		bl	T_Write
 135:main.c        ****         CyDelay(80);
 1022              		.loc 2 135 0 discriminator 3
 1023 00d4 5020     		movs	r0, #80
 1024 00d6 FFF7FEFF 		bl	CyDelay
 130:main.c        ****         Q_Write(digits[m][3]);
 1025              		.loc 2 130 0 discriminator 3
 1026 00da BB6A     		ldr	r3, [r7, #40]
 1027 00dc 0133     		adds	r3, r3, #1
 1028 00de BB62     		str	r3, [r7, #40]
 1029              	.L34:
 130:main.c        ****         Q_Write(digits[m][3]);
 1030              		.loc 2 130 0 is_stmt 0 discriminator 1
 1031 00e0 BB6A     		ldr	r3, [r7, #40]
 1032 00e2 092B     		cmp	r3, #9
 1033 00e4 D0DD     		ble	.L35
 1034              	.LBE3:
 136:main.c        ****     }
 137:main.c        ****     Q_Write(0);
 1035              		.loc 2 137 0 is_stmt 1
 1036 00e6 0020     		movs	r0, #0
 1037 00e8 FFF7FEFF 		bl	Q_Write
 138:main.c        ****     R_Write(0);
 1038              		.loc 2 138 0
 1039 00ec 0020     		movs	r0, #0
 1040 00ee FFF7FEFF 		bl	R_Write
 139:main.c        ****     S_Write(0);
 1041              		.loc 2 139 0
 1042 00f2 0020     		movs	r0, #0
 1043 00f4 FFF7FEFF 		bl	S_Write
 140:main.c        ****     T_Write(0);
 1044              		.loc 2 140 0
 1045 00f8 0020     		movs	r0, #0
 1046 00fa FFF7FEFF 		bl	T_Write
 1047              	.LBB4:
 141:main.c        ****     
 142:main.c        ****     
 143:main.c        ****     for(int l = 0; l < 10; l++){
 1048              		.loc 2 143 0
 1049 00fe 0023     		movs	r3, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 36


 1050 0100 7B62     		str	r3, [r7, #36]
 1051 0102 2BE0     		b	.L36
 1052              	.L37:
 144:main.c        ****         M_Write(digits[l][3]);
 1053              		.loc 2 144 0 discriminator 3
 1054 0104 9A4A     		ldr	r2, .L56
 1055 0106 7B6A     		ldr	r3, [r7, #36]
 1056 0108 1B01     		lsls	r3, r3, #4
 1057 010a D318     		adds	r3, r2, r3
 1058 010c 0C33     		adds	r3, r3, #12
 1059 010e 1B68     		ldr	r3, [r3]
 1060 0110 DBB2     		uxtb	r3, r3
 1061 0112 1800     		movs	r0, r3
 1062 0114 FFF7FEFF 		bl	M_Write
 145:main.c        ****         N_Write(digits[l][2]);
 1063              		.loc 2 145 0 discriminator 3
 1064 0118 954A     		ldr	r2, .L56
 1065 011a 7B6A     		ldr	r3, [r7, #36]
 1066 011c 1B01     		lsls	r3, r3, #4
 1067 011e D318     		adds	r3, r2, r3
 1068 0120 0833     		adds	r3, r3, #8
 1069 0122 1B68     		ldr	r3, [r3]
 1070 0124 DBB2     		uxtb	r3, r3
 1071 0126 1800     		movs	r0, r3
 1072 0128 FFF7FEFF 		bl	N_Write
 146:main.c        ****         O_Write(digits[l][1]);
 1073              		.loc 2 146 0 discriminator 3
 1074 012c 904A     		ldr	r2, .L56
 1075 012e 7B6A     		ldr	r3, [r7, #36]
 1076 0130 1B01     		lsls	r3, r3, #4
 1077 0132 D318     		adds	r3, r2, r3
 1078 0134 0433     		adds	r3, r3, #4
 1079 0136 1B68     		ldr	r3, [r3]
 1080 0138 DBB2     		uxtb	r3, r3
 1081 013a 1800     		movs	r0, r3
 1082 013c FFF7FEFF 		bl	O_Write
 147:main.c        ****         P_Write(digits[l][0]);
 1083              		.loc 2 147 0 discriminator 3
 1084 0140 8B4B     		ldr	r3, .L56
 1085 0142 7A6A     		ldr	r2, [r7, #36]
 1086 0144 1201     		lsls	r2, r2, #4
 1087 0146 D358     		ldr	r3, [r2, r3]
 1088 0148 DBB2     		uxtb	r3, r3
 1089 014a 1800     		movs	r0, r3
 1090 014c FFF7FEFF 		bl	P_Write
 148:main.c        ****         CyDelay(80);
 1091              		.loc 2 148 0 discriminator 3
 1092 0150 5020     		movs	r0, #80
 1093 0152 FFF7FEFF 		bl	CyDelay
 143:main.c        ****         M_Write(digits[l][3]);
 1094              		.loc 2 143 0 discriminator 3
 1095 0156 7B6A     		ldr	r3, [r7, #36]
 1096 0158 0133     		adds	r3, r3, #1
 1097 015a 7B62     		str	r3, [r7, #36]
 1098              	.L36:
 143:main.c        ****         M_Write(digits[l][3]);
 1099              		.loc 2 143 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 37


 1100 015c 7B6A     		ldr	r3, [r7, #36]
 1101 015e 092B     		cmp	r3, #9
 1102 0160 D0DD     		ble	.L37
 1103              	.LBE4:
 149:main.c        ****     }
 150:main.c        ****     M_Write(0);
 1104              		.loc 2 150 0 is_stmt 1
 1105 0162 0020     		movs	r0, #0
 1106 0164 FFF7FEFF 		bl	M_Write
 151:main.c        ****     N_Write(0);
 1107              		.loc 2 151 0
 1108 0168 0020     		movs	r0, #0
 1109 016a FFF7FEFF 		bl	N_Write
 152:main.c        ****     O_Write(0);
 1110              		.loc 2 152 0
 1111 016e 0020     		movs	r0, #0
 1112 0170 FFF7FEFF 		bl	O_Write
 153:main.c        ****     P_Write(0);
 1113              		.loc 2 153 0
 1114 0174 0020     		movs	r0, #0
 1115 0176 FFF7FEFF 		bl	P_Write
 1116              	.LBB5:
 154:main.c        ****     
 155:main.c        ****     
 156:main.c        ****     for(int k = 0; k < 10; k++){
 1117              		.loc 2 156 0
 1118 017a 0023     		movs	r3, #0
 1119 017c 3B62     		str	r3, [r7, #32]
 1120 017e 2BE0     		b	.L38
 1121              	.L39:
 157:main.c        ****         I_Write(digits[k][3]);
 1122              		.loc 2 157 0 discriminator 3
 1123 0180 7B4A     		ldr	r2, .L56
 1124 0182 3B6A     		ldr	r3, [r7, #32]
 1125 0184 1B01     		lsls	r3, r3, #4
 1126 0186 D318     		adds	r3, r2, r3
 1127 0188 0C33     		adds	r3, r3, #12
 1128 018a 1B68     		ldr	r3, [r3]
 1129 018c DBB2     		uxtb	r3, r3
 1130 018e 1800     		movs	r0, r3
 1131 0190 FFF7FEFF 		bl	I_Write
 158:main.c        ****         J_Write(digits[k][2]);
 1132              		.loc 2 158 0 discriminator 3
 1133 0194 764A     		ldr	r2, .L56
 1134 0196 3B6A     		ldr	r3, [r7, #32]
 1135 0198 1B01     		lsls	r3, r3, #4
 1136 019a D318     		adds	r3, r2, r3
 1137 019c 0833     		adds	r3, r3, #8
 1138 019e 1B68     		ldr	r3, [r3]
 1139 01a0 DBB2     		uxtb	r3, r3
 1140 01a2 1800     		movs	r0, r3
 1141 01a4 FFF7FEFF 		bl	J_Write
 159:main.c        ****         K_Write(digits[k][1]);
 1142              		.loc 2 159 0 discriminator 3
 1143 01a8 714A     		ldr	r2, .L56
 1144 01aa 3B6A     		ldr	r3, [r7, #32]
 1145 01ac 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 38


 1146 01ae D318     		adds	r3, r2, r3
 1147 01b0 0433     		adds	r3, r3, #4
 1148 01b2 1B68     		ldr	r3, [r3]
 1149 01b4 DBB2     		uxtb	r3, r3
 1150 01b6 1800     		movs	r0, r3
 1151 01b8 FFF7FEFF 		bl	K_Write
 160:main.c        ****         L_Write(digits[k][0]);
 1152              		.loc 2 160 0 discriminator 3
 1153 01bc 6C4B     		ldr	r3, .L56
 1154 01be 3A6A     		ldr	r2, [r7, #32]
 1155 01c0 1201     		lsls	r2, r2, #4
 1156 01c2 D358     		ldr	r3, [r2, r3]
 1157 01c4 DBB2     		uxtb	r3, r3
 1158 01c6 1800     		movs	r0, r3
 1159 01c8 FFF7FEFF 		bl	L_Write
 161:main.c        ****         CyDelay(80);
 1160              		.loc 2 161 0 discriminator 3
 1161 01cc 5020     		movs	r0, #80
 1162 01ce FFF7FEFF 		bl	CyDelay
 156:main.c        ****         I_Write(digits[k][3]);
 1163              		.loc 2 156 0 discriminator 3
 1164 01d2 3B6A     		ldr	r3, [r7, #32]
 1165 01d4 0133     		adds	r3, r3, #1
 1166 01d6 3B62     		str	r3, [r7, #32]
 1167              	.L38:
 156:main.c        ****         I_Write(digits[k][3]);
 1168              		.loc 2 156 0 is_stmt 0 discriminator 1
 1169 01d8 3B6A     		ldr	r3, [r7, #32]
 1170 01da 092B     		cmp	r3, #9
 1171 01dc D0DD     		ble	.L39
 1172              	.LBE5:
 162:main.c        ****     }
 163:main.c        ****     I_Write(0);
 1173              		.loc 2 163 0 is_stmt 1
 1174 01de 0020     		movs	r0, #0
 1175 01e0 FFF7FEFF 		bl	I_Write
 164:main.c        ****     J_Write(0);
 1176              		.loc 2 164 0
 1177 01e4 0020     		movs	r0, #0
 1178 01e6 FFF7FEFF 		bl	J_Write
 165:main.c        ****     K_Write(0);
 1179              		.loc 2 165 0
 1180 01ea 0020     		movs	r0, #0
 1181 01ec FFF7FEFF 		bl	K_Write
 166:main.c        ****     L_Write(0);
 1182              		.loc 2 166 0
 1183 01f0 0020     		movs	r0, #0
 1184 01f2 FFF7FEFF 		bl	L_Write
 1185              	.LBB6:
 167:main.c        ****     
 168:main.c        ****     
 169:main.c        ****     for(int j = 0; j < 10; j++){
 1186              		.loc 2 169 0
 1187 01f6 0023     		movs	r3, #0
 1188 01f8 FB61     		str	r3, [r7, #28]
 1189 01fa 2BE0     		b	.L40
 1190              	.L41:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 39


 170:main.c        ****         E_Write(digits[j][3]);
 1191              		.loc 2 170 0 discriminator 3
 1192 01fc 5C4A     		ldr	r2, .L56
 1193 01fe FB69     		ldr	r3, [r7, #28]
 1194 0200 1B01     		lsls	r3, r3, #4
 1195 0202 D318     		adds	r3, r2, r3
 1196 0204 0C33     		adds	r3, r3, #12
 1197 0206 1B68     		ldr	r3, [r3]
 1198 0208 DBB2     		uxtb	r3, r3
 1199 020a 1800     		movs	r0, r3
 1200 020c FFF7FEFF 		bl	E_Write
 171:main.c        ****         F_Write(digits[j][2]);
 1201              		.loc 2 171 0 discriminator 3
 1202 0210 574A     		ldr	r2, .L56
 1203 0212 FB69     		ldr	r3, [r7, #28]
 1204 0214 1B01     		lsls	r3, r3, #4
 1205 0216 D318     		adds	r3, r2, r3
 1206 0218 0833     		adds	r3, r3, #8
 1207 021a 1B68     		ldr	r3, [r3]
 1208 021c DBB2     		uxtb	r3, r3
 1209 021e 1800     		movs	r0, r3
 1210 0220 FFF7FEFF 		bl	F_Write
 172:main.c        ****         G_Write(digits[j][1]);
 1211              		.loc 2 172 0 discriminator 3
 1212 0224 524A     		ldr	r2, .L56
 1213 0226 FB69     		ldr	r3, [r7, #28]
 1214 0228 1B01     		lsls	r3, r3, #4
 1215 022a D318     		adds	r3, r2, r3
 1216 022c 0433     		adds	r3, r3, #4
 1217 022e 1B68     		ldr	r3, [r3]
 1218 0230 DBB2     		uxtb	r3, r3
 1219 0232 1800     		movs	r0, r3
 1220 0234 FFF7FEFF 		bl	G_Write
 173:main.c        ****         H_Write(digits[j][0]);
 1221              		.loc 2 173 0 discriminator 3
 1222 0238 4D4B     		ldr	r3, .L56
 1223 023a FA69     		ldr	r2, [r7, #28]
 1224 023c 1201     		lsls	r2, r2, #4
 1225 023e D358     		ldr	r3, [r2, r3]
 1226 0240 DBB2     		uxtb	r3, r3
 1227 0242 1800     		movs	r0, r3
 1228 0244 FFF7FEFF 		bl	H_Write
 174:main.c        ****         CyDelay(80);
 1229              		.loc 2 174 0 discriminator 3
 1230 0248 5020     		movs	r0, #80
 1231 024a FFF7FEFF 		bl	CyDelay
 169:main.c        ****         E_Write(digits[j][3]);
 1232              		.loc 2 169 0 discriminator 3
 1233 024e FB69     		ldr	r3, [r7, #28]
 1234 0250 0133     		adds	r3, r3, #1
 1235 0252 FB61     		str	r3, [r7, #28]
 1236              	.L40:
 169:main.c        ****         E_Write(digits[j][3]);
 1237              		.loc 2 169 0 is_stmt 0 discriminator 1
 1238 0254 FB69     		ldr	r3, [r7, #28]
 1239 0256 092B     		cmp	r3, #9
 1240 0258 D0DD     		ble	.L41
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 40


 1241              	.LBE6:
 175:main.c        ****     }
 176:main.c        ****     E_Write(0);
 1242              		.loc 2 176 0 is_stmt 1
 1243 025a 0020     		movs	r0, #0
 1244 025c FFF7FEFF 		bl	E_Write
 177:main.c        ****     F_Write(0);
 1245              		.loc 2 177 0
 1246 0260 0020     		movs	r0, #0
 1247 0262 FFF7FEFF 		bl	F_Write
 178:main.c        ****     G_Write(0);
 1248              		.loc 2 178 0
 1249 0266 0020     		movs	r0, #0
 1250 0268 FFF7FEFF 		bl	G_Write
 179:main.c        ****     H_Write(0);
 1251              		.loc 2 179 0
 1252 026c 0020     		movs	r0, #0
 1253 026e FFF7FEFF 		bl	H_Write
 1254              	.LBB7:
 180:main.c        ****     
 181:main.c        ****     
 182:main.c        ****     for(int i = 0; i < 10; i++){
 1255              		.loc 2 182 0
 1256 0272 0023     		movs	r3, #0
 1257 0274 BB61     		str	r3, [r7, #24]
 1258 0276 2BE0     		b	.L42
 1259              	.L43:
 183:main.c        ****         A_Write(digits[i][3]);
 1260              		.loc 2 183 0 discriminator 3
 1261 0278 3D4A     		ldr	r2, .L56
 1262 027a BB69     		ldr	r3, [r7, #24]
 1263 027c 1B01     		lsls	r3, r3, #4
 1264 027e D318     		adds	r3, r2, r3
 1265 0280 0C33     		adds	r3, r3, #12
 1266 0282 1B68     		ldr	r3, [r3]
 1267 0284 DBB2     		uxtb	r3, r3
 1268 0286 1800     		movs	r0, r3
 1269 0288 FFF7FEFF 		bl	A_Write
 184:main.c        ****         B_Write(digits[i][2]);
 1270              		.loc 2 184 0 discriminator 3
 1271 028c 384A     		ldr	r2, .L56
 1272 028e BB69     		ldr	r3, [r7, #24]
 1273 0290 1B01     		lsls	r3, r3, #4
 1274 0292 D318     		adds	r3, r2, r3
 1275 0294 0833     		adds	r3, r3, #8
 1276 0296 1B68     		ldr	r3, [r3]
 1277 0298 DBB2     		uxtb	r3, r3
 1278 029a 1800     		movs	r0, r3
 1279 029c FFF7FEFF 		bl	B_Write
 185:main.c        ****         C_Write(digits[i][1]);
 1280              		.loc 2 185 0 discriminator 3
 1281 02a0 334A     		ldr	r2, .L56
 1282 02a2 BB69     		ldr	r3, [r7, #24]
 1283 02a4 1B01     		lsls	r3, r3, #4
 1284 02a6 D318     		adds	r3, r2, r3
 1285 02a8 0433     		adds	r3, r3, #4
 1286 02aa 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 41


 1287 02ac DBB2     		uxtb	r3, r3
 1288 02ae 1800     		movs	r0, r3
 1289 02b0 FFF7FEFF 		bl	C_Write
 186:main.c        ****         D_Write(digits[i][0]);
 1290              		.loc 2 186 0 discriminator 3
 1291 02b4 2E4B     		ldr	r3, .L56
 1292 02b6 BA69     		ldr	r2, [r7, #24]
 1293 02b8 1201     		lsls	r2, r2, #4
 1294 02ba D358     		ldr	r3, [r2, r3]
 1295 02bc DBB2     		uxtb	r3, r3
 1296 02be 1800     		movs	r0, r3
 1297 02c0 FFF7FEFF 		bl	D_Write
 187:main.c        ****         CyDelay(80);
 1298              		.loc 2 187 0 discriminator 3
 1299 02c4 5020     		movs	r0, #80
 1300 02c6 FFF7FEFF 		bl	CyDelay
 182:main.c        ****         A_Write(digits[i][3]);
 1301              		.loc 2 182 0 discriminator 3
 1302 02ca BB69     		ldr	r3, [r7, #24]
 1303 02cc 0133     		adds	r3, r3, #1
 1304 02ce BB61     		str	r3, [r7, #24]
 1305              	.L42:
 182:main.c        ****         A_Write(digits[i][3]);
 1306              		.loc 2 182 0 is_stmt 0 discriminator 1
 1307 02d0 BB69     		ldr	r3, [r7, #24]
 1308 02d2 092B     		cmp	r3, #9
 1309 02d4 D0DD     		ble	.L43
 1310              	.LBE7:
 188:main.c        ****     }
 189:main.c        ****     A_Write(0);
 1311              		.loc 2 189 0 is_stmt 1
 1312 02d6 0020     		movs	r0, #0
 1313 02d8 FFF7FEFF 		bl	A_Write
 190:main.c        ****     B_Write(0);
 1314              		.loc 2 190 0
 1315 02dc 0020     		movs	r0, #0
 1316 02de FFF7FEFF 		bl	B_Write
 191:main.c        ****     C_Write(0);
 1317              		.loc 2 191 0
 1318 02e2 0020     		movs	r0, #0
 1319 02e4 FFF7FEFF 		bl	C_Write
 192:main.c        ****     D_Write(0);
 1320              		.loc 2 192 0
 1321 02e8 0020     		movs	r0, #0
 1322 02ea FFF7FEFF 		bl	D_Write
 1323              	.LBB8:
 193:main.c        ****     
 194:main.c        ****     
 195:main.c        ****     for(int j = 0; j < 10; j++){
 1324              		.loc 2 195 0
 1325 02ee 0023     		movs	r3, #0
 1326 02f0 7B61     		str	r3, [r7, #20]
 1327 02f2 2BE0     		b	.L44
 1328              	.L45:
 196:main.c        ****         E_Write(digits[j][3]);
 1329              		.loc 2 196 0 discriminator 3
 1330 02f4 1E4A     		ldr	r2, .L56
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 42


 1331 02f6 7B69     		ldr	r3, [r7, #20]
 1332 02f8 1B01     		lsls	r3, r3, #4
 1333 02fa D318     		adds	r3, r2, r3
 1334 02fc 0C33     		adds	r3, r3, #12
 1335 02fe 1B68     		ldr	r3, [r3]
 1336 0300 DBB2     		uxtb	r3, r3
 1337 0302 1800     		movs	r0, r3
 1338 0304 FFF7FEFF 		bl	E_Write
 197:main.c        ****         F_Write(digits[j][2]);
 1339              		.loc 2 197 0 discriminator 3
 1340 0308 194A     		ldr	r2, .L56
 1341 030a 7B69     		ldr	r3, [r7, #20]
 1342 030c 1B01     		lsls	r3, r3, #4
 1343 030e D318     		adds	r3, r2, r3
 1344 0310 0833     		adds	r3, r3, #8
 1345 0312 1B68     		ldr	r3, [r3]
 1346 0314 DBB2     		uxtb	r3, r3
 1347 0316 1800     		movs	r0, r3
 1348 0318 FFF7FEFF 		bl	F_Write
 198:main.c        ****         G_Write(digits[j][1]);
 1349              		.loc 2 198 0 discriminator 3
 1350 031c 144A     		ldr	r2, .L56
 1351 031e 7B69     		ldr	r3, [r7, #20]
 1352 0320 1B01     		lsls	r3, r3, #4
 1353 0322 D318     		adds	r3, r2, r3
 1354 0324 0433     		adds	r3, r3, #4
 1355 0326 1B68     		ldr	r3, [r3]
 1356 0328 DBB2     		uxtb	r3, r3
 1357 032a 1800     		movs	r0, r3
 1358 032c FFF7FEFF 		bl	G_Write
 199:main.c        ****         H_Write(digits[j][0]);
 1359              		.loc 2 199 0 discriminator 3
 1360 0330 0F4B     		ldr	r3, .L56
 1361 0332 7A69     		ldr	r2, [r7, #20]
 1362 0334 1201     		lsls	r2, r2, #4
 1363 0336 D358     		ldr	r3, [r2, r3]
 1364 0338 DBB2     		uxtb	r3, r3
 1365 033a 1800     		movs	r0, r3
 1366 033c FFF7FEFF 		bl	H_Write
 200:main.c        ****         CyDelay(80);
 1367              		.loc 2 200 0 discriminator 3
 1368 0340 5020     		movs	r0, #80
 1369 0342 FFF7FEFF 		bl	CyDelay
 195:main.c        ****         E_Write(digits[j][3]);
 1370              		.loc 2 195 0 discriminator 3
 1371 0346 7B69     		ldr	r3, [r7, #20]
 1372 0348 0133     		adds	r3, r3, #1
 1373 034a 7B61     		str	r3, [r7, #20]
 1374              	.L44:
 195:main.c        ****         E_Write(digits[j][3]);
 1375              		.loc 2 195 0 is_stmt 0 discriminator 1
 1376 034c 7B69     		ldr	r3, [r7, #20]
 1377 034e 092B     		cmp	r3, #9
 1378 0350 D0DD     		ble	.L45
 1379              	.LBE8:
 201:main.c        ****     }
 202:main.c        ****     E_Write(0);
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 43


 1380              		.loc 2 202 0 is_stmt 1
 1381 0352 0020     		movs	r0, #0
 1382 0354 FFF7FEFF 		bl	E_Write
 203:main.c        ****     F_Write(0);
 1383              		.loc 2 203 0
 1384 0358 0020     		movs	r0, #0
 1385 035a FFF7FEFF 		bl	F_Write
 204:main.c        ****     G_Write(0);
 1386              		.loc 2 204 0
 1387 035e 0020     		movs	r0, #0
 1388 0360 FFF7FEFF 		bl	G_Write
 205:main.c        ****     H_Write(0);
 1389              		.loc 2 205 0
 1390 0364 0020     		movs	r0, #0
 1391 0366 FFF7FEFF 		bl	H_Write
 1392              	.LBB9:
 206:main.c        **** 
 207:main.c        ****     for(int k = 0; k < 10; k++){
 1393              		.loc 2 207 0
 1394 036a 0023     		movs	r3, #0
 1395 036c 3B61     		str	r3, [r7, #16]
 1396 036e 2DE0     		b	.L46
 1397              	.L57:
 1398              		.align	2
 1399              	.L56:
 1400 0370 00000000 		.word	digits
 1401              	.L47:
 208:main.c        ****         I_Write(digits[k][3]);
 1402              		.loc 2 208 0 discriminator 3
 1403 0374 9A4A     		ldr	r2, .L58
 1404 0376 3B69     		ldr	r3, [r7, #16]
 1405 0378 1B01     		lsls	r3, r3, #4
 1406 037a D318     		adds	r3, r2, r3
 1407 037c 0C33     		adds	r3, r3, #12
 1408 037e 1B68     		ldr	r3, [r3]
 1409 0380 DBB2     		uxtb	r3, r3
 1410 0382 1800     		movs	r0, r3
 1411 0384 FFF7FEFF 		bl	I_Write
 209:main.c        ****         J_Write(digits[k][2]);
 1412              		.loc 2 209 0 discriminator 3
 1413 0388 954A     		ldr	r2, .L58
 1414 038a 3B69     		ldr	r3, [r7, #16]
 1415 038c 1B01     		lsls	r3, r3, #4
 1416 038e D318     		adds	r3, r2, r3
 1417 0390 0833     		adds	r3, r3, #8
 1418 0392 1B68     		ldr	r3, [r3]
 1419 0394 DBB2     		uxtb	r3, r3
 1420 0396 1800     		movs	r0, r3
 1421 0398 FFF7FEFF 		bl	J_Write
 210:main.c        ****         K_Write(digits[k][1]);
 1422              		.loc 2 210 0 discriminator 3
 1423 039c 904A     		ldr	r2, .L58
 1424 039e 3B69     		ldr	r3, [r7, #16]
 1425 03a0 1B01     		lsls	r3, r3, #4
 1426 03a2 D318     		adds	r3, r2, r3
 1427 03a4 0433     		adds	r3, r3, #4
 1428 03a6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 44


 1429 03a8 DBB2     		uxtb	r3, r3
 1430 03aa 1800     		movs	r0, r3
 1431 03ac FFF7FEFF 		bl	K_Write
 211:main.c        ****         L_Write(digits[k][0]);
 1432              		.loc 2 211 0 discriminator 3
 1433 03b0 8B4B     		ldr	r3, .L58
 1434 03b2 3A69     		ldr	r2, [r7, #16]
 1435 03b4 1201     		lsls	r2, r2, #4
 1436 03b6 D358     		ldr	r3, [r2, r3]
 1437 03b8 DBB2     		uxtb	r3, r3
 1438 03ba 1800     		movs	r0, r3
 1439 03bc FFF7FEFF 		bl	L_Write
 212:main.c        ****         CyDelay(80);
 1440              		.loc 2 212 0 discriminator 3
 1441 03c0 5020     		movs	r0, #80
 1442 03c2 FFF7FEFF 		bl	CyDelay
 207:main.c        ****         I_Write(digits[k][3]);
 1443              		.loc 2 207 0 discriminator 3
 1444 03c6 3B69     		ldr	r3, [r7, #16]
 1445 03c8 0133     		adds	r3, r3, #1
 1446 03ca 3B61     		str	r3, [r7, #16]
 1447              	.L46:
 207:main.c        ****         I_Write(digits[k][3]);
 1448              		.loc 2 207 0 is_stmt 0 discriminator 1
 1449 03cc 3B69     		ldr	r3, [r7, #16]
 1450 03ce 092B     		cmp	r3, #9
 1451 03d0 D0DD     		ble	.L47
 1452              	.LBE9:
 213:main.c        ****     }
 214:main.c        ****     I_Write(0);
 1453              		.loc 2 214 0 is_stmt 1
 1454 03d2 0020     		movs	r0, #0
 1455 03d4 FFF7FEFF 		bl	I_Write
 215:main.c        ****     J_Write(0);
 1456              		.loc 2 215 0
 1457 03d8 0020     		movs	r0, #0
 1458 03da FFF7FEFF 		bl	J_Write
 216:main.c        ****     K_Write(0);
 1459              		.loc 2 216 0
 1460 03de 0020     		movs	r0, #0
 1461 03e0 FFF7FEFF 		bl	K_Write
 217:main.c        ****     L_Write(0);
 1462              		.loc 2 217 0
 1463 03e4 0020     		movs	r0, #0
 1464 03e6 FFF7FEFF 		bl	L_Write
 1465              	.LBB10:
 218:main.c        ****     
 219:main.c        ****     for(int l = 0; l < 10; l++){
 1466              		.loc 2 219 0
 1467 03ea 0023     		movs	r3, #0
 1468 03ec FB60     		str	r3, [r7, #12]
 1469 03ee 2BE0     		b	.L48
 1470              	.L49:
 220:main.c        ****         M_Write(digits[l][3]);
 1471              		.loc 2 220 0 discriminator 3
 1472 03f0 7B4A     		ldr	r2, .L58
 1473 03f2 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 45


 1474 03f4 1B01     		lsls	r3, r3, #4
 1475 03f6 D318     		adds	r3, r2, r3
 1476 03f8 0C33     		adds	r3, r3, #12
 1477 03fa 1B68     		ldr	r3, [r3]
 1478 03fc DBB2     		uxtb	r3, r3
 1479 03fe 1800     		movs	r0, r3
 1480 0400 FFF7FEFF 		bl	M_Write
 221:main.c        ****         N_Write(digits[l][2]);
 1481              		.loc 2 221 0 discriminator 3
 1482 0404 764A     		ldr	r2, .L58
 1483 0406 FB68     		ldr	r3, [r7, #12]
 1484 0408 1B01     		lsls	r3, r3, #4
 1485 040a D318     		adds	r3, r2, r3
 1486 040c 0833     		adds	r3, r3, #8
 1487 040e 1B68     		ldr	r3, [r3]
 1488 0410 DBB2     		uxtb	r3, r3
 1489 0412 1800     		movs	r0, r3
 1490 0414 FFF7FEFF 		bl	N_Write
 222:main.c        ****         O_Write(digits[l][1]);
 1491              		.loc 2 222 0 discriminator 3
 1492 0418 714A     		ldr	r2, .L58
 1493 041a FB68     		ldr	r3, [r7, #12]
 1494 041c 1B01     		lsls	r3, r3, #4
 1495 041e D318     		adds	r3, r2, r3
 1496 0420 0433     		adds	r3, r3, #4
 1497 0422 1B68     		ldr	r3, [r3]
 1498 0424 DBB2     		uxtb	r3, r3
 1499 0426 1800     		movs	r0, r3
 1500 0428 FFF7FEFF 		bl	O_Write
 223:main.c        ****         P_Write(digits[l][0]);
 1501              		.loc 2 223 0 discriminator 3
 1502 042c 6C4B     		ldr	r3, .L58
 1503 042e FA68     		ldr	r2, [r7, #12]
 1504 0430 1201     		lsls	r2, r2, #4
 1505 0432 D358     		ldr	r3, [r2, r3]
 1506 0434 DBB2     		uxtb	r3, r3
 1507 0436 1800     		movs	r0, r3
 1508 0438 FFF7FEFF 		bl	P_Write
 224:main.c        ****         CyDelay(80);
 1509              		.loc 2 224 0 discriminator 3
 1510 043c 5020     		movs	r0, #80
 1511 043e FFF7FEFF 		bl	CyDelay
 219:main.c        ****         M_Write(digits[l][3]);
 1512              		.loc 2 219 0 discriminator 3
 1513 0442 FB68     		ldr	r3, [r7, #12]
 1514 0444 0133     		adds	r3, r3, #1
 1515 0446 FB60     		str	r3, [r7, #12]
 1516              	.L48:
 219:main.c        ****         M_Write(digits[l][3]);
 1517              		.loc 2 219 0 is_stmt 0 discriminator 1
 1518 0448 FB68     		ldr	r3, [r7, #12]
 1519 044a 092B     		cmp	r3, #9
 1520 044c D0DD     		ble	.L49
 1521              	.LBE10:
 225:main.c        ****     }
 226:main.c        ****     M_Write(0);
 1522              		.loc 2 226 0 is_stmt 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 46


 1523 044e 0020     		movs	r0, #0
 1524 0450 FFF7FEFF 		bl	M_Write
 227:main.c        ****     N_Write(0);
 1525              		.loc 2 227 0
 1526 0454 0020     		movs	r0, #0
 1527 0456 FFF7FEFF 		bl	N_Write
 228:main.c        ****     O_Write(0);
 1528              		.loc 2 228 0
 1529 045a 0020     		movs	r0, #0
 1530 045c FFF7FEFF 		bl	O_Write
 229:main.c        ****     P_Write(0);
 1531              		.loc 2 229 0
 1532 0460 0020     		movs	r0, #0
 1533 0462 FFF7FEFF 		bl	P_Write
 1534              	.LBB11:
 230:main.c        **** 
 231:main.c        ****     for(int m = 0; m < 10; m++){
 1535              		.loc 2 231 0
 1536 0466 0023     		movs	r3, #0
 1537 0468 BB60     		str	r3, [r7, #8]
 1538 046a 2BE0     		b	.L50
 1539              	.L51:
 232:main.c        ****         Q_Write(digits[m][3]);
 1540              		.loc 2 232 0 discriminator 3
 1541 046c 5C4A     		ldr	r2, .L58
 1542 046e BB68     		ldr	r3, [r7, #8]
 1543 0470 1B01     		lsls	r3, r3, #4
 1544 0472 D318     		adds	r3, r2, r3
 1545 0474 0C33     		adds	r3, r3, #12
 1546 0476 1B68     		ldr	r3, [r3]
 1547 0478 DBB2     		uxtb	r3, r3
 1548 047a 1800     		movs	r0, r3
 1549 047c FFF7FEFF 		bl	Q_Write
 233:main.c        ****         R_Write(digits[m][2]);
 1550              		.loc 2 233 0 discriminator 3
 1551 0480 574A     		ldr	r2, .L58
 1552 0482 BB68     		ldr	r3, [r7, #8]
 1553 0484 1B01     		lsls	r3, r3, #4
 1554 0486 D318     		adds	r3, r2, r3
 1555 0488 0833     		adds	r3, r3, #8
 1556 048a 1B68     		ldr	r3, [r3]
 1557 048c DBB2     		uxtb	r3, r3
 1558 048e 1800     		movs	r0, r3
 1559 0490 FFF7FEFF 		bl	R_Write
 234:main.c        ****         S_Write(digits[m][1]);
 1560              		.loc 2 234 0 discriminator 3
 1561 0494 524A     		ldr	r2, .L58
 1562 0496 BB68     		ldr	r3, [r7, #8]
 1563 0498 1B01     		lsls	r3, r3, #4
 1564 049a D318     		adds	r3, r2, r3
 1565 049c 0433     		adds	r3, r3, #4
 1566 049e 1B68     		ldr	r3, [r3]
 1567 04a0 DBB2     		uxtb	r3, r3
 1568 04a2 1800     		movs	r0, r3
 1569 04a4 FFF7FEFF 		bl	S_Write
 235:main.c        ****         T_Write(digits[m][0]);
 1570              		.loc 2 235 0 discriminator 3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 47


 1571 04a8 4D4B     		ldr	r3, .L58
 1572 04aa BA68     		ldr	r2, [r7, #8]
 1573 04ac 1201     		lsls	r2, r2, #4
 1574 04ae D358     		ldr	r3, [r2, r3]
 1575 04b0 DBB2     		uxtb	r3, r3
 1576 04b2 1800     		movs	r0, r3
 1577 04b4 FFF7FEFF 		bl	T_Write
 236:main.c        ****         CyDelay(80);
 1578              		.loc 2 236 0 discriminator 3
 1579 04b8 5020     		movs	r0, #80
 1580 04ba FFF7FEFF 		bl	CyDelay
 231:main.c        ****         Q_Write(digits[m][3]);
 1581              		.loc 2 231 0 discriminator 3
 1582 04be BB68     		ldr	r3, [r7, #8]
 1583 04c0 0133     		adds	r3, r3, #1
 1584 04c2 BB60     		str	r3, [r7, #8]
 1585              	.L50:
 231:main.c        ****         Q_Write(digits[m][3]);
 1586              		.loc 2 231 0 is_stmt 0 discriminator 1
 1587 04c4 BB68     		ldr	r3, [r7, #8]
 1588 04c6 092B     		cmp	r3, #9
 1589 04c8 D0DD     		ble	.L51
 1590              	.LBE11:
 237:main.c        ****     }
 238:main.c        ****     Q_Write(0);
 1591              		.loc 2 238 0 is_stmt 1
 1592 04ca 0020     		movs	r0, #0
 1593 04cc FFF7FEFF 		bl	Q_Write
 239:main.c        ****     R_Write(0);
 1594              		.loc 2 239 0
 1595 04d0 0020     		movs	r0, #0
 1596 04d2 FFF7FEFF 		bl	R_Write
 240:main.c        ****     S_Write(0);
 1597              		.loc 2 240 0
 1598 04d6 0020     		movs	r0, #0
 1599 04d8 FFF7FEFF 		bl	S_Write
 241:main.c        ****     T_Write(0);
 1600              		.loc 2 241 0
 1601 04dc 0020     		movs	r0, #0
 1602 04de FFF7FEFF 		bl	T_Write
 1603              	.LBB12:
 242:main.c        **** 
 243:main.c        ****     for(int n = 0; n < 10; n++){
 1604              		.loc 2 243 0
 1605 04e2 0023     		movs	r3, #0
 1606 04e4 7B60     		str	r3, [r7, #4]
 1607 04e6 2BE0     		b	.L52
 1608              	.L53:
 244:main.c        ****         U_Write(digits[n][3]);
 1609              		.loc 2 244 0 discriminator 3
 1610 04e8 3D4A     		ldr	r2, .L58
 1611 04ea 7B68     		ldr	r3, [r7, #4]
 1612 04ec 1B01     		lsls	r3, r3, #4
 1613 04ee D318     		adds	r3, r2, r3
 1614 04f0 0C33     		adds	r3, r3, #12
 1615 04f2 1B68     		ldr	r3, [r3]
 1616 04f4 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 48


 1617 04f6 1800     		movs	r0, r3
 1618 04f8 FFF7FEFF 		bl	U_Write
 245:main.c        ****         V_Write(digits[n][2]);
 1619              		.loc 2 245 0 discriminator 3
 1620 04fc 384A     		ldr	r2, .L58
 1621 04fe 7B68     		ldr	r3, [r7, #4]
 1622 0500 1B01     		lsls	r3, r3, #4
 1623 0502 D318     		adds	r3, r2, r3
 1624 0504 0833     		adds	r3, r3, #8
 1625 0506 1B68     		ldr	r3, [r3]
 1626 0508 DBB2     		uxtb	r3, r3
 1627 050a 1800     		movs	r0, r3
 1628 050c FFF7FEFF 		bl	V_Write
 246:main.c        ****         W_Write(digits[n][1]);
 1629              		.loc 2 246 0 discriminator 3
 1630 0510 334A     		ldr	r2, .L58
 1631 0512 7B68     		ldr	r3, [r7, #4]
 1632 0514 1B01     		lsls	r3, r3, #4
 1633 0516 D318     		adds	r3, r2, r3
 1634 0518 0433     		adds	r3, r3, #4
 1635 051a 1B68     		ldr	r3, [r3]
 1636 051c DBB2     		uxtb	r3, r3
 1637 051e 1800     		movs	r0, r3
 1638 0520 FFF7FEFF 		bl	W_Write
 247:main.c        ****         X_Write(digits[n][0]);
 1639              		.loc 2 247 0 discriminator 3
 1640 0524 2E4B     		ldr	r3, .L58
 1641 0526 7A68     		ldr	r2, [r7, #4]
 1642 0528 1201     		lsls	r2, r2, #4
 1643 052a D358     		ldr	r3, [r2, r3]
 1644 052c DBB2     		uxtb	r3, r3
 1645 052e 1800     		movs	r0, r3
 1646 0530 FFF7FEFF 		bl	X_Write
 248:main.c        ****         CyDelay(80);
 1647              		.loc 2 248 0 discriminator 3
 1648 0534 5020     		movs	r0, #80
 1649 0536 FFF7FEFF 		bl	CyDelay
 243:main.c        ****         U_Write(digits[n][3]);
 1650              		.loc 2 243 0 discriminator 3
 1651 053a 7B68     		ldr	r3, [r7, #4]
 1652 053c 0133     		adds	r3, r3, #1
 1653 053e 7B60     		str	r3, [r7, #4]
 1654              	.L52:
 243:main.c        ****         U_Write(digits[n][3]);
 1655              		.loc 2 243 0 is_stmt 0 discriminator 1
 1656 0540 7B68     		ldr	r3, [r7, #4]
 1657 0542 092B     		cmp	r3, #9
 1658 0544 D0DD     		ble	.L53
 1659              	.LBE12:
 249:main.c        ****     }
 250:main.c        ****     U_Write(0);
 1660              		.loc 2 250 0 is_stmt 1
 1661 0546 0020     		movs	r0, #0
 1662 0548 FFF7FEFF 		bl	U_Write
 251:main.c        ****     V_Write(0);
 1663              		.loc 2 251 0
 1664 054c 0020     		movs	r0, #0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 49


 1665 054e FFF7FEFF 		bl	V_Write
 252:main.c        ****     W_Write(0);
 1666              		.loc 2 252 0
 1667 0552 0020     		movs	r0, #0
 1668 0554 FFF7FEFF 		bl	W_Write
 253:main.c        ****     X_Write(0);
 1669              		.loc 2 253 0
 1670 0558 0020     		movs	r0, #0
 1671 055a FFF7FEFF 		bl	X_Write
 1672              	.LBB13:
 254:main.c        ****         
 255:main.c        ****     for(int i = 0; i < 10; i++) {
 1673              		.loc 2 255 0
 1674 055e 0023     		movs	r3, #0
 1675 0560 3B60     		str	r3, [r7]
 1676 0562 23E0     		b	.L54
 1677              	.L55:
 256:main.c        ****       
 257:main.c        ****         /*
 258:main.c        ****         A_Write(digits[i][3]);
 259:main.c        ****         B_Write(digits[i][2]);
 260:main.c        ****         C_Write(digits[i][1]);
 261:main.c        ****         D_Write(digits[i][0]);
 262:main.c        ****         
 263:main.c        ****         E_Write(digits[i][3]);
 264:main.c        ****         F_Write(digits[i][2]);
 265:main.c        ****         G_Write(digits[i][1]);
 266:main.c        ****         H_Write(digits[i][0]);
 267:main.c        ****         
 268:main.c        ****         I_Write(digits[i][3]);
 269:main.c        ****         J_Write(digits[i][2]);
 270:main.c        ****         K_Write(digits[i][1]);
 271:main.c        ****         L_Write(digits[i][0]);
 272:main.c        **** 
 273:main.c        ****         M_Write(digits[i][3]);
 274:main.c        ****         N_Write(digits[i][2]);
 275:main.c        ****         O_Write(digits[i][1]);
 276:main.c        ****         P_Write(digits[i][0]);
 277:main.c        ****         
 278:main.c        ****         Q_Write(digits[i][3]);
 279:main.c        ****         R_Write(digits[i][2]);
 280:main.c        ****         S_Write(digits[i][1]);
 281:main.c        ****         T_Write(digits[i][0]);
 282:main.c        ****         
 283:main.c        ****         U_Write(digits[i][3]);
 284:main.c        ****         V_Write(digits[i][2]);
 285:main.c        ****         W_Write(digits[i][1]);
 286:main.c        ****         X_Write(digits[i][0]);
 287:main.c        ****         
 288:main.c        ****         */
 289:main.c        ****         
 290:main.c        ****         nixie_write(0,i);
 1678              		.loc 2 290 0 discriminator 3
 1679 0564 3B68     		ldr	r3, [r7]
 1680 0566 1900     		movs	r1, r3
 1681 0568 0020     		movs	r0, #0
 1682 056a FFF7FEFF 		bl	nixie_write
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 50


 291:main.c        ****         nixie_write(1,i);
 1683              		.loc 2 291 0 discriminator 3
 1684 056e 3B68     		ldr	r3, [r7]
 1685 0570 1900     		movs	r1, r3
 1686 0572 0120     		movs	r0, #1
 1687 0574 FFF7FEFF 		bl	nixie_write
 292:main.c        ****         nixie_write(2,i);
 1688              		.loc 2 292 0 discriminator 3
 1689 0578 3B68     		ldr	r3, [r7]
 1690 057a 1900     		movs	r1, r3
 1691 057c 0220     		movs	r0, #2
 1692 057e FFF7FEFF 		bl	nixie_write
 293:main.c        ****         nixie_write(3,i);
 1693              		.loc 2 293 0 discriminator 3
 1694 0582 3B68     		ldr	r3, [r7]
 1695 0584 1900     		movs	r1, r3
 1696 0586 0320     		movs	r0, #3
 1697 0588 FFF7FEFF 		bl	nixie_write
 294:main.c        ****         nixie_write(4,i);
 1698              		.loc 2 294 0 discriminator 3
 1699 058c 3B68     		ldr	r3, [r7]
 1700 058e 1900     		movs	r1, r3
 1701 0590 0420     		movs	r0, #4
 1702 0592 FFF7FEFF 		bl	nixie_write
 295:main.c        ****         nixie_write(5,i);
 1703              		.loc 2 295 0 discriminator 3
 1704 0596 3B68     		ldr	r3, [r7]
 1705 0598 1900     		movs	r1, r3
 1706 059a 0520     		movs	r0, #5
 1707 059c FFF7FEFF 		bl	nixie_write
 296:main.c        **** 
 297:main.c        ****         CyDelay(80);
 1708              		.loc 2 297 0 discriminator 3
 1709 05a0 5020     		movs	r0, #80
 1710 05a2 FFF7FEFF 		bl	CyDelay
 255:main.c        ****       
 1711              		.loc 2 255 0 discriminator 3
 1712 05a6 3B68     		ldr	r3, [r7]
 1713 05a8 0133     		adds	r3, r3, #1
 1714 05aa 3B60     		str	r3, [r7]
 1715              	.L54:
 255:main.c        ****       
 1716              		.loc 2 255 0 is_stmt 0 discriminator 1
 1717 05ac 3B68     		ldr	r3, [r7]
 1718 05ae 092B     		cmp	r3, #9
 1719 05b0 D8DD     		ble	.L55
 1720              	.LBE13:
 298:main.c        ****     }
 299:main.c        ****     time = RTC_GetTime();
 1721              		.loc 2 299 0 is_stmt 1
 1722 05b2 FFF7FEFF 		bl	RTC_GetTime
 1723 05b6 0200     		movs	r2, r0
 1724 05b8 0A4B     		ldr	r3, .L58+4
 1725 05ba 1A60     		str	r2, [r3]
 300:main.c        ****     minutes = RTC_GetMinutes(time);
 1726              		.loc 2 300 0
 1727 05bc 094B     		ldr	r3, .L58+4
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 51


 1728 05be 1B68     		ldr	r3, [r3]
 1729 05c0 1800     		movs	r0, r3
 1730 05c2 FFF7FEFF 		bl	RTC_GetMinutes
 1731 05c6 0200     		movs	r2, r0
 1732 05c8 074B     		ldr	r3, .L58+8
 1733 05ca 1A60     		str	r2, [r3]
 301:main.c        ****     
 302:main.c        ****     done = 1;
 1734              		.loc 2 302 0
 1735 05cc 074B     		ldr	r3, .L58+12
 1736 05ce 0122     		movs	r2, #1
 1737 05d0 1A60     		str	r2, [r3]
 303:main.c        ****     
 304:main.c        ****     wdt_callback();
 1738              		.loc 2 304 0
 1739 05d2 FFF7FEFF 		bl	wdt_callback
 305:main.c        **** }
 1740              		.loc 2 305 0
 1741 05d6 C046     		nop
 1742 05d8 BD46     		mov	sp, r7
 1743 05da 0CB0     		add	sp, sp, #48
 1744              		@ sp needed
 1745 05dc 80BD     		pop	{r7, pc}
 1746              	.L59:
 1747 05de C046     		.align	2
 1748              	.L58:
 1749 05e0 00000000 		.word	digits
 1750 05e4 00000000 		.word	time
 1751 05e8 00000000 		.word	minutes
 1752 05ec 00000000 		.word	done
 1753              		.cfi_endproc
 1754              	.LFE65:
 1755              		.size	cathode_antidote, .-cathode_antidote
 1756              		.section	.text.set_time,"ax",%progbits
 1757              		.align	2
 1758              		.global	set_time
 1759              		.code	16
 1760              		.thumb_func
 1761              		.type	set_time, %function
 1762              	set_time:
 1763              	.LFB66:
 306:main.c        **** 
 307:main.c        **** void set_time(){
 1764              		.loc 2 307 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 1, uses_anonymous_args = 0
 1768 0000 80B5     		push	{r7, lr}
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 7, -8
 1771              		.cfi_offset 14, -4
 1772 0002 00AF     		add	r7, sp, #0
 1773              		.cfi_def_cfa_register 7
 308:main.c        ****     CyGlobalIntDisable;
 1774              		.loc 2 308 0
 1775              		.syntax divided
 1776              	@ 308 "main.c" 1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 52


 1777 0004 72B6     		CPSID   i
 1778              	@ 0 "" 2
 309:main.c        ****     
 310:main.c        ****     while(PB_Read());
 1779              		.loc 2 310 0
 1780              		.thumb
 1781              		.syntax unified
 1782 0006 C046     		nop
 1783              	.L61:
 1784              		.loc 2 310 0 is_stmt 0 discriminator 1
 1785 0008 FFF7FEFF 		bl	PB_Read
 1786 000c 031E     		subs	r3, r0, #0
 1787 000e FBD1     		bne	.L61
 311:main.c        ****     
 312:main.c        ****     start = Timer_ReadCounter();    // when the button is pressed, read the "start" of the timer
 1788              		.loc 2 312 0 is_stmt 1
 1789 0010 FFF7FEFF 		bl	Timer_ReadCounter
 1790 0014 0300     		movs	r3, r0
 1791 0016 1A00     		movs	r2, r3
 1792 0018 1B4B     		ldr	r3, .L66
 1793 001a 1A60     		str	r2, [r3]
 313:main.c        ****         
 314:main.c        ****     while(!PB_Read());              // when the button is released read the "end" of the timer
 1794              		.loc 2 314 0
 1795 001c C046     		nop
 1796              	.L62:
 1797              		.loc 2 314 0 is_stmt 0 discriminator 1
 1798 001e FFF7FEFF 		bl	PB_Read
 1799 0022 031E     		subs	r3, r0, #0
 1800 0024 FBD0     		beq	.L62
 315:main.c        ****     end = Timer_ReadCounter();
 1801              		.loc 2 315 0 is_stmt 1
 1802 0026 FFF7FEFF 		bl	Timer_ReadCounter
 1803 002a 0300     		movs	r3, r0
 1804 002c 1A00     		movs	r2, r3
 1805 002e 174B     		ldr	r3, .L66+4
 1806 0030 1A60     		str	r2, [r3]
 316:main.c        ****     
 317:main.c        ****     if(((start - end) <= 30000000) && !hours_locked){      // short press
 318:main.c        **** //        set_hours();        
 319:main.c        ****     }
 320:main.c        ****     
 321:main.c        ****     if((start - end) > 30000000){
 322:main.c        ****     }
 323:main.c        ****     if(((start - end) <= 30000000) && hours_locked){
 1807              		.loc 2 323 0
 1808 0032 154B     		ldr	r3, .L66
 1809 0034 1A68     		ldr	r2, [r3]
 1810 0036 154B     		ldr	r3, .L66+4
 1811 0038 1B68     		ldr	r3, [r3]
 1812 003a D31A     		subs	r3, r2, r3
 1813 003c 144A     		ldr	r2, .L66+8
 1814 003e 9342     		cmp	r3, r2
 1815 0040 1EDC     		bgt	.L65
 1816              		.loc 2 323 0 is_stmt 0 discriminator 1
 1817 0042 144B     		ldr	r3, .L66+12
 1818 0044 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 53


 1819 0046 002B     		cmp	r3, #0
 1820 0048 1AD0     		beq	.L65
 324:main.c        ****             minutes++;
 1821              		.loc 2 324 0 is_stmt 1
 1822 004a 134B     		ldr	r3, .L66+16
 1823 004c 1B68     		ldr	r3, [r3]
 1824 004e 5A1C     		adds	r2, r3, #1
 1825 0050 114B     		ldr	r3, .L66+16
 1826 0052 1A60     		str	r2, [r3]
 325:main.c        ****             nixie_write(0,minutes/10);
 1827              		.loc 2 325 0
 1828 0054 104B     		ldr	r3, .L66+16
 1829 0056 1B68     		ldr	r3, [r3]
 1830 0058 0A21     		movs	r1, #10
 1831 005a 1800     		movs	r0, r3
 1832 005c FFF7FEFF 		bl	__aeabi_uidiv
 1833 0060 0300     		movs	r3, r0
 1834 0062 1900     		movs	r1, r3
 1835 0064 0020     		movs	r0, #0
 1836 0066 FFF7FEFF 		bl	nixie_write
 326:main.c        ****             nixie_write(1,minutes%10);
 1837              		.loc 2 326 0
 1838 006a 0B4B     		ldr	r3, .L66+16
 1839 006c 1B68     		ldr	r3, [r3]
 1840 006e 0A21     		movs	r1, #10
 1841 0070 1800     		movs	r0, r3
 1842 0072 FFF7FEFF 		bl	__aeabi_uidivmod
 1843 0076 0B00     		movs	r3, r1
 1844 0078 1900     		movs	r1, r3
 1845 007a 0120     		movs	r0, #1
 1846 007c FFF7FEFF 		bl	nixie_write
 1847              	.L65:
 327:main.c        ****         }
 328:main.c        ****     
 329:main.c        **** 
 330:main.c        ****         
 331:main.c        **** }
 1848              		.loc 2 331 0
 1849 0080 C046     		nop
 1850 0082 BD46     		mov	sp, r7
 1851              		@ sp needed
 1852 0084 80BD     		pop	{r7, pc}
 1853              	.L67:
 1854 0086 C046     		.align	2
 1855              	.L66:
 1856 0088 00000000 		.word	start
 1857 008c 00000000 		.word	end
 1858 0090 80C3C901 		.word	30000000
 1859 0094 00000000 		.word	hours_locked
 1860 0098 00000000 		.word	minutes
 1861              		.cfi_endproc
 1862              	.LFE66:
 1863              		.size	set_time, .-set_time
 1864              		.section	.text.set_date,"ax",%progbits
 1865              		.align	2
 1866              		.global	set_date
 1867              		.code	16
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 54


 1868              		.thumb_func
 1869              		.type	set_date, %function
 1870              	set_date:
 1871              	.LFB67:
 332:main.c        **** 
 333:main.c        **** void set_date(){
 1872              		.loc 2 333 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 1, uses_anonymous_args = 0
 1876 0000 80B5     		push	{r7, lr}
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880 0002 00AF     		add	r7, sp, #0
 1881              		.cfi_def_cfa_register 7
 334:main.c        ****     
 335:main.c        ****     A_Write(digits[3][3]);
 1882              		.loc 2 335 0
 1883 0004 0D4B     		ldr	r3, .L69
 1884 0006 DB6B     		ldr	r3, [r3, #60]
 1885 0008 DBB2     		uxtb	r3, r3
 1886 000a 1800     		movs	r0, r3
 1887 000c FFF7FEFF 		bl	A_Write
 336:main.c        ****     B_Write(digits[3][2]);
 1888              		.loc 2 336 0
 1889 0010 0A4B     		ldr	r3, .L69
 1890 0012 9B6B     		ldr	r3, [r3, #56]
 1891 0014 DBB2     		uxtb	r3, r3
 1892 0016 1800     		movs	r0, r3
 1893 0018 FFF7FEFF 		bl	B_Write
 337:main.c        ****     C_Write(digits[3][1]);
 1894              		.loc 2 337 0
 1895 001c 074B     		ldr	r3, .L69
 1896 001e 5B6B     		ldr	r3, [r3, #52]
 1897 0020 DBB2     		uxtb	r3, r3
 1898 0022 1800     		movs	r0, r3
 1899 0024 FFF7FEFF 		bl	C_Write
 338:main.c        ****     D_Write(digits[3][0]);
 1900              		.loc 2 338 0
 1901 0028 044B     		ldr	r3, .L69
 1902 002a 1B6B     		ldr	r3, [r3, #48]
 1903 002c DBB2     		uxtb	r3, r3
 1904 002e 1800     		movs	r0, r3
 1905 0030 FFF7FEFF 		bl	D_Write
 339:main.c        **** }
 1906              		.loc 2 339 0
 1907 0034 C046     		nop
 1908 0036 BD46     		mov	sp, r7
 1909              		@ sp needed
 1910 0038 80BD     		pop	{r7, pc}
 1911              	.L70:
 1912 003a C046     		.align	2
 1913              	.L69:
 1914 003c 00000000 		.word	digits
 1915              		.cfi_endproc
 1916              	.LFE67:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 55


 1917              		.size	set_date, .-set_date
 1918              		.section	.text.main,"ax",%progbits
 1919              		.align	2
 1920              		.global	main
 1921              		.code	16
 1922              		.thumb_func
 1923              		.type	main, %function
 1924              	main:
 1925              	.LFB68:
 340:main.c        **** 
 341:main.c        **** int main() {
 1926              		.loc 2 341 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 1, uses_anonymous_args = 0
 1930 0000 80B5     		push	{r7, lr}
 1931              		.cfi_def_cfa_offset 8
 1932              		.cfi_offset 7, -8
 1933              		.cfi_offset 14, -4
 1934 0002 00AF     		add	r7, sp, #0
 1935              		.cfi_def_cfa_register 7
 342:main.c        ****    
 343:main.c        ****     /*
 344:main.c        ****     while(1) {
 345:main.c        ****         PWM_Start();    
 346:main.c        ****         CyDelay(500);
 347:main.c        ****         PWM_Stop();
 348:main.c        ****         CyDelay(500);
 349:main.c        ****     }
 350:main.c        ****     */ 
 351:main.c        ****     
 352:main.c        ****     Pin_2_Write(0);
 1936              		.loc 2 352 0
 1937 0004 0020     		movs	r0, #0
 1938 0006 FFF7FEFF 		bl	Pin_2_Write
 353:main.c        ****     
 354:main.c        ****     // setting up the real time clock
 355:main.c        ****     RTC_Start();
 1939              		.loc 2 355 0
 1940 000a FFF7FEFF 		bl	RTC_Start
 356:main.c        ****     RTC_SetDateAndTime(0x125945,0x12042022);    // setting the time (0xHHMMSS) and date (0xDDMMYYYY
 1941              		.loc 2 356 0
 1942 000e 574A     		ldr	r2, .L78
 1943 0010 574B     		ldr	r3, .L78+4
 1944 0012 1100     		movs	r1, r2
 1945 0014 1800     		movs	r0, r3
 1946 0016 FFF7FEFF 		bl	RTC_SetDateAndTime
 357:main.c        ****     
 358:main.c        ****     // setting up global interrupts 
 359:main.c        ****     CyGlobalIntEnable;
 1947              		.loc 2 359 0
 1948              		.syntax divided
 1949              	@ 359 "main.c" 1
 1950 001a 62B6     		CPSIE   i
 1951              	@ 0 "" 2
 360:main.c        ****     CySysWdtSetInterruptCallback(0, wdt_callback);  // Watch dog timer interrupt callback
 1952              		.loc 2 360 0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 56


 1953              		.thumb
 1954              		.syntax unified
 1955 001c 554B     		ldr	r3, .L78+8
 1956 001e 1900     		movs	r1, r3
 1957 0020 0020     		movs	r0, #0
 1958 0022 FFF7FEFF 		bl	CySysWdtSetInterruptCallback
 361:main.c        ****     
 362:main.c        ****     Timer_Start();
 1959              		.loc 2 362 0
 1960 0026 FFF7FEFF 		bl	Timer_Start
 1961              	.L77:
 363:main.c        ****     
 364:main.c        ****     while(1){
 365:main.c        **** 
 366:main.c        ****         while(PB_Read());   // while the button is not pressed, loop
 1962              		.loc 2 366 0 discriminator 1
 1963 002a C046     		nop
 1964              	.L72:
 1965 002c FFF7FEFF 		bl	PB_Read
 1966 0030 031E     		subs	r3, r0, #0
 1967 0032 FBD1     		bne	.L72
 367:main.c        ****         
 368:main.c        ****         start = Timer_ReadCounter();    // when the button is pressed, read the "start" of the time
 1968              		.loc 2 368 0
 1969 0034 FFF7FEFF 		bl	Timer_ReadCounter
 1970 0038 0300     		movs	r3, r0
 1971 003a 1A00     		movs	r2, r3
 1972 003c 4E4B     		ldr	r3, .L78+12
 1973 003e 1A60     		str	r2, [r3]
 369:main.c        ****         
 370:main.c        ****         while(!PB_Read());              // when the button is released read the "end" of the timer
 1974              		.loc 2 370 0
 1975 0040 C046     		nop
 1976              	.L73:
 1977              		.loc 2 370 0 is_stmt 0 discriminator 1
 1978 0042 FFF7FEFF 		bl	PB_Read
 1979 0046 031E     		subs	r3, r0, #0
 1980 0048 FBD0     		beq	.L73
 371:main.c        ****         end = Timer_ReadCounter();
 1981              		.loc 2 371 0 is_stmt 1
 1982 004a FFF7FEFF 		bl	Timer_ReadCounter
 1983 004e 0300     		movs	r3, r0
 1984 0050 1A00     		movs	r2, r3
 1985 0052 4A4B     		ldr	r3, .L78+16
 1986 0054 1A60     		str	r2, [r3]
 372:main.c        ****         
 373:main.c        ****         if((start - end) <= 30000000){      // short press
 1987              		.loc 2 373 0
 1988 0056 484B     		ldr	r3, .L78+12
 1989 0058 1A68     		ldr	r2, [r3]
 1990 005a 484B     		ldr	r3, .L78+16
 1991 005c 1B68     		ldr	r3, [r3]
 1992 005e D31A     		subs	r3, r2, r3
 1993 0060 474A     		ldr	r2, .L78+20
 1994 0062 9342     		cmp	r3, r2
 1995 0064 6EDC     		bgt	.L74
 374:main.c        ****             display_mode = ~display_mode;
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 57


 1996              		.loc 2 374 0
 1997 0066 474B     		ldr	r3, .L78+24
 1998 0068 1B68     		ldr	r3, [r3]
 1999 006a DA43     		mvns	r2, r3
 2000 006c 454B     		ldr	r3, .L78+24
 2001 006e 1A60     		str	r2, [r3]
 375:main.c        **** 
 376:main.c        ****             if(display_mode){   // if we are on the date mode
 2002              		.loc 2 376 0
 2003 0070 444B     		ldr	r3, .L78+24
 2004 0072 1B68     		ldr	r3, [r3]
 2005 0074 002B     		cmp	r3, #0
 2006 0076 65D0     		beq	.L74
 377:main.c        ****                 date = RTC_GetDate();
 2007              		.loc 2 377 0
 2008 0078 FFF7FEFF 		bl	RTC_GetDate
 2009 007c 0200     		movs	r2, r0
 2010 007e 424B     		ldr	r3, .L78+28
 2011 0080 1A60     		str	r2, [r3]
 378:main.c        **** 
 379:main.c        ****                 day = RTC_GetDay(date);
 2012              		.loc 2 379 0
 2013 0082 414B     		ldr	r3, .L78+28
 2014 0084 1B68     		ldr	r3, [r3]
 2015 0086 1800     		movs	r0, r3
 2016 0088 FFF7FEFF 		bl	RTC_GetDay
 2017 008c 0200     		movs	r2, r0
 2018 008e 3F4B     		ldr	r3, .L78+32
 2019 0090 1A60     		str	r2, [r3]
 380:main.c        ****                 month = RTC_GetMonth(date);
 2020              		.loc 2 380 0
 2021 0092 3D4B     		ldr	r3, .L78+28
 2022 0094 1B68     		ldr	r3, [r3]
 2023 0096 1800     		movs	r0, r3
 2024 0098 FFF7FEFF 		bl	RTC_GetMonth
 2025 009c 0200     		movs	r2, r0
 2026 009e 3C4B     		ldr	r3, .L78+36
 2027 00a0 1A60     		str	r2, [r3]
 381:main.c        ****                 year = RTC_GetYear(date);
 2028              		.loc 2 381 0
 2029 00a2 394B     		ldr	r3, .L78+28
 2030 00a4 1B68     		ldr	r3, [r3]
 2031 00a6 1800     		movs	r0, r3
 2032 00a8 FFF7FEFF 		bl	RTC_GetYear
 2033 00ac 0200     		movs	r2, r0
 2034 00ae 394B     		ldr	r3, .L78+40
 2035 00b0 1A60     		str	r2, [r3]
 382:main.c        **** 
 383:main.c        ****                 nixie_write(0,day/10);
 2036              		.loc 2 383 0
 2037 00b2 364B     		ldr	r3, .L78+32
 2038 00b4 1B68     		ldr	r3, [r3]
 2039 00b6 0A21     		movs	r1, #10
 2040 00b8 1800     		movs	r0, r3
 2041 00ba FFF7FEFF 		bl	__aeabi_uidiv
 2042 00be 0300     		movs	r3, r0
 2043 00c0 1900     		movs	r1, r3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 58


 2044 00c2 0020     		movs	r0, #0
 2045 00c4 FFF7FEFF 		bl	nixie_write
 384:main.c        ****                 nixie_write(1,day%10);
 2046              		.loc 2 384 0
 2047 00c8 304B     		ldr	r3, .L78+32
 2048 00ca 1B68     		ldr	r3, [r3]
 2049 00cc 0A21     		movs	r1, #10
 2050 00ce 1800     		movs	r0, r3
 2051 00d0 FFF7FEFF 		bl	__aeabi_uidivmod
 2052 00d4 0B00     		movs	r3, r1
 2053 00d6 1900     		movs	r1, r3
 2054 00d8 0120     		movs	r0, #1
 2055 00da FFF7FEFF 		bl	nixie_write
 385:main.c        ****                 
 386:main.c        ****                 nixie_write(2,month/10);
 2056              		.loc 2 386 0
 2057 00de 2C4B     		ldr	r3, .L78+36
 2058 00e0 1B68     		ldr	r3, [r3]
 2059 00e2 0A21     		movs	r1, #10
 2060 00e4 1800     		movs	r0, r3
 2061 00e6 FFF7FEFF 		bl	__aeabi_uidiv
 2062 00ea 0300     		movs	r3, r0
 2063 00ec 1900     		movs	r1, r3
 2064 00ee 0220     		movs	r0, #2
 2065 00f0 FFF7FEFF 		bl	nixie_write
 387:main.c        ****                 nixie_write(3,month%10);
 2066              		.loc 2 387 0
 2067 00f4 264B     		ldr	r3, .L78+36
 2068 00f6 1B68     		ldr	r3, [r3]
 2069 00f8 0A21     		movs	r1, #10
 2070 00fa 1800     		movs	r0, r3
 2071 00fc FFF7FEFF 		bl	__aeabi_uidivmod
 2072 0100 0B00     		movs	r3, r1
 2073 0102 1900     		movs	r1, r3
 2074 0104 0320     		movs	r0, #3
 2075 0106 FFF7FEFF 		bl	nixie_write
 388:main.c        ****                 
 389:main.c        ****                 nixie_write(4,(year%100)/10);
 2076              		.loc 2 389 0
 2077 010a 224B     		ldr	r3, .L78+40
 2078 010c 1B68     		ldr	r3, [r3]
 2079 010e 6421     		movs	r1, #100
 2080 0110 1800     		movs	r0, r3
 2081 0112 FFF7FEFF 		bl	__aeabi_uidivmod
 2082 0116 0B00     		movs	r3, r1
 2083 0118 0A21     		movs	r1, #10
 2084 011a 1800     		movs	r0, r3
 2085 011c FFF7FEFF 		bl	__aeabi_uidiv
 2086 0120 0300     		movs	r3, r0
 2087 0122 1900     		movs	r1, r3
 2088 0124 0420     		movs	r0, #4
 2089 0126 FFF7FEFF 		bl	nixie_write
 390:main.c        ****                 nixie_write(5,year%10);
 2090              		.loc 2 390 0
 2091 012a 1A4B     		ldr	r3, .L78+40
 2092 012c 1B68     		ldr	r3, [r3]
 2093 012e 0A21     		movs	r1, #10
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 59


 2094 0130 1800     		movs	r0, r3
 2095 0132 FFF7FEFF 		bl	__aeabi_uidivmod
 2096 0136 0B00     		movs	r3, r1
 2097 0138 1900     		movs	r1, r3
 2098 013a 0520     		movs	r0, #5
 2099 013c FFF7FEFF 		bl	nixie_write
 391:main.c        ****                 
 392:main.c        ****                 RTC_Update();
 2100              		.loc 2 392 0
 2101 0140 FFF7FEFF 		bl	RTC_Update
 2102              	.L74:
 393:main.c        ****             }
 394:main.c        ****         }
 395:main.c        ****         
 396:main.c        ****         if((start - end) > 30000000){       // long press
 2103              		.loc 2 396 0
 2104 0144 0C4B     		ldr	r3, .L78+12
 2105 0146 1A68     		ldr	r2, [r3]
 2106 0148 0C4B     		ldr	r3, .L78+16
 2107 014a 1B68     		ldr	r3, [r3]
 2108 014c D31A     		subs	r3, r2, r3
 2109 014e 0C4A     		ldr	r2, .L78+20
 2110 0150 9342     		cmp	r3, r2
 2111 0152 00DC     		bgt	.LCB1728
 2112 0154 69E7     		b	.L77	@long jump
 2113              	.LCB1728:
 397:main.c        ****             if(!display_mode) { // if on time mode when theres a long press, set the time
 2114              		.loc 2 397 0
 2115 0156 0B4B     		ldr	r3, .L78+24
 2116 0158 1B68     		ldr	r3, [r3]
 2117 015a 002B     		cmp	r3, #0
 2118 015c 02D1     		bne	.L76
 398:main.c        ****                 set_time();
 2119              		.loc 2 398 0
 2120 015e FFF7FEFF 		bl	set_time
 2121 0162 62E7     		b	.L77
 2122              	.L76:
 399:main.c        ****             }
 400:main.c        ****             else {              // if on date mode when theres a long press, set the date
 401:main.c        ****                 set_date();
 2123              		.loc 2 401 0
 2124 0164 FFF7FEFF 		bl	set_date
 402:main.c        ****             }
 403:main.c        ****         }
 404:main.c        ****     }
 2125              		.loc 2 404 0
 2126 0168 5FE7     		b	.L77
 2127              	.L79:
 2128 016a C046     		.align	2
 2129              	.L78:
 2130 016c 22200412 		.word	302260258
 2131 0170 45591200 		.word	1202501
 2132 0174 00000000 		.word	wdt_callback
 2133 0178 00000000 		.word	start
 2134 017c 00000000 		.word	end
 2135 0180 80C3C901 		.word	30000000
 2136 0184 00000000 		.word	display_mode
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 60


 2137 0188 00000000 		.word	date
 2138 018c 00000000 		.word	day
 2139 0190 00000000 		.word	month
 2140 0194 00000000 		.word	year
 2141              		.cfi_endproc
 2142              	.LFE68:
 2143              		.size	main, .-main
 2144              		.text
 2145              	.Letext0:
 2146              		.file 3 "Generated_Source\\PSoC4/cytypes.h"
 2147              		.section	.debug_info,"",%progbits
 2148              	.Ldebug_info0:
 2149 0000 F9040000 		.4byte	0x4f9
 2150 0004 0400     		.2byte	0x4
 2151 0006 00000000 		.4byte	.Ldebug_abbrev0
 2152 000a 04       		.byte	0x4
 2153 000b 01       		.uleb128 0x1
 2154 000c 91000000 		.4byte	.LASF43
 2155 0010 0C       		.byte	0xc
 2156 0011 BD010000 		.4byte	.LASF44
 2157 0015 52020000 		.4byte	.LASF45
 2158 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2159 001d 00000000 		.4byte	0
 2160 0021 00000000 		.4byte	.Ldebug_line0
 2161 0025 02       		.uleb128 0x2
 2162 0026 01       		.byte	0x1
 2163 0027 06       		.byte	0x6
 2164 0028 39020000 		.4byte	.LASF0
 2165 002c 02       		.uleb128 0x2
 2166 002d 01       		.byte	0x1
 2167 002e 08       		.byte	0x8
 2168 002f 3F010000 		.4byte	.LASF1
 2169 0033 02       		.uleb128 0x2
 2170 0034 02       		.byte	0x2
 2171 0035 05       		.byte	0x5
 2172 0036 D0010000 		.4byte	.LASF2
 2173 003a 02       		.uleb128 0x2
 2174 003b 02       		.byte	0x2
 2175 003c 07       		.byte	0x7
 2176 003d 25000000 		.4byte	.LASF3
 2177 0041 02       		.uleb128 0x2
 2178 0042 04       		.byte	0x4
 2179 0043 05       		.byte	0x5
 2180 0044 0D020000 		.4byte	.LASF4
 2181 0048 02       		.uleb128 0x2
 2182 0049 04       		.byte	0x4
 2183 004a 07       		.byte	0x7
 2184 004b 76000000 		.4byte	.LASF5
 2185 004f 02       		.uleb128 0x2
 2186 0050 08       		.byte	0x8
 2187 0051 05       		.byte	0x5
 2188 0052 A7010000 		.4byte	.LASF6
 2189 0056 02       		.uleb128 0x2
 2190 0057 08       		.byte	0x8
 2191 0058 07       		.byte	0x7
 2192 0059 66010000 		.4byte	.LASF7
 2193 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 61


 2194 005e 04       		.byte	0x4
 2195 005f 05       		.byte	0x5
 2196 0060 696E7400 		.ascii	"int\000"
 2197 0064 02       		.uleb128 0x2
 2198 0065 04       		.byte	0x4
 2199 0066 07       		.byte	0x7
 2200 0067 4D010000 		.4byte	.LASF8
 2201 006b 04       		.uleb128 0x4
 2202 006c 31010000 		.4byte	.LASF9
 2203 0070 03       		.byte	0x3
 2204 0071 E501     		.2byte	0x1e5
 2205 0073 3A000000 		.4byte	0x3a
 2206 0077 04       		.uleb128 0x4
 2207 0078 38010000 		.4byte	.LASF10
 2208 007c 03       		.byte	0x3
 2209 007d E601     		.2byte	0x1e6
 2210 007f 48000000 		.4byte	0x48
 2211 0083 02       		.uleb128 0x2
 2212 0084 04       		.byte	0x4
 2213 0085 04       		.byte	0x4
 2214 0086 45000000 		.4byte	.LASF11
 2215 008a 02       		.uleb128 0x2
 2216 008b 08       		.byte	0x8
 2217 008c 04       		.byte	0x4
 2218 008d 25010000 		.4byte	.LASF12
 2219 0091 02       		.uleb128 0x2
 2220 0092 01       		.byte	0x1
 2221 0093 08       		.byte	0x8
 2222 0094 C4010000 		.4byte	.LASF13
 2223 0098 02       		.uleb128 0x2
 2224 0099 08       		.byte	0x8
 2225 009a 04       		.byte	0x4
 2226 009b 2D020000 		.4byte	.LASF14
 2227 009f 02       		.uleb128 0x2
 2228 00a0 04       		.byte	0x4
 2229 00a1 07       		.byte	0x7
 2230 00a2 9E010000 		.4byte	.LASF15
 2231 00a6 05       		.uleb128 0x5
 2232 00a7 DA010000 		.4byte	.LASF16
 2233 00ab 01       		.byte	0x1
 2234 00ac 8902     		.2byte	0x289
 2235 00ae 77000000 		.4byte	0x77
 2236 00b2 00000000 		.4byte	.LFB3
 2237 00b6 30000000 		.4byte	.LFE3-.LFB3
 2238 00ba 01       		.uleb128 0x1
 2239 00bb 9C       		.byte	0x9c
 2240 00bc DF000000 		.4byte	0xdf
 2241 00c0 06       		.uleb128 0x6
 2242 00c1 6C000000 		.4byte	.LASF18
 2243 00c5 01       		.byte	0x1
 2244 00c6 8902     		.2byte	0x289
 2245 00c8 77000000 		.4byte	0x77
 2246 00cc 02       		.uleb128 0x2
 2247 00cd 91       		.byte	0x91
 2248 00ce 6C       		.sleb128 -20
 2249 00cf 07       		.uleb128 0x7
 2250 00d0 3E000000 		.4byte	.LASF19
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 62


 2251 00d4 01       		.byte	0x1
 2252 00d5 8B02     		.2byte	0x28b
 2253 00d7 77000000 		.4byte	0x77
 2254 00db 02       		.uleb128 0x2
 2255 00dc 91       		.byte	0x91
 2256 00dd 74       		.sleb128 -12
 2257 00de 00       		.byte	0
 2258 00df 05       		.uleb128 0x5
 2259 00e0 8A010000 		.4byte	.LASF17
 2260 00e4 01       		.byte	0x1
 2261 00e5 A202     		.2byte	0x2a2
 2262 00e7 77000000 		.4byte	0x77
 2263 00eb 00000000 		.4byte	.LFB4
 2264 00ef 32000000 		.4byte	.LFE4-.LFB4
 2265 00f3 01       		.uleb128 0x1
 2266 00f4 9C       		.byte	0x9c
 2267 00f5 18010000 		.4byte	0x118
 2268 00f9 06       		.uleb128 0x6
 2269 00fa 6C000000 		.4byte	.LASF18
 2270 00fe 01       		.byte	0x1
 2271 00ff A202     		.2byte	0x2a2
 2272 0101 77000000 		.4byte	0x77
 2273 0105 02       		.uleb128 0x2
 2274 0106 91       		.byte	0x91
 2275 0107 6C       		.sleb128 -20
 2276 0108 07       		.uleb128 0x7
 2277 0109 3E000000 		.4byte	.LASF19
 2278 010d 01       		.byte	0x1
 2279 010e A402     		.2byte	0x2a4
 2280 0110 77000000 		.4byte	0x77
 2281 0114 02       		.uleb128 0x2
 2282 0115 91       		.byte	0x91
 2283 0116 74       		.sleb128 -12
 2284 0117 00       		.byte	0
 2285 0118 05       		.uleb128 0x5
 2286 0119 97020000 		.4byte	.LASF20
 2287 011d 01       		.byte	0x1
 2288 011e BA02     		.2byte	0x2ba
 2289 0120 77000000 		.4byte	0x77
 2290 0124 00000000 		.4byte	.LFB5
 2291 0128 32000000 		.4byte	.LFE5-.LFB5
 2292 012c 01       		.uleb128 0x1
 2293 012d 9C       		.byte	0x9c
 2294 012e 51010000 		.4byte	0x151
 2295 0132 06       		.uleb128 0x6
 2296 0133 6C000000 		.4byte	.LASF18
 2297 0137 01       		.byte	0x1
 2298 0138 BA02     		.2byte	0x2ba
 2299 013a 77000000 		.4byte	0x77
 2300 013e 02       		.uleb128 0x2
 2301 013f 91       		.byte	0x91
 2302 0140 6C       		.sleb128 -20
 2303 0141 07       		.uleb128 0x7
 2304 0142 3E000000 		.4byte	.LASF19
 2305 0146 01       		.byte	0x1
 2306 0147 BC02     		.2byte	0x2bc
 2307 0149 77000000 		.4byte	0x77
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 63


 2308 014d 02       		.uleb128 0x2
 2309 014e 91       		.byte	0x91
 2310 014f 74       		.sleb128 -12
 2311 0150 00       		.byte	0
 2312 0151 05       		.uleb128 0x5
 2313 0152 F9010000 		.4byte	.LASF21
 2314 0156 01       		.byte	0x1
 2315 0157 E502     		.2byte	0x2e5
 2316 0159 77000000 		.4byte	0x77
 2317 015d 00000000 		.4byte	.LFB7
 2318 0161 32000000 		.4byte	.LFE7-.LFB7
 2319 0165 01       		.uleb128 0x1
 2320 0166 9C       		.byte	0x9c
 2321 0167 8A010000 		.4byte	0x18a
 2322 016b 06       		.uleb128 0x6
 2323 016c 4B000000 		.4byte	.LASF22
 2324 0170 01       		.byte	0x1
 2325 0171 E502     		.2byte	0x2e5
 2326 0173 77000000 		.4byte	0x77
 2327 0177 02       		.uleb128 0x2
 2328 0178 91       		.byte	0x91
 2329 0179 6C       		.sleb128 -20
 2330 017a 07       		.uleb128 0x7
 2331 017b 3E000000 		.4byte	.LASF19
 2332 017f 01       		.byte	0x1
 2333 0180 E702     		.2byte	0x2e7
 2334 0182 77000000 		.4byte	0x77
 2335 0186 02       		.uleb128 0x2
 2336 0187 91       		.byte	0x91
 2337 0188 74       		.sleb128 -12
 2338 0189 00       		.byte	0
 2339 018a 05       		.uleb128 0x5
 2340 018b 45020000 		.4byte	.LASF23
 2341 018f 01       		.byte	0x1
 2342 0190 FD02     		.2byte	0x2fd
 2343 0192 77000000 		.4byte	0x77
 2344 0196 00000000 		.4byte	.LFB8
 2345 019a 32000000 		.4byte	.LFE8-.LFB8
 2346 019e 01       		.uleb128 0x1
 2347 019f 9C       		.byte	0x9c
 2348 01a0 C3010000 		.4byte	0x1c3
 2349 01a4 06       		.uleb128 0x6
 2350 01a5 4B000000 		.4byte	.LASF22
 2351 01a9 01       		.byte	0x1
 2352 01aa FD02     		.2byte	0x2fd
 2353 01ac 77000000 		.4byte	0x77
 2354 01b0 02       		.uleb128 0x2
 2355 01b1 91       		.byte	0x91
 2356 01b2 6C       		.sleb128 -20
 2357 01b3 07       		.uleb128 0x7
 2358 01b4 3E000000 		.4byte	.LASF19
 2359 01b8 01       		.byte	0x1
 2360 01b9 FF02     		.2byte	0x2ff
 2361 01bb 77000000 		.4byte	0x77
 2362 01bf 02       		.uleb128 0x2
 2363 01c0 91       		.byte	0x91
 2364 01c1 74       		.sleb128 -12
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 64


 2365 01c2 00       		.byte	0
 2366 01c3 05       		.uleb128 0x5
 2367 01c4 5A010000 		.4byte	.LASF24
 2368 01c8 01       		.byte	0x1
 2369 01c9 1503     		.2byte	0x315
 2370 01cb 77000000 		.4byte	0x77
 2371 01cf 00000000 		.4byte	.LFB9
 2372 01d3 58000000 		.4byte	.LFE9-.LFB9
 2373 01d7 01       		.uleb128 0x1
 2374 01d8 9C       		.byte	0x9c
 2375 01d9 FC010000 		.4byte	0x1fc
 2376 01dd 06       		.uleb128 0x6
 2377 01de 4B000000 		.4byte	.LASF22
 2378 01e2 01       		.byte	0x1
 2379 01e3 1503     		.2byte	0x315
 2380 01e5 77000000 		.4byte	0x77
 2381 01e9 02       		.uleb128 0x2
 2382 01ea 91       		.byte	0x91
 2383 01eb 6C       		.sleb128 -20
 2384 01ec 07       		.uleb128 0x7
 2385 01ed 3E000000 		.4byte	.LASF19
 2386 01f1 01       		.byte	0x1
 2387 01f2 1703     		.2byte	0x317
 2388 01f4 77000000 		.4byte	0x77
 2389 01f8 02       		.uleb128 0x2
 2390 01f9 91       		.byte	0x91
 2391 01fa 74       		.sleb128 -12
 2392 01fb 00       		.byte	0
 2393 01fc 08       		.uleb128 0x8
 2394 01fd A4020000 		.4byte	.LASF46
 2395 0201 02       		.byte	0x2
 2396 0202 26       		.byte	0x26
 2397 0203 00000000 		.4byte	.LFB63
 2398 0207 04020000 		.4byte	.LFE63-.LFB63
 2399 020b 01       		.uleb128 0x1
 2400 020c 9C       		.byte	0x9c
 2401 020d 2C020000 		.4byte	0x22c
 2402 0211 09       		.uleb128 0x9
 2403 0212 08000000 		.4byte	.LASF25
 2404 0216 02       		.byte	0x2
 2405 0217 26       		.byte	0x26
 2406 0218 5D000000 		.4byte	0x5d
 2407 021c 02       		.uleb128 0x2
 2408 021d 91       		.byte	0x91
 2409 021e 74       		.sleb128 -12
 2410 021f 0A       		.uleb128 0xa
 2411 0220 6900     		.ascii	"i\000"
 2412 0222 02       		.byte	0x2
 2413 0223 26       		.byte	0x26
 2414 0224 5D000000 		.4byte	0x5d
 2415 0228 02       		.uleb128 0x2
 2416 0229 91       		.byte	0x91
 2417 022a 70       		.sleb128 -16
 2418 022b 00       		.byte	0
 2419 022c 0B       		.uleb128 0xb
 2420 022d 7D010000 		.4byte	.LASF28
 2421 0231 02       		.byte	0x2
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 65


 2422 0232 54       		.byte	0x54
 2423 0233 00000000 		.4byte	.LFB64
 2424 0237 10010000 		.4byte	.LFE64-.LFB64
 2425 023b 01       		.uleb128 0x1
 2426 023c 9C       		.byte	0x9c
 2427 023d 0C       		.uleb128 0xc
 2428 023e E8010000 		.4byte	.LASF47
 2429 0242 02       		.byte	0x2
 2430 0243 73       		.byte	0x73
 2431 0244 00000000 		.4byte	.LFB65
 2432 0248 F0050000 		.4byte	.LFE65-.LFB65
 2433 024c 01       		.uleb128 0x1
 2434 024d 9C       		.byte	0x9c
 2435 024e 87030000 		.4byte	0x387
 2436 0252 0D       		.uleb128 0xd
 2437 0253 06000000 		.4byte	.LBB2
 2438 0257 64000000 		.4byte	.LBE2-.LBB2
 2439 025b 6C020000 		.4byte	0x26c
 2440 025f 0E       		.uleb128 0xe
 2441 0260 6E00     		.ascii	"n\000"
 2442 0262 02       		.byte	0x2
 2443 0263 75       		.byte	0x75
 2444 0264 5D000000 		.4byte	0x5d
 2445 0268 02       		.uleb128 0x2
 2446 0269 91       		.byte	0x91
 2447 026a 74       		.sleb128 -12
 2448 026b 00       		.byte	0
 2449 026c 0D       		.uleb128 0xd
 2450 026d 82000000 		.4byte	.LBB3
 2451 0271 64000000 		.4byte	.LBE3-.LBB3
 2452 0275 86020000 		.4byte	0x286
 2453 0279 0E       		.uleb128 0xe
 2454 027a 6D00     		.ascii	"m\000"
 2455 027c 02       		.byte	0x2
 2456 027d 82       		.byte	0x82
 2457 027e 5D000000 		.4byte	0x5d
 2458 0282 02       		.uleb128 0x2
 2459 0283 91       		.byte	0x91
 2460 0284 70       		.sleb128 -16
 2461 0285 00       		.byte	0
 2462 0286 0D       		.uleb128 0xd
 2463 0287 FE000000 		.4byte	.LBB4
 2464 028b 64000000 		.4byte	.LBE4-.LBB4
 2465 028f A0020000 		.4byte	0x2a0
 2466 0293 0E       		.uleb128 0xe
 2467 0294 6C00     		.ascii	"l\000"
 2468 0296 02       		.byte	0x2
 2469 0297 8F       		.byte	0x8f
 2470 0298 5D000000 		.4byte	0x5d
 2471 029c 02       		.uleb128 0x2
 2472 029d 91       		.byte	0x91
 2473 029e 6C       		.sleb128 -20
 2474 029f 00       		.byte	0
 2475 02a0 0D       		.uleb128 0xd
 2476 02a1 7A010000 		.4byte	.LBB5
 2477 02a5 64000000 		.4byte	.LBE5-.LBB5
 2478 02a9 BA020000 		.4byte	0x2ba
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 66


 2479 02ad 0E       		.uleb128 0xe
 2480 02ae 6B00     		.ascii	"k\000"
 2481 02b0 02       		.byte	0x2
 2482 02b1 9C       		.byte	0x9c
 2483 02b2 5D000000 		.4byte	0x5d
 2484 02b6 02       		.uleb128 0x2
 2485 02b7 91       		.byte	0x91
 2486 02b8 68       		.sleb128 -24
 2487 02b9 00       		.byte	0
 2488 02ba 0D       		.uleb128 0xd
 2489 02bb F6010000 		.4byte	.LBB6
 2490 02bf 64000000 		.4byte	.LBE6-.LBB6
 2491 02c3 D4020000 		.4byte	0x2d4
 2492 02c7 0E       		.uleb128 0xe
 2493 02c8 6A00     		.ascii	"j\000"
 2494 02ca 02       		.byte	0x2
 2495 02cb A9       		.byte	0xa9
 2496 02cc 5D000000 		.4byte	0x5d
 2497 02d0 02       		.uleb128 0x2
 2498 02d1 91       		.byte	0x91
 2499 02d2 64       		.sleb128 -28
 2500 02d3 00       		.byte	0
 2501 02d4 0D       		.uleb128 0xd
 2502 02d5 72020000 		.4byte	.LBB7
 2503 02d9 64000000 		.4byte	.LBE7-.LBB7
 2504 02dd EE020000 		.4byte	0x2ee
 2505 02e1 0E       		.uleb128 0xe
 2506 02e2 6900     		.ascii	"i\000"
 2507 02e4 02       		.byte	0x2
 2508 02e5 B6       		.byte	0xb6
 2509 02e6 5D000000 		.4byte	0x5d
 2510 02ea 02       		.uleb128 0x2
 2511 02eb 91       		.byte	0x91
 2512 02ec 60       		.sleb128 -32
 2513 02ed 00       		.byte	0
 2514 02ee 0D       		.uleb128 0xd
 2515 02ef EE020000 		.4byte	.LBB8
 2516 02f3 64000000 		.4byte	.LBE8-.LBB8
 2517 02f7 08030000 		.4byte	0x308
 2518 02fb 0E       		.uleb128 0xe
 2519 02fc 6A00     		.ascii	"j\000"
 2520 02fe 02       		.byte	0x2
 2521 02ff C3       		.byte	0xc3
 2522 0300 5D000000 		.4byte	0x5d
 2523 0304 02       		.uleb128 0x2
 2524 0305 91       		.byte	0x91
 2525 0306 5C       		.sleb128 -36
 2526 0307 00       		.byte	0
 2527 0308 0D       		.uleb128 0xd
 2528 0309 6A030000 		.4byte	.LBB9
 2529 030d 68000000 		.4byte	.LBE9-.LBB9
 2530 0311 22030000 		.4byte	0x322
 2531 0315 0E       		.uleb128 0xe
 2532 0316 6B00     		.ascii	"k\000"
 2533 0318 02       		.byte	0x2
 2534 0319 CF       		.byte	0xcf
 2535 031a 5D000000 		.4byte	0x5d
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 67


 2536 031e 02       		.uleb128 0x2
 2537 031f 91       		.byte	0x91
 2538 0320 58       		.sleb128 -40
 2539 0321 00       		.byte	0
 2540 0322 0D       		.uleb128 0xd
 2541 0323 EA030000 		.4byte	.LBB10
 2542 0327 64000000 		.4byte	.LBE10-.LBB10
 2543 032b 3C030000 		.4byte	0x33c
 2544 032f 0E       		.uleb128 0xe
 2545 0330 6C00     		.ascii	"l\000"
 2546 0332 02       		.byte	0x2
 2547 0333 DB       		.byte	0xdb
 2548 0334 5D000000 		.4byte	0x5d
 2549 0338 02       		.uleb128 0x2
 2550 0339 91       		.byte	0x91
 2551 033a 54       		.sleb128 -44
 2552 033b 00       		.byte	0
 2553 033c 0D       		.uleb128 0xd
 2554 033d 66040000 		.4byte	.LBB11
 2555 0341 64000000 		.4byte	.LBE11-.LBB11
 2556 0345 56030000 		.4byte	0x356
 2557 0349 0E       		.uleb128 0xe
 2558 034a 6D00     		.ascii	"m\000"
 2559 034c 02       		.byte	0x2
 2560 034d E7       		.byte	0xe7
 2561 034e 5D000000 		.4byte	0x5d
 2562 0352 02       		.uleb128 0x2
 2563 0353 91       		.byte	0x91
 2564 0354 50       		.sleb128 -48
 2565 0355 00       		.byte	0
 2566 0356 0D       		.uleb128 0xd
 2567 0357 E2040000 		.4byte	.LBB12
 2568 035b 64000000 		.4byte	.LBE12-.LBB12
 2569 035f 70030000 		.4byte	0x370
 2570 0363 0E       		.uleb128 0xe
 2571 0364 6E00     		.ascii	"n\000"
 2572 0366 02       		.byte	0x2
 2573 0367 F3       		.byte	0xf3
 2574 0368 5D000000 		.4byte	0x5d
 2575 036c 02       		.uleb128 0x2
 2576 036d 91       		.byte	0x91
 2577 036e 4C       		.sleb128 -52
 2578 036f 00       		.byte	0
 2579 0370 0F       		.uleb128 0xf
 2580 0371 5E050000 		.4byte	.LBB13
 2581 0375 54000000 		.4byte	.LBE13-.LBB13
 2582 0379 0E       		.uleb128 0xe
 2583 037a 6900     		.ascii	"i\000"
 2584 037c 02       		.byte	0x2
 2585 037d FF       		.byte	0xff
 2586 037e 5D000000 		.4byte	0x5d
 2587 0382 02       		.uleb128 0x2
 2588 0383 91       		.byte	0x91
 2589 0384 48       		.sleb128 -56
 2590 0385 00       		.byte	0
 2591 0386 00       		.byte	0
 2592 0387 10       		.uleb128 0x10
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 68


 2593 0388 04020000 		.4byte	.LASF26
 2594 038c 02       		.byte	0x2
 2595 038d 3301     		.2byte	0x133
 2596 038f 00000000 		.4byte	.LFB66
 2597 0393 9C000000 		.4byte	.LFE66-.LFB66
 2598 0397 01       		.uleb128 0x1
 2599 0398 9C       		.byte	0x9c
 2600 0399 10       		.uleb128 0x10
 2601 039a 88000000 		.4byte	.LASF27
 2602 039e 02       		.byte	0x2
 2603 039f 4D01     		.2byte	0x14d
 2604 03a1 00000000 		.4byte	.LFB67
 2605 03a5 40000000 		.4byte	.LFE67-.LFB67
 2606 03a9 01       		.uleb128 0x1
 2607 03aa 9C       		.byte	0x9c
 2608 03ab 11       		.uleb128 0x11
 2609 03ac 2C010000 		.4byte	.LASF29
 2610 03b0 02       		.byte	0x2
 2611 03b1 5501     		.2byte	0x155
 2612 03b3 5D000000 		.4byte	0x5d
 2613 03b7 00000000 		.4byte	.LFB68
 2614 03bb 98010000 		.4byte	.LFE68-.LFB68
 2615 03bf 01       		.uleb128 0x1
 2616 03c0 9C       		.byte	0x9c
 2617 03c1 12       		.uleb128 0x12
 2618 03c2 D1030000 		.4byte	0x3d1
 2619 03c6 D1030000 		.4byte	0x3d1
 2620 03ca 13       		.uleb128 0x13
 2621 03cb 9F000000 		.4byte	0x9f
 2622 03cf 0B       		.byte	0xb
 2623 03d0 00       		.byte	0
 2624 03d1 14       		.uleb128 0x14
 2625 03d2 6B000000 		.4byte	0x6b
 2626 03d6 15       		.uleb128 0x15
 2627 03d7 16020000 		.4byte	.LASF30
 2628 03db 01       		.byte	0x1
 2629 03dc E001     		.2byte	0x1e0
 2630 03de E2030000 		.4byte	0x3e2
 2631 03e2 14       		.uleb128 0x14
 2632 03e3 C1030000 		.4byte	0x3c1
 2633 03e7 12       		.uleb128 0x12
 2634 03e8 5D000000 		.4byte	0x5d
 2635 03ec FD030000 		.4byte	0x3fd
 2636 03f0 13       		.uleb128 0x13
 2637 03f1 9F000000 		.4byte	0x9f
 2638 03f5 09       		.byte	0x9
 2639 03f6 13       		.uleb128 0x13
 2640 03f7 9F000000 		.4byte	0x9f
 2641 03fb 03       		.byte	0x3
 2642 03fc 00       		.byte	0
 2643 03fd 16       		.uleb128 0x16
 2644 03fe C9010000 		.4byte	.LASF31
 2645 0402 02       		.byte	0x2
 2646 0403 06       		.byte	0x6
 2647 0404 E7030000 		.4byte	0x3e7
 2648 0408 05       		.uleb128 0x5
 2649 0409 03       		.byte	0x3
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 69


 2650 040a 00000000 		.4byte	digits
 2651 040e 16       		.uleb128 0x16
 2652 040f 99010000 		.4byte	.LASF32
 2653 0413 02       		.byte	0x2
 2654 0414 13       		.byte	0x13
 2655 0415 77000000 		.4byte	0x77
 2656 0419 05       		.uleb128 0x5
 2657 041a 03       		.byte	0x3
 2658 041b 00000000 		.4byte	time
 2659 041f 16       		.uleb128 0x16
 2660 0420 1F010000 		.4byte	.LASF33
 2661 0424 02       		.byte	0x2
 2662 0425 13       		.byte	0x13
 2663 0426 77000000 		.4byte	0x77
 2664 042a 05       		.uleb128 0x5
 2665 042b 03       		.byte	0x3
 2666 042c 00000000 		.4byte	hours
 2667 0430 16       		.uleb128 0x16
 2668 0431 00000000 		.4byte	.LASF34
 2669 0435 02       		.byte	0x2
 2670 0436 13       		.byte	0x13
 2671 0437 77000000 		.4byte	0x77
 2672 043b 05       		.uleb128 0x5
 2673 043c 03       		.byte	0x3
 2674 043d 00000000 		.4byte	minutes
 2675 0441 16       		.uleb128 0x16
 2676 0442 B5010000 		.4byte	.LASF35
 2677 0446 02       		.byte	0x2
 2678 0447 13       		.byte	0x13
 2679 0448 77000000 		.4byte	0x77
 2680 044c 05       		.uleb128 0x5
 2681 044d 03       		.byte	0x3
 2682 044e 00000000 		.4byte	seconds
 2683 0452 16       		.uleb128 0x16
 2684 0453 4B000000 		.4byte	.LASF22
 2685 0457 02       		.byte	0x2
 2686 0458 14       		.byte	0x14
 2687 0459 77000000 		.4byte	0x77
 2688 045d 05       		.uleb128 0x5
 2689 045e 03       		.byte	0x3
 2690 045f 00000000 		.4byte	date
 2691 0463 16       		.uleb128 0x16
 2692 0464 1A000000 		.4byte	.LASF36
 2693 0468 02       		.byte	0x2
 2694 0469 14       		.byte	0x14
 2695 046a 77000000 		.4byte	0x77
 2696 046e 05       		.uleb128 0x5
 2697 046f 03       		.byte	0x3
 2698 0470 00000000 		.4byte	year
 2699 0474 16       		.uleb128 0x16
 2700 0475 38000000 		.4byte	.LASF37
 2701 0479 02       		.byte	0x2
 2702 047a 14       		.byte	0x14
 2703 047b 77000000 		.4byte	0x77
 2704 047f 05       		.uleb128 0x5
 2705 0480 03       		.byte	0x3
 2706 0481 00000000 		.4byte	month
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 70


 2707 0485 17       		.uleb128 0x17
 2708 0486 64617900 		.ascii	"day\000"
 2709 048a 02       		.byte	0x2
 2710 048b 14       		.byte	0x14
 2711 048c 77000000 		.4byte	0x77
 2712 0490 05       		.uleb128 0x5
 2713 0491 03       		.byte	0x3
 2714 0492 00000000 		.4byte	day
 2715 0496 16       		.uleb128 0x16
 2716 0497 50000000 		.4byte	.LASF38
 2717 049b 02       		.byte	0x2
 2718 049c 16       		.byte	0x16
 2719 049d 5D000000 		.4byte	0x5d
 2720 04a1 05       		.uleb128 0x5
 2721 04a2 03       		.byte	0x3
 2722 04a3 00000000 		.4byte	display_mode
 2723 04a7 16       		.uleb128 0x16
 2724 04a8 B0020000 		.4byte	.LASF39
 2725 04ac 02       		.byte	0x2
 2726 04ad 17       		.byte	0x17
 2727 04ae 5D000000 		.4byte	0x5d
 2728 04b2 05       		.uleb128 0x5
 2729 04b3 03       		.byte	0x3
 2730 04b4 00000000 		.4byte	done
 2731 04b8 16       		.uleb128 0x16
 2732 04b9 1F000000 		.4byte	.LASF40
 2733 04bd 02       		.byte	0x2
 2734 04be 18       		.byte	0x18
 2735 04bf 5D000000 		.4byte	0x5d
 2736 04c3 05       		.uleb128 0x5
 2737 04c4 03       		.byte	0x3
 2738 04c5 00000000 		.4byte	start
 2739 04c9 17       		.uleb128 0x17
 2740 04ca 656E6400 		.ascii	"end\000"
 2741 04ce 02       		.byte	0x2
 2742 04cf 18       		.byte	0x18
 2743 04d0 5D000000 		.4byte	0x5d
 2744 04d4 05       		.uleb128 0x5
 2745 04d5 03       		.byte	0x3
 2746 04d6 00000000 		.4byte	end
 2747 04da 16       		.uleb128 0x16
 2748 04db 0D000000 		.4byte	.LASF41
 2749 04df 02       		.byte	0x2
 2750 04e0 19       		.byte	0x19
 2751 04e1 5D000000 		.4byte	0x5d
 2752 04e5 05       		.uleb128 0x5
 2753 04e6 03       		.byte	0x3
 2754 04e7 00000000 		.4byte	hours_locked
 2755 04eb 16       		.uleb128 0x16
 2756 04ec 5D000000 		.4byte	.LASF42
 2757 04f0 02       		.byte	0x2
 2758 04f1 19       		.byte	0x19
 2759 04f2 5D000000 		.4byte	0x5d
 2760 04f6 05       		.uleb128 0x5
 2761 04f7 03       		.byte	0x3
 2762 04f8 00000000 		.4byte	minutes_locked
 2763 04fc 00       		.byte	0
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 71


 2764              		.section	.debug_abbrev,"",%progbits
 2765              	.Ldebug_abbrev0:
 2766 0000 01       		.uleb128 0x1
 2767 0001 11       		.uleb128 0x11
 2768 0002 01       		.byte	0x1
 2769 0003 25       		.uleb128 0x25
 2770 0004 0E       		.uleb128 0xe
 2771 0005 13       		.uleb128 0x13
 2772 0006 0B       		.uleb128 0xb
 2773 0007 03       		.uleb128 0x3
 2774 0008 0E       		.uleb128 0xe
 2775 0009 1B       		.uleb128 0x1b
 2776 000a 0E       		.uleb128 0xe
 2777 000b 55       		.uleb128 0x55
 2778 000c 17       		.uleb128 0x17
 2779 000d 11       		.uleb128 0x11
 2780 000e 01       		.uleb128 0x1
 2781 000f 10       		.uleb128 0x10
 2782 0010 17       		.uleb128 0x17
 2783 0011 00       		.byte	0
 2784 0012 00       		.byte	0
 2785 0013 02       		.uleb128 0x2
 2786 0014 24       		.uleb128 0x24
 2787 0015 00       		.byte	0
 2788 0016 0B       		.uleb128 0xb
 2789 0017 0B       		.uleb128 0xb
 2790 0018 3E       		.uleb128 0x3e
 2791 0019 0B       		.uleb128 0xb
 2792 001a 03       		.uleb128 0x3
 2793 001b 0E       		.uleb128 0xe
 2794 001c 00       		.byte	0
 2795 001d 00       		.byte	0
 2796 001e 03       		.uleb128 0x3
 2797 001f 24       		.uleb128 0x24
 2798 0020 00       		.byte	0
 2799 0021 0B       		.uleb128 0xb
 2800 0022 0B       		.uleb128 0xb
 2801 0023 3E       		.uleb128 0x3e
 2802 0024 0B       		.uleb128 0xb
 2803 0025 03       		.uleb128 0x3
 2804 0026 08       		.uleb128 0x8
 2805 0027 00       		.byte	0
 2806 0028 00       		.byte	0
 2807 0029 04       		.uleb128 0x4
 2808 002a 16       		.uleb128 0x16
 2809 002b 00       		.byte	0
 2810 002c 03       		.uleb128 0x3
 2811 002d 0E       		.uleb128 0xe
 2812 002e 3A       		.uleb128 0x3a
 2813 002f 0B       		.uleb128 0xb
 2814 0030 3B       		.uleb128 0x3b
 2815 0031 05       		.uleb128 0x5
 2816 0032 49       		.uleb128 0x49
 2817 0033 13       		.uleb128 0x13
 2818 0034 00       		.byte	0
 2819 0035 00       		.byte	0
 2820 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 72


 2821 0037 2E       		.uleb128 0x2e
 2822 0038 01       		.byte	0x1
 2823 0039 03       		.uleb128 0x3
 2824 003a 0E       		.uleb128 0xe
 2825 003b 3A       		.uleb128 0x3a
 2826 003c 0B       		.uleb128 0xb
 2827 003d 3B       		.uleb128 0x3b
 2828 003e 05       		.uleb128 0x5
 2829 003f 27       		.uleb128 0x27
 2830 0040 19       		.uleb128 0x19
 2831 0041 49       		.uleb128 0x49
 2832 0042 13       		.uleb128 0x13
 2833 0043 11       		.uleb128 0x11
 2834 0044 01       		.uleb128 0x1
 2835 0045 12       		.uleb128 0x12
 2836 0046 06       		.uleb128 0x6
 2837 0047 40       		.uleb128 0x40
 2838 0048 18       		.uleb128 0x18
 2839 0049 9742     		.uleb128 0x2117
 2840 004b 19       		.uleb128 0x19
 2841 004c 01       		.uleb128 0x1
 2842 004d 13       		.uleb128 0x13
 2843 004e 00       		.byte	0
 2844 004f 00       		.byte	0
 2845 0050 06       		.uleb128 0x6
 2846 0051 05       		.uleb128 0x5
 2847 0052 00       		.byte	0
 2848 0053 03       		.uleb128 0x3
 2849 0054 0E       		.uleb128 0xe
 2850 0055 3A       		.uleb128 0x3a
 2851 0056 0B       		.uleb128 0xb
 2852 0057 3B       		.uleb128 0x3b
 2853 0058 05       		.uleb128 0x5
 2854 0059 49       		.uleb128 0x49
 2855 005a 13       		.uleb128 0x13
 2856 005b 02       		.uleb128 0x2
 2857 005c 18       		.uleb128 0x18
 2858 005d 00       		.byte	0
 2859 005e 00       		.byte	0
 2860 005f 07       		.uleb128 0x7
 2861 0060 34       		.uleb128 0x34
 2862 0061 00       		.byte	0
 2863 0062 03       		.uleb128 0x3
 2864 0063 0E       		.uleb128 0xe
 2865 0064 3A       		.uleb128 0x3a
 2866 0065 0B       		.uleb128 0xb
 2867 0066 3B       		.uleb128 0x3b
 2868 0067 05       		.uleb128 0x5
 2869 0068 49       		.uleb128 0x49
 2870 0069 13       		.uleb128 0x13
 2871 006a 02       		.uleb128 0x2
 2872 006b 18       		.uleb128 0x18
 2873 006c 00       		.byte	0
 2874 006d 00       		.byte	0
 2875 006e 08       		.uleb128 0x8
 2876 006f 2E       		.uleb128 0x2e
 2877 0070 01       		.byte	0x1
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 73


 2878 0071 3F       		.uleb128 0x3f
 2879 0072 19       		.uleb128 0x19
 2880 0073 03       		.uleb128 0x3
 2881 0074 0E       		.uleb128 0xe
 2882 0075 3A       		.uleb128 0x3a
 2883 0076 0B       		.uleb128 0xb
 2884 0077 3B       		.uleb128 0x3b
 2885 0078 0B       		.uleb128 0xb
 2886 0079 27       		.uleb128 0x27
 2887 007a 19       		.uleb128 0x19
 2888 007b 11       		.uleb128 0x11
 2889 007c 01       		.uleb128 0x1
 2890 007d 12       		.uleb128 0x12
 2891 007e 06       		.uleb128 0x6
 2892 007f 40       		.uleb128 0x40
 2893 0080 18       		.uleb128 0x18
 2894 0081 9642     		.uleb128 0x2116
 2895 0083 19       		.uleb128 0x19
 2896 0084 01       		.uleb128 0x1
 2897 0085 13       		.uleb128 0x13
 2898 0086 00       		.byte	0
 2899 0087 00       		.byte	0
 2900 0088 09       		.uleb128 0x9
 2901 0089 05       		.uleb128 0x5
 2902 008a 00       		.byte	0
 2903 008b 03       		.uleb128 0x3
 2904 008c 0E       		.uleb128 0xe
 2905 008d 3A       		.uleb128 0x3a
 2906 008e 0B       		.uleb128 0xb
 2907 008f 3B       		.uleb128 0x3b
 2908 0090 0B       		.uleb128 0xb
 2909 0091 49       		.uleb128 0x49
 2910 0092 13       		.uleb128 0x13
 2911 0093 02       		.uleb128 0x2
 2912 0094 18       		.uleb128 0x18
 2913 0095 00       		.byte	0
 2914 0096 00       		.byte	0
 2915 0097 0A       		.uleb128 0xa
 2916 0098 05       		.uleb128 0x5
 2917 0099 00       		.byte	0
 2918 009a 03       		.uleb128 0x3
 2919 009b 08       		.uleb128 0x8
 2920 009c 3A       		.uleb128 0x3a
 2921 009d 0B       		.uleb128 0xb
 2922 009e 3B       		.uleb128 0x3b
 2923 009f 0B       		.uleb128 0xb
 2924 00a0 49       		.uleb128 0x49
 2925 00a1 13       		.uleb128 0x13
 2926 00a2 02       		.uleb128 0x2
 2927 00a3 18       		.uleb128 0x18
 2928 00a4 00       		.byte	0
 2929 00a5 00       		.byte	0
 2930 00a6 0B       		.uleb128 0xb
 2931 00a7 2E       		.uleb128 0x2e
 2932 00a8 00       		.byte	0
 2933 00a9 3F       		.uleb128 0x3f
 2934 00aa 19       		.uleb128 0x19
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 74


 2935 00ab 03       		.uleb128 0x3
 2936 00ac 0E       		.uleb128 0xe
 2937 00ad 3A       		.uleb128 0x3a
 2938 00ae 0B       		.uleb128 0xb
 2939 00af 3B       		.uleb128 0x3b
 2940 00b0 0B       		.uleb128 0xb
 2941 00b1 27       		.uleb128 0x27
 2942 00b2 19       		.uleb128 0x19
 2943 00b3 11       		.uleb128 0x11
 2944 00b4 01       		.uleb128 0x1
 2945 00b5 12       		.uleb128 0x12
 2946 00b6 06       		.uleb128 0x6
 2947 00b7 40       		.uleb128 0x40
 2948 00b8 18       		.uleb128 0x18
 2949 00b9 9642     		.uleb128 0x2116
 2950 00bb 19       		.uleb128 0x19
 2951 00bc 00       		.byte	0
 2952 00bd 00       		.byte	0
 2953 00be 0C       		.uleb128 0xc
 2954 00bf 2E       		.uleb128 0x2e
 2955 00c0 01       		.byte	0x1
 2956 00c1 3F       		.uleb128 0x3f
 2957 00c2 19       		.uleb128 0x19
 2958 00c3 03       		.uleb128 0x3
 2959 00c4 0E       		.uleb128 0xe
 2960 00c5 3A       		.uleb128 0x3a
 2961 00c6 0B       		.uleb128 0xb
 2962 00c7 3B       		.uleb128 0x3b
 2963 00c8 0B       		.uleb128 0xb
 2964 00c9 11       		.uleb128 0x11
 2965 00ca 01       		.uleb128 0x1
 2966 00cb 12       		.uleb128 0x12
 2967 00cc 06       		.uleb128 0x6
 2968 00cd 40       		.uleb128 0x40
 2969 00ce 18       		.uleb128 0x18
 2970 00cf 9642     		.uleb128 0x2116
 2971 00d1 19       		.uleb128 0x19
 2972 00d2 01       		.uleb128 0x1
 2973 00d3 13       		.uleb128 0x13
 2974 00d4 00       		.byte	0
 2975 00d5 00       		.byte	0
 2976 00d6 0D       		.uleb128 0xd
 2977 00d7 0B       		.uleb128 0xb
 2978 00d8 01       		.byte	0x1
 2979 00d9 11       		.uleb128 0x11
 2980 00da 01       		.uleb128 0x1
 2981 00db 12       		.uleb128 0x12
 2982 00dc 06       		.uleb128 0x6
 2983 00dd 01       		.uleb128 0x1
 2984 00de 13       		.uleb128 0x13
 2985 00df 00       		.byte	0
 2986 00e0 00       		.byte	0
 2987 00e1 0E       		.uleb128 0xe
 2988 00e2 34       		.uleb128 0x34
 2989 00e3 00       		.byte	0
 2990 00e4 03       		.uleb128 0x3
 2991 00e5 08       		.uleb128 0x8
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 75


 2992 00e6 3A       		.uleb128 0x3a
 2993 00e7 0B       		.uleb128 0xb
 2994 00e8 3B       		.uleb128 0x3b
 2995 00e9 0B       		.uleb128 0xb
 2996 00ea 49       		.uleb128 0x49
 2997 00eb 13       		.uleb128 0x13
 2998 00ec 02       		.uleb128 0x2
 2999 00ed 18       		.uleb128 0x18
 3000 00ee 00       		.byte	0
 3001 00ef 00       		.byte	0
 3002 00f0 0F       		.uleb128 0xf
 3003 00f1 0B       		.uleb128 0xb
 3004 00f2 01       		.byte	0x1
 3005 00f3 11       		.uleb128 0x11
 3006 00f4 01       		.uleb128 0x1
 3007 00f5 12       		.uleb128 0x12
 3008 00f6 06       		.uleb128 0x6
 3009 00f7 00       		.byte	0
 3010 00f8 00       		.byte	0
 3011 00f9 10       		.uleb128 0x10
 3012 00fa 2E       		.uleb128 0x2e
 3013 00fb 00       		.byte	0
 3014 00fc 3F       		.uleb128 0x3f
 3015 00fd 19       		.uleb128 0x19
 3016 00fe 03       		.uleb128 0x3
 3017 00ff 0E       		.uleb128 0xe
 3018 0100 3A       		.uleb128 0x3a
 3019 0101 0B       		.uleb128 0xb
 3020 0102 3B       		.uleb128 0x3b
 3021 0103 05       		.uleb128 0x5
 3022 0104 11       		.uleb128 0x11
 3023 0105 01       		.uleb128 0x1
 3024 0106 12       		.uleb128 0x12
 3025 0107 06       		.uleb128 0x6
 3026 0108 40       		.uleb128 0x40
 3027 0109 18       		.uleb128 0x18
 3028 010a 9642     		.uleb128 0x2116
 3029 010c 19       		.uleb128 0x19
 3030 010d 00       		.byte	0
 3031 010e 00       		.byte	0
 3032 010f 11       		.uleb128 0x11
 3033 0110 2E       		.uleb128 0x2e
 3034 0111 00       		.byte	0
 3035 0112 3F       		.uleb128 0x3f
 3036 0113 19       		.uleb128 0x19
 3037 0114 03       		.uleb128 0x3
 3038 0115 0E       		.uleb128 0xe
 3039 0116 3A       		.uleb128 0x3a
 3040 0117 0B       		.uleb128 0xb
 3041 0118 3B       		.uleb128 0x3b
 3042 0119 05       		.uleb128 0x5
 3043 011a 49       		.uleb128 0x49
 3044 011b 13       		.uleb128 0x13
 3045 011c 11       		.uleb128 0x11
 3046 011d 01       		.uleb128 0x1
 3047 011e 12       		.uleb128 0x12
 3048 011f 06       		.uleb128 0x6
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 76


 3049 0120 40       		.uleb128 0x40
 3050 0121 18       		.uleb128 0x18
 3051 0122 9642     		.uleb128 0x2116
 3052 0124 19       		.uleb128 0x19
 3053 0125 00       		.byte	0
 3054 0126 00       		.byte	0
 3055 0127 12       		.uleb128 0x12
 3056 0128 01       		.uleb128 0x1
 3057 0129 01       		.byte	0x1
 3058 012a 49       		.uleb128 0x49
 3059 012b 13       		.uleb128 0x13
 3060 012c 01       		.uleb128 0x1
 3061 012d 13       		.uleb128 0x13
 3062 012e 00       		.byte	0
 3063 012f 00       		.byte	0
 3064 0130 13       		.uleb128 0x13
 3065 0131 21       		.uleb128 0x21
 3066 0132 00       		.byte	0
 3067 0133 49       		.uleb128 0x49
 3068 0134 13       		.uleb128 0x13
 3069 0135 2F       		.uleb128 0x2f
 3070 0136 0B       		.uleb128 0xb
 3071 0137 00       		.byte	0
 3072 0138 00       		.byte	0
 3073 0139 14       		.uleb128 0x14
 3074 013a 26       		.uleb128 0x26
 3075 013b 00       		.byte	0
 3076 013c 49       		.uleb128 0x49
 3077 013d 13       		.uleb128 0x13
 3078 013e 00       		.byte	0
 3079 013f 00       		.byte	0
 3080 0140 15       		.uleb128 0x15
 3081 0141 34       		.uleb128 0x34
 3082 0142 00       		.byte	0
 3083 0143 03       		.uleb128 0x3
 3084 0144 0E       		.uleb128 0xe
 3085 0145 3A       		.uleb128 0x3a
 3086 0146 0B       		.uleb128 0xb
 3087 0147 3B       		.uleb128 0x3b
 3088 0148 05       		.uleb128 0x5
 3089 0149 49       		.uleb128 0x49
 3090 014a 13       		.uleb128 0x13
 3091 014b 3F       		.uleb128 0x3f
 3092 014c 19       		.uleb128 0x19
 3093 014d 3C       		.uleb128 0x3c
 3094 014e 19       		.uleb128 0x19
 3095 014f 00       		.byte	0
 3096 0150 00       		.byte	0
 3097 0151 16       		.uleb128 0x16
 3098 0152 34       		.uleb128 0x34
 3099 0153 00       		.byte	0
 3100 0154 03       		.uleb128 0x3
 3101 0155 0E       		.uleb128 0xe
 3102 0156 3A       		.uleb128 0x3a
 3103 0157 0B       		.uleb128 0xb
 3104 0158 3B       		.uleb128 0x3b
 3105 0159 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 77


 3106 015a 49       		.uleb128 0x49
 3107 015b 13       		.uleb128 0x13
 3108 015c 3F       		.uleb128 0x3f
 3109 015d 19       		.uleb128 0x19
 3110 015e 02       		.uleb128 0x2
 3111 015f 18       		.uleb128 0x18
 3112 0160 00       		.byte	0
 3113 0161 00       		.byte	0
 3114 0162 17       		.uleb128 0x17
 3115 0163 34       		.uleb128 0x34
 3116 0164 00       		.byte	0
 3117 0165 03       		.uleb128 0x3
 3118 0166 08       		.uleb128 0x8
 3119 0167 3A       		.uleb128 0x3a
 3120 0168 0B       		.uleb128 0xb
 3121 0169 3B       		.uleb128 0x3b
 3122 016a 0B       		.uleb128 0xb
 3123 016b 49       		.uleb128 0x49
 3124 016c 13       		.uleb128 0x13
 3125 016d 3F       		.uleb128 0x3f
 3126 016e 19       		.uleb128 0x19
 3127 016f 02       		.uleb128 0x2
 3128 0170 18       		.uleb128 0x18
 3129 0171 00       		.byte	0
 3130 0172 00       		.byte	0
 3131 0173 00       		.byte	0
 3132              		.section	.debug_aranges,"",%progbits
 3133 0000 74000000 		.4byte	0x74
 3134 0004 0200     		.2byte	0x2
 3135 0006 00000000 		.4byte	.Ldebug_info0
 3136 000a 04       		.byte	0x4
 3137 000b 00       		.byte	0
 3138 000c 0000     		.2byte	0
 3139 000e 0000     		.2byte	0
 3140 0010 00000000 		.4byte	.LFB3
 3141 0014 30000000 		.4byte	.LFE3-.LFB3
 3142 0018 00000000 		.4byte	.LFB4
 3143 001c 32000000 		.4byte	.LFE4-.LFB4
 3144 0020 00000000 		.4byte	.LFB5
 3145 0024 32000000 		.4byte	.LFE5-.LFB5
 3146 0028 00000000 		.4byte	.LFB7
 3147 002c 32000000 		.4byte	.LFE7-.LFB7
 3148 0030 00000000 		.4byte	.LFB8
 3149 0034 32000000 		.4byte	.LFE8-.LFB8
 3150 0038 00000000 		.4byte	.LFB9
 3151 003c 58000000 		.4byte	.LFE9-.LFB9
 3152 0040 00000000 		.4byte	.LFB63
 3153 0044 04020000 		.4byte	.LFE63-.LFB63
 3154 0048 00000000 		.4byte	.LFB64
 3155 004c 10010000 		.4byte	.LFE64-.LFB64
 3156 0050 00000000 		.4byte	.LFB65
 3157 0054 F0050000 		.4byte	.LFE65-.LFB65
 3158 0058 00000000 		.4byte	.LFB66
 3159 005c 9C000000 		.4byte	.LFE66-.LFB66
 3160 0060 00000000 		.4byte	.LFB67
 3161 0064 40000000 		.4byte	.LFE67-.LFB67
 3162 0068 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 78


 3163 006c 98010000 		.4byte	.LFE68-.LFB68
 3164 0070 00000000 		.4byte	0
 3165 0074 00000000 		.4byte	0
 3166              		.section	.debug_ranges,"",%progbits
 3167              	.Ldebug_ranges0:
 3168 0000 00000000 		.4byte	.LFB3
 3169 0004 30000000 		.4byte	.LFE3
 3170 0008 00000000 		.4byte	.LFB4
 3171 000c 32000000 		.4byte	.LFE4
 3172 0010 00000000 		.4byte	.LFB5
 3173 0014 32000000 		.4byte	.LFE5
 3174 0018 00000000 		.4byte	.LFB7
 3175 001c 32000000 		.4byte	.LFE7
 3176 0020 00000000 		.4byte	.LFB8
 3177 0024 32000000 		.4byte	.LFE8
 3178 0028 00000000 		.4byte	.LFB9
 3179 002c 58000000 		.4byte	.LFE9
 3180 0030 00000000 		.4byte	.LFB63
 3181 0034 04020000 		.4byte	.LFE63
 3182 0038 00000000 		.4byte	.LFB64
 3183 003c 10010000 		.4byte	.LFE64
 3184 0040 00000000 		.4byte	.LFB65
 3185 0044 F0050000 		.4byte	.LFE65
 3186 0048 00000000 		.4byte	.LFB66
 3187 004c 9C000000 		.4byte	.LFE66
 3188 0050 00000000 		.4byte	.LFB67
 3189 0054 40000000 		.4byte	.LFE67
 3190 0058 00000000 		.4byte	.LFB68
 3191 005c 98010000 		.4byte	.LFE68
 3192 0060 00000000 		.4byte	0
 3193 0064 00000000 		.4byte	0
 3194              		.section	.debug_line,"",%progbits
 3195              	.Ldebug_line0:
 3196 0000 C4030000 		.section	.debug_str,"MS",%progbits,1
 3196      02004A00 
 3196      00000201 
 3196      FB0E0D00 
 3196      01010101 
 3197              	.LASF34:
 3198 0000 6D696E75 		.ascii	"minutes\000"
 3198      74657300 
 3199              	.LASF25:
 3200 0008 74756265 		.ascii	"tube\000"
 3200      00
 3201              	.LASF41:
 3202 000d 686F7572 		.ascii	"hours_locked\000"
 3202      735F6C6F 
 3202      636B6564 
 3202      00
 3203              	.LASF36:
 3204 001a 79656172 		.ascii	"year\000"
 3204      00
 3205              	.LASF40:
 3206 001f 73746172 		.ascii	"start\000"
 3206      7400
 3207              	.LASF3:
 3208 0025 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 79


 3208      7420756E 
 3208      7369676E 
 3208      65642069 
 3208      6E7400
 3209              	.LASF37:
 3210 0038 6D6F6E74 		.ascii	"month\000"
 3210      6800
 3211              	.LASF19:
 3212 003e 72657456 		.ascii	"retVal\000"
 3212      616C00
 3213              	.LASF11:
 3214 0045 666C6F61 		.ascii	"float\000"
 3214      7400
 3215              	.LASF22:
 3216 004b 64617465 		.ascii	"date\000"
 3216      00
 3217              	.LASF38:
 3218 0050 64697370 		.ascii	"display_mode\000"
 3218      6C61795F 
 3218      6D6F6465 
 3218      00
 3219              	.LASF42:
 3220 005d 6D696E75 		.ascii	"minutes_locked\000"
 3220      7465735F 
 3220      6C6F636B 
 3220      656400
 3221              	.LASF18:
 3222 006c 696E7075 		.ascii	"inputTime\000"
 3222      7454696D 
 3222      6500
 3223              	.LASF5:
 3224 0076 6C6F6E67 		.ascii	"long unsigned int\000"
 3224      20756E73 
 3224      69676E65 
 3224      6420696E 
 3224      7400
 3225              	.LASF27:
 3226 0088 7365745F 		.ascii	"set_date\000"
 3226      64617465 
 3226      00
 3227              	.LASF43:
 3228 0091 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3228      43313120 
 3228      352E342E 
 3228      31203230 
 3228      31363036 
 3229 00c4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3229      20726576 
 3229      6973696F 
 3229      6E203233 
 3229      37373135 
 3230 00f7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3230      66756E63 
 3230      74696F6E 
 3230      2D736563 
 3230      74696F6E 
 3231              	.LASF33:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 80


 3232 011f 686F7572 		.ascii	"hours\000"
 3232      7300
 3233              	.LASF12:
 3234 0125 646F7562 		.ascii	"double\000"
 3234      6C6500
 3235              	.LASF29:
 3236 012c 6D61696E 		.ascii	"main\000"
 3236      00
 3237              	.LASF9:
 3238 0131 75696E74 		.ascii	"uint16\000"
 3238      313600
 3239              	.LASF10:
 3240 0138 75696E74 		.ascii	"uint32\000"
 3240      333200
 3241              	.LASF1:
 3242 013f 756E7369 		.ascii	"unsigned char\000"
 3242      676E6564 
 3242      20636861 
 3242      7200
 3243              	.LASF8:
 3244 014d 756E7369 		.ascii	"unsigned int\000"
 3244      676E6564 
 3244      20696E74 
 3244      00
 3245              	.LASF24:
 3246 015a 5254435F 		.ascii	"RTC_GetYear\000"
 3246      47657459 
 3246      65617200 
 3247              	.LASF7:
 3248 0166 6C6F6E67 		.ascii	"long long unsigned int\000"
 3248      206C6F6E 
 3248      6720756E 
 3248      7369676E 
 3248      65642069 
 3249              	.LASF28:
 3250 017d 7764745F 		.ascii	"wdt_callback\000"
 3250      63616C6C 
 3250      6261636B 
 3250      00
 3251              	.LASF17:
 3252 018a 5254435F 		.ascii	"RTC_GetMinutes\000"
 3252      4765744D 
 3252      696E7574 
 3252      657300
 3253              	.LASF32:
 3254 0199 74696D65 		.ascii	"time\000"
 3254      00
 3255              	.LASF15:
 3256 019e 73697A65 		.ascii	"sizetype\000"
 3256      74797065 
 3256      00
 3257              	.LASF6:
 3258 01a7 6C6F6E67 		.ascii	"long long int\000"
 3258      206C6F6E 
 3258      6720696E 
 3258      7400
 3259              	.LASF35:
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 81


 3260 01b5 7365636F 		.ascii	"seconds\000"
 3260      6E647300 
 3261              	.LASF44:
 3262 01bd 6D61696E 		.ascii	"main.c\000"
 3262      2E6300
 3263              	.LASF13:
 3264 01c4 63686172 		.ascii	"char\000"
 3264      00
 3265              	.LASF31:
 3266 01c9 64696769 		.ascii	"digits\000"
 3266      747300
 3267              	.LASF2:
 3268 01d0 73686F72 		.ascii	"short int\000"
 3268      7420696E 
 3268      7400
 3269              	.LASF16:
 3270 01da 5254435F 		.ascii	"RTC_GetSecond\000"
 3270      47657453 
 3270      65636F6E 
 3270      6400
 3271              	.LASF47:
 3272 01e8 63617468 		.ascii	"cathode_antidote\000"
 3272      6F64655F 
 3272      616E7469 
 3272      646F7465 
 3272      00
 3273              	.LASF21:
 3274 01f9 5254435F 		.ascii	"RTC_GetDay\000"
 3274      47657444 
 3274      617900
 3275              	.LASF26:
 3276 0204 7365745F 		.ascii	"set_time\000"
 3276      74696D65 
 3276      00
 3277              	.LASF4:
 3278 020d 6C6F6E67 		.ascii	"long int\000"
 3278      20696E74 
 3278      00
 3279              	.LASF30:
 3280 0216 5254435F 		.ascii	"RTC_daysBeforeMonthTbl\000"
 3280      64617973 
 3280      4265666F 
 3280      72654D6F 
 3280      6E746854 
 3281              	.LASF14:
 3282 022d 6C6F6E67 		.ascii	"long double\000"
 3282      20646F75 
 3282      626C6500 
 3283              	.LASF0:
 3284 0239 7369676E 		.ascii	"signed char\000"
 3284      65642063 
 3284      68617200 
 3285              	.LASF23:
 3286 0245 5254435F 		.ascii	"RTC_GetMonth\000"
 3286      4765744D 
 3286      6F6E7468 
 3286      00
ARM GAS  C:\Users\Jason\AppData\Local\Temp\cclg2HvT.s 			page 82


 3287              	.LASF45:
 3288 0252 433A5C55 		.ascii	"C:\\Users\\Jason\\Desktop\\github\\nixie-psoc-proje"
 3288      73657273 
 3288      5C4A6173 
 3288      6F6E5C44 
 3288      65736B74 
 3289 0280 63745C6E 		.ascii	"ct\\nixie_control.cydsn\000"
 3289      69786965 
 3289      5F636F6E 
 3289      74726F6C 
 3289      2E637964 
 3290              	.LASF20:
 3291 0297 5254435F 		.ascii	"RTC_GetHours\000"
 3291      47657448 
 3291      6F757273 
 3291      00
 3292              	.LASF46:
 3293 02a4 6E697869 		.ascii	"nixie_write\000"
 3293      655F7772 
 3293      69746500 
 3294              	.LASF39:
 3295 02b0 646F6E65 		.ascii	"done\000"
 3295      00
 3296              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
